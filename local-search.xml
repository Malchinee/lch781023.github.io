<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HTTP首部</title>
    <link href="/2022/09/06/HTTP%E9%A6%96%E9%83%A8/"/>
    <url>/2022/09/06/HTTP%E9%A6%96%E9%83%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP报文首部"><a href="#HTTP报文首部" class="headerlink" title="HTTP报文首部"></a>HTTP报文首部</h1><img src="/2022/09/06/HTTP%E9%A6%96%E9%83%A8/image-20220906145616078.png" class title="image-20220906145616078"><img src="/2022/09/06/HTTP%E9%A6%96%E9%83%A8/image-20220906145626448.png" class title="image-20220906145626448"><h1 id="HTTP首部字段"><a href="#HTTP首部字段" class="headerlink" title="HTTP首部字段"></a>HTTP首部字段</h1><p>HTTP首部字段类型</p><ol><li>通用首部字段：请求响应报文都有</li><li>请求首部字段：客户端向服务器端发送请求</li><li>响应首部字段：服务器端向客户端返回响应</li><li>实体首部字段：请求和响应报文的实体部分使用的首部</li></ol><h3 id="通用首部字段"><a href="#通用首部字段" class="headerlink" title="通用首部字段"></a>通用首部字段</h3><h4 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h4><p>操作缓存的工作机制，多个参数之间使用$,$连接</p><ul><li><p><strong>no-cache</strong>：防止从缓存中返回过期的资源</p><ul><li><p>客户端发送的请求包含，表示客户端将不会接收缓存过的响应</p></li><li><p>服务器返回的响应包含：缓存服务器不能对资源进行缓存。源服务器以后也将不再对缓存服务器请求中提出的资源有效性进行确认，且禁止其对响应资源进行缓存操作</p></li><li>如果对Cache-Control中对cache字段名具体指定参数值，那么客户端在接收到这个被指定参数值的首部字段对应的响应报文后，就不能使用缓存</li></ul></li><li><p><strong>no-store</strong>：控制可执行缓存的对象的指令</p><p>该指令规定缓存不能在本地存储请求或响应的任一部分</p></li><li><p><strong>max-age</strong>：</p><ul><li>当客户端发送的请求包含：如果判定缓存资源的缓存时间数值比指定时间的数值更小，客户端接收缓存的资源。</li><li>当服务器端返回的响应包含：缓存服务器不对资源的有效性再做确认，而max-age数值代表资源保存为缓存的最长时间</li></ul></li><li><p><strong>s-maxage</strong>：指定缓存期限和认证的指令</p><p>同max-age，但是只适用于供多位用户使用的公共缓存服务器</p></li><li><p><strong>min-fresh</strong>：要求缓存服务器返回至少还未过指定时间的缓存资源</p></li><li><p><strong>max-state</strong>：指示缓存资源，即使过期也照常接收</p></li><li><p><strong>only-if-cached</strong>：客户端仅在缓存服务器本地缓存目标资源的情况才会要求其返回</p></li><li><p><strong>must-revalidate</strong>：代理会向源服务器再次验证即将返回的响应缓存目前是否仍然有效</p><p>使用该指令会忽略max-state指令</p></li><li><p><strong>proxy-revalidate</strong>：要求所有的缓存服务器，在接收到客户端带有该指令的请求，返回响应之前，必须再次验证缓存的有效性</p></li><li><p><strong>no-transform</strong>：无论是在请求还是响应中，缓存都不能改变实体主体的媒体类型</p></li></ul><h4 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h4><p>该首部字段表示：</p><ul><li><p>控制不再转发给代理的首部字段</p><figure class="highlight http"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs http">Connection:不再转发的首部字段名<br></code></pre></td></tr></table></figure></li><li><p>管理持久连接</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Connection</span><span class="hljs-punctuation">: </span>close<br></code></pre></td></tr></table></figure></li></ul><h4 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h4><p>表示创建HTTP报文的日期和时间</p><p>格式</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Date</span><span class="hljs-punctuation">: </span>Tue, 03 Jul 2012 04:40:59 GMT<br></code></pre></td></tr></table></figure><h4 id="Trailer"><a href="#Trailer" class="headerlink" title="Trailer"></a>Trailer</h4><p>Trailer会事先说明在报文主体后记录了哪些首部字段</p><h4 id="Trailer-Encoding"><a href="#Trailer-Encoding" class="headerlink" title="Trailer-Encoding"></a>Trailer-Encoding</h4><p>规定了传输报文主体时采用的编码方式</p><h4 id="Upgrade"><a href="#Upgrade" class="headerlink" title="Upgrade"></a>Upgrade</h4><p>检测HTTP协议及其他协议是否可使用更高版本进行通信</p><p>Upgrade首部字段产生作用的Upgrade对象仅限于客户端和邻接服务器之间。在使用Upgrade时，还需要制定额外的Connnection:Upgrade</p><h4 id="Via"><a href="#Via" class="headerlink" title="Via"></a>Via</h4><p>追踪客户端与服务器之间的请求和响应报文的传输路径</p><p>报文经过代理和网关时，会先在首部字段Via中附加服务器的信息，然后再进行转发</p><p>还可以避免请求回环的发生</p><h4 id="warning"><a href="#warning" class="headerlink" title="warning"></a>warning</h4><p>告知用户一些与缓存相关问题的警告</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTTP"><span class="hljs-attribute">Warning</span><span class="hljs-punctuation">: </span>[警告码][警告的主机:端口号] &quot;[警告内容]&quot; ([日期时间])<br></code></pre></td></tr></table></figure><img src="/2022/09/06/HTTP%E9%A6%96%E9%83%A8/image-20220907203745462.png" class title="image-20220907203745462"><p>​    <img src="/2022/09/06/HTTP%E9%A6%96%E9%83%A8/image-20220907203751532.png" class title="image-20220907203751532"></p><h3 id="请求首部字段"><a href="#请求首部字段" class="headerlink" title="请求首部字段"></a>请求首部字段</h3><h4 id="Accept"><a href="#Accept" class="headerlink" title="Accept"></a>Accept</h4><p>通知服务器，用户代理能够处理的媒体类型及媒体类型的相对优先级</p><p>使用type/subtype这种形式，一次指定多种媒体类型</p><img src="/2022/09/06/HTTP%E9%A6%96%E9%83%A8/image-20220907204231886.png" class title="image-20220907204231886"><p>若要给显示的媒体类型增加优先级，则使用$q=$来额外表示权重值，用分号进行分割$q$的范围是$0$~$1$。不指定$q$值时，默认权重$q=1.0$</p><h4 id="Accept-Charset"><a href="#Accept-Charset" class="headerlink" title="Accept-Charset"></a>Accept-Charset</h4><p>通知服务器用户代理支持的字符集及字符集的相对优先顺序</p><h4 id="Accept-Encoding"><a href="#Accept-Encoding" class="headerlink" title="Accept-Encoding"></a>Accept-Encoding</h4><p>告知服务器用户代理支持的内容编码及内容编码的优先级顺序，可一次性指定多种编码</p><h4 id="Accept-Language"><a href="#Accept-Language" class="headerlink" title="Accept-Language"></a>Accept-Language</h4><p>告知服务器用户代理能够处理的自然语言集，以及自然语言及的相对优先级</p><h4 id="Authorization"><a href="#Authorization" class="headerlink" title="Authorization"></a>Authorization</h4><p>用来告知服务器，用户代理的认证信息（证书值）。</p><p>想要通过服务器认证的用户代理会在接收到返回的401状态码后，把首部字段Authorization加入请求中</p><h4 id="Expect"><a href="#Expect" class="headerlink" title="Expect"></a>Expect</h4><p>告知服务器期望出现的某种特定的行为。</p><p>因服务器无法理解客户端的期望作出回应而发生错误时，会返回状态码417 Expectation Failed</p><h4 id="From"><a href="#From" class="headerlink" title="From"></a>From</h4><p>告知服务器使用用户代理的用户的电子邮件地址</p><p>使用目的就是为了显示搜索引擎等用户代理的负责人的电子邮件联系方式</p><h4 id="Host"><a href="#Host" class="headerlink" title="Host"></a>Host</h4><p>告知服务器请求的资源所处的互联网主机名和端口号</p><p>Host和以单台服务器分配多个域名的虚拟主机的工作机制有很密切的关系</p><h4 id="If-Match"><a href="#If-Match" class="headerlink" title="If-Match"></a>If-Match</h4><p>条件请求：If-xxx这种样式的请求首部字段</p><p>服务器接收到附带条件的请求后，只有判断指定条件为真时，才会执行请求</p><p>如果后面指定参数，它会告知服务器匹配资源所用的实体标记ETag值，这时的服务器无法使用弱ETag值。服务器会对比该字段值和资源的ETag值，仅当两者一致时，才会执行请求；反之，返回412 Precondition Failed</p><h4 id="If-Modified-Since"><a href="#If-Modified-Since" class="headerlink" title="If-Modified-Since"></a>If-Modified-Since</h4><p>告知服务器若If-Modified-Since字段值早于资源的更新时间，则希望能处理该请求；</p><p>而在指定If-Modified-Since字段值的日期之后，如果请求的资源都没有过更新过，返回304 Not Modified的响应</p><h4 id="if-none-Match"><a href="#if-none-Match" class="headerlink" title="if-none-Match"></a>if-none-Match</h4><p>属附带条件之一，它和首部字段If-Match作用相反</p><h4 id="If-Range"><a href="#If-Range" class="headerlink" title="If-Range"></a>If-Range</h4><p>属附带条件之一，告知服务器若指定的If-Range字段值(ETag值或者时间)和请求资源的ETag值或时间相一致时，则作为范围请求处理。反之，返回全体资源。</p><h4 id="IF-Unmodified-Since"><a href="#IF-Unmodified-Since" class="headerlink" title="IF-Unmodified-Since"></a>IF-Unmodified-Since</h4><p>与首部字段If-Modified-Since作用相反。</p><p>告知服务器请求的资源只有再字段值之内指定的日期之后，为发生更新的情况下才能处理该请求。</p><h4 id="Max-Forwards"><a href="#Max-Forwards" class="headerlink" title="Max-Forwards"></a>Max-Forwards</h4><p>通过TRACE方法或OPTIONS方法，发送含有Max-Forwards的请求时，该字段以十进制整数形式指定可经过的服务器的最大数目</p><h4 id="Proxy-Authorization"><a href="#Proxy-Authorization" class="headerlink" title="Proxy-Authorization"></a>Proxy-Authorization</h4><p>接收到代理服务器发来的认证质询时，客户端会发送包含首部字段Proxy-Authorization的请求，以告知服务器认证所需要的信息。</p><h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><p>只需获取部分资源的范围请求</p><h4 id="Referer"><a href="#Referer" class="headerlink" title="Referer"></a>Referer</h4><p>告知服务器请求的原始资源的URI</p><h4 id="TE"><a href="#TE" class="headerlink" title="TE"></a>TE</h4><p>告知服务器客户端能够处理响应的传输编码方式以及相对优先级。</p><p>和Accept-Encoding的功能很像，但是用于传输编码</p><p>除了指定传输编码之外，还可以指定伴随trailer字段的分块传输编码的方式，只需要把trailers赋值给该字段值</p><h4 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent"></a>User-Agent</h4><p>会将创建请求的浏览器和用户代理名称等信息传递给服务器</p><h3 id="响应首部字段"><a href="#响应首部字段" class="headerlink" title="响应首部字段"></a>响应首部字段</h3><h4 id="Accept-Ranges"><a href="#Accept-Ranges" class="headerlink" title="Accept-Ranges"></a>Accept-Ranges</h4><p>告知客户端服务器是否能处理范围请求，以指定获取服务器端的某个部分的资源</p><h4 id="Age"><a href="#Age" class="headerlink" title="Age"></a>Age</h4><p>高职客户端，源服务器在多久前创建了响应。字段值的单位为秒</p><h4 id="ETag"><a href="#ETag" class="headerlink" title="ETag"></a>ETag</h4><p>告知客户端实体标识。它是一种可将资源以字符串形式做唯一性标识的方式。服务器会为美分资源分配对应的ETag值。</p><p>当资源更新时，ETag值也会更新</p><ul><li>强ETag值：不论实体发生多么细微的变化都会改变其值</li><li>若ETag值：只用于提示资源是否相同。只有资源发生了根本改变，产生差异时才会改变ETag值</li></ul><h4 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h4><p>可以将响应接收方引导至某个与请求URI位置不同的资源。</p><p>基本上会配合3xx:Redirection的响应，提供重定向的URI</p><h4 id="Proxy-Authenticate"><a href="#Proxy-Authenticate" class="headerlink" title="Proxy-Authenticate"></a>Proxy-Authenticate</h4><p>会把由代理服务器所要求的认证信息发送给客户端</p><h4 id="Retry-After"><a href="#Retry-After" class="headerlink" title="Retry-After"></a>Retry-After</h4><p>告知客户端应该在多久之后再次发送请求</p><h4 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h4><p>告知客户端当前服务器上安装的HTTP服务器应用程序的信息</p><h4 id="Vary"><a href="#Vary" class="headerlink" title="Vary"></a>Vary</h4><p>可对缓存进行控制。源服务器会向代理服务器传达关于本地缓存使用方法的命令</p><h4 id="WWW-Authenticate"><a href="#WWW-Authenticate" class="headerlink" title="WWW-Authenticate"></a>WWW-Authenticate</h4><p>用于HTTP访问认证。告知客户端适用于访问请求URI所指定资源的认证方案和带参数提示的质询</p><h3 id="实体首部字段"><a href="#实体首部字段" class="headerlink" title="实体首部字段"></a>实体首部字段</h3><h4 id="Allow"><a href="#Allow" class="headerlink" title="Allow"></a>Allow</h4><p>通知客户端能够支持Request-URI指定资源的所有HTTP方法</p><h4 id="Content-Encoding"><a href="#Content-Encoding" class="headerlink" title="Content-Encoding"></a>Content-Encoding</h4><p>告知客户端服务器对实体的主体部分选用的内容编码的方式。</p><p>内容编码是在不丢失实体信息的前提下所进行的压缩</p><h4 id="Content-Language"><a href="#Content-Language" class="headerlink" title="Content-Language"></a>Content-Language</h4><p>告知客户端实体主体使用的自然语言</p><h4 id="Content-Length"><a href="#Content-Length" class="headerlink" title="Content-Length"></a>Content-Length</h4><p>表明实体主体部分的大小</p><h4 id="Content-Location"><a href="#Content-Location" class="headerlink" title="Content-Location"></a>Content-Location</h4><p>给出与报文主体部分相对应的URI。与Location不同，Content-Location表示的时报文主体返回资源对应的URI</p><h4 id="Content-MD5"><a href="#Content-MD5" class="headerlink" title="Content-MD5"></a>Content-MD5</h4><p>检查报文主体在传输过程中是否保持完整，以及确认传输到达</p><h4 id="Cotent-Range"><a href="#Cotent-Range" class="headerlink" title="Cotent-Range"></a>Cotent-Range</h4><p>告知客户端作为响应返回的实体的哪个部分符合范围请求</p><h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h4><p>实体主体内对象的媒体类型。</p><p>和Accept一样，使用type/subtype形式赋值</p><h4 id="Expires"><a href="#Expires" class="headerlink" title="Expires"></a>Expires</h4><p>将资源失效的日期告知客户端。</p><p>当字段Cache-Control有指定的max-age指令时，会优先处理max-age指令</p><h4 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h4><p>指明资源最终修改时间</p><h3 id="为Cookie服务的首部字段"><a href="#为Cookie服务的首部字段" class="headerlink" title="为Cookie服务的首部字段"></a>为Cookie服务的首部字段</h3><h4 id="Set-Cookie"><a href="#Set-Cookie" class="headerlink" title="Set-Cookie"></a>Set-Cookie</h4><img src="/2022/09/06/HTTP%E9%A6%96%E9%83%A8/image-20220907225742963.png" class title="image-20220907225742963"><img src="/2022/09/06/HTTP%E9%A6%96%E9%83%A8/image-20220907225748834.png" class title="image-20220907225748834">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>排序</title>
    <link href="/2022/09/04/%E6%8E%92%E5%BA%8F/"/>
    <url>/2022/09/04/%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>插入排序从数组的下标为1的元素开始，将整个数组分为两个部分：</p><p>一部分是前面的，表示已经排序好了</p><p>另一部分是后面的，还是无序状态</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insertSort</span><span class="hljs-params">(<span class="hljs-type">int</span> [] arr)</span>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;arr.length;i++)&#123;<br><span class="hljs-type">int</span> insertIndex=i-<span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> insertVal=arr[i];<br><span class="hljs-keyword">while</span>(insertIndex&gt;=<span class="hljs-number">0</span>&amp;&amp;arr[insertIndex]&gt;insertVal)&#123;<br>arr[insertIndex+<span class="hljs-number">1</span>]=arr[insertIndex];<br>insertIndex--;<br>&#125;<br>arr[insertIndex+<span class="hljs-number">1</span>]=insertVal;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度，最坏$O(N^2)$，最好$O(N)$</p><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>插入排序的升级版，</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HTTP</title>
    <link href="/2022/09/04/HTTP/"/>
    <url>/2022/09/04/HTTP/</url>
    
    <content type="html"><![CDATA[<h1 id="简单的"><a href="#简单的" class="headerlink" title="简单的"></a>简单的</h1><h3 id="Cookie技术"><a href="#Cookie技术" class="headerlink" title="Cookie技术"></a>Cookie技术</h3><p>Http协议是无状态协议，这种协议有好处，由于不必保存状态，可以减少服务器的CPU及内存资源的消耗。</p><p>但是会使业务处理比较复杂，Cookie技术通过在请求和相应报文中写入Cookie信息控制客户端状态</p><p>服务端在相应报文中写入Set-Cookie通知客户端保存该值，在下一次访问资源时请求报文加上Cookie的值，服务器对比记录，得到一个状态信息</p><h1 id="Http报文信息"><a href="#Http报文信息" class="headerlink" title="Http报文信息"></a>Http报文信息</h1><h3 id="报文的首部内容"><a href="#报文的首部内容" class="headerlink" title="报文的首部内容"></a>报文的首部内容</h3><ul><li><strong>请求行</strong>：请求的方法，请求URI和HTTP版本</li><li><strong>状态行</strong>：相应结果状态码，原因短语，HTTP版本</li><li><strong>首部字段</strong>：请求和相应的各种条件和属性的各类首部，4个首部：通用、请求、相应、实体</li><li><strong>其他</strong>：如Cookie信息</li></ul><h3 id="编码提升传输速率"><a href="#编码提升传输速率" class="headerlink" title="编码提升传输速率"></a>编码提升传输速率</h3><p>HTTP报文的主体用于传输请求或响应的实体主体</p><p>通常，报文主题等于实体。只有当传输过程中进行编码操作时，实体主体的内容发生变化，才导致它和它的报文主体产生差异</p><p>内容编码：指明应用在试题内容上的编码格式，并保持实体信息原样压缩。内容编码后的实体由客户端接收并负责解码</p><h3 id="分割发送的分块传输编码"><a href="#分割发送的分块传输编码" class="headerlink" title="分割发送的分块传输编码"></a>分割发送的分块传输编码</h3><p>HTTP通信时，请求编码的实体资源尚未全部传输完成之前，浏览器无法显示请求页面。</p><p>在传输大容量数据之前，通过把数据分割成多块，能够让浏览器逐步显示页面。</p><p>实体分块传输编码：把实体主题分块的功能</p><p>每一块都会用十六进制来标记块的大小，实体的最后一块会用$”0(CR+LF)”$来标记</p><h3 id="发送多种数据的多部分对象集合"><a href="#发送多种数据的多部分对象集合" class="headerlink" title="发送多种数据的多部分对象集合"></a>发送多种数据的多部分对象集合</h3><p>HTTP报文使用多对象集合时，需要在首部字段里添加<strong>Content-type</strong></p><p>使用<strong>boundary</strong>字符串来划分多部分对象集合指明的各类实体。</p><p>在boundary字符串指定的各个实体的起始行之前插入”—“标记，而在多部分对象集合对应的字符串的最后插入”—“标记</p><h3 id="获取部分内容的范围请求"><a href="#获取部分内容的范围请求" class="headerlink" title="获取部分内容的范围请求"></a>获取部分内容的范围请求</h3><p>执行范围请求时，使用首部字段<strong>Range</strong>来指定资源的<strong>byte</strong>范围</p><p>格式：</p><figure class="highlight http"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs HTTP"><span class="hljs-attribute">Range</span><span class="hljs-punctuation">: </span>byte=5001-10000//5001~10000<br><span class="hljs-attribute">Range</span><span class="hljs-punctuation">: </span>byte=5001-//5001之后的全部<br><span class="hljs-attribute">Range</span><span class="hljs-punctuation">: </span>byte=-3000,5000-7000 //从一开始到3000和5000~7000的<br></code></pre></td></tr></table></figure><p>响应会返回状态码<strong>206 Partial Conten</strong>t响应报文，会在首部字段<strong>Content-Type</strong>标明<strong>multipart/byteranges</strong>后返回响应报文</p><h3 id="内容协商后返回最合适的内容"><a href="#内容协商后返回最合适的内容" class="headerlink" title="内容协商后返回最合适的内容"></a>内容协商后返回最合适的内容</h3><p>内容协商会以响应的资源的语言、字符集、编码方式等作为判断的基准，提供给客户端最为合适的资源</p><ul><li>服务器驱动协商</li><li>客户端驱动协商</li><li>透明协商</li></ul><h1 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a>HTTP状态码</h1><h3 id="2XX-成功"><a href="#2XX-成功" class="headerlink" title="2XX 成功"></a>2XX 成功</h3><h4 id="200-OK"><a href="#200-OK" class="headerlink" title="200 OK"></a>200 OK</h4><p>客户端发来的请求在服务端背正常处理了</p><h4 id="204-No-Content"><a href="#204-No-Content" class="headerlink" title="204 No Content"></a>204 No Content</h4><p>请求被处理，但是不返回也不允许返回任何实体的主体</p><h4 id="206-Partial-Content"><a href="#206-Partial-Content" class="headerlink" title="206 Partial Content"></a>206 Partial Content</h4><p>表示客户端进行了范围请求，服务器成功执行了这部分GET请求，响应报文中包含<strong>Content-Range</strong>指定的范围的实体内容</p><h3 id="3XX-重定向"><a href="#3XX-重定向" class="headerlink" title="3XX 重定向"></a>3XX 重定向</h3><h4 id="301-Moved-Permanently"><a href="#301-Moved-Permanently" class="headerlink" title="301 Moved Permanently"></a>301 Moved Permanently</h4><p>永久性重定向。表示请求的资源已经分配了新的URI，以后应该使用资源现在所指的URI</p><h4 id="302-Found"><a href="#302-Found" class="headerlink" title="302 Found"></a>302 Found</h4><p>临时性重定向。但是代表资源不是被永久移动，只是临时性质的，以后还可能移动</p><h4 id="303-See-Other"><a href="#303-See-Other" class="headerlink" title="303 See Other"></a>303 See Other</h4><p>请求的资源存在着另一个URI，应使用GET方法定向获取请求的资源</p><p>与302的区别是明确客户端应使用GET方法</p><h4 id="304-Not-Modified"><a href="#304-Not-Modified" class="headerlink" title="304 Not Modified"></a>304 Not Modified</h4><p>服务器端允许请求访问资源，但是未满足条件。但是和重定向没有任何关系</p><h4 id="307-Temporary-Redirect"><a href="#307-Temporary-Redirect" class="headerlink" title="307 Temporary Redirect"></a>307 Temporary Redirect</h4><p>与302相同。</p><p>遵照浏览器标准，不会从POST变成GET</p><h3 id="4XX-客户端错误"><a href="#4XX-客户端错误" class="headerlink" title="4XX 客户端错误"></a>4XX 客户端错误</h3><h4 id="400-Bad-Request"><a href="#400-Bad-Request" class="headerlink" title="400 Bad Request"></a>400 Bad Request</h4><p>请求报文中存在语法错误，浏览器会像对待200 OK一样对待该状态码</p><h4 id="401-Unauthorized"><a href="#401-Unauthorized" class="headerlink" title="401 Unauthorized"></a>401 Unauthorized</h4><p>发送的请求需要通过HTTP认证（BASIC认证、DIGEST认证）的认证信息。如果之前已进行过1次请求，则表示认证失败</p><p>返回含401的响应必须包含一个适用于被请求资源的<strong>WWW-Authenticate</strong>首部用以质询用户信息。当浏览器初次接收到401响应时，会弹出认证用的对话窗口</p><h4 id="403-Forbidden"><a href="#403-Forbidden" class="headerlink" title="403 Forbidden"></a>403 Forbidden</h4><p>请求资源的访问被服务器拒接了。服务端没有必要给出详细理由</p><h4 id="404-Not-Found"><a href="#404-Not-Found" class="headerlink" title="404 Not Found"></a>404 Not Found</h4><p>无法找到请求的资源</p><h3 id="5XX-服务器错误"><a href="#5XX-服务器错误" class="headerlink" title="5XX 服务器错误"></a>5XX 服务器错误</h3><h4 id="500-Internal-Server-Error"><a href="#500-Internal-Server-Error" class="headerlink" title="500 Internal Server Error"></a>500 Internal Server Error</h4><p>服务器端在执行请求时发生了错误，Web应用存在bug等</p><h4 id="503-Service-Unavailable"><a href="#503-Service-Unavailable" class="headerlink" title="503 Service Unavailable"></a>503 Service Unavailable</h4><p>服务器暂时处于超负载或正在进行停机维护，现在无法处理请求</p><h1 id="与HTTP协作的Web服务器"><a href="#与HTTP协作的Web服务器" class="headerlink" title="与HTTP协作的Web服务器"></a>与HTTP协作的Web服务器</h1><h3 id="虚拟主机"><a href="#虚拟主机" class="headerlink" title="虚拟主机"></a>虚拟主机</h3><p>在相同的IP地址下，由于虚拟主机可以即存在多个不同主机名和域名的Web网站，因此在发送HTTP请求时，必须在Host首部内完整指定主机名或域名的URI</p><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>基本行为：接收客户端发送的请求后转发给其他服务器。代理不改变请求URI</p><p>转发时，需要附加Via首部字段以标记出经过的主机信息</p><p>利用代理服务器的好处：利用缓存技术减少网络带宽的流量，组织内部针对特定网站的访问控制，以获取访问日志为主要目的</p><h3 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h3><p>网关能使通信线路上的服务器提供非HTTP协议服务</p><h3 id="隧道"><a href="#隧道" class="headerlink" title="隧道"></a>隧道</h3><p>隧道可按要求建立起一条与其他服务器的通信线路，届时使用SSL等加密手段进行通信。</p><p>隧道的目的是确保客户端能与服务器进行安全的通信</p><p>隧道本身不回去解析HTTP请求，会在通信双方断开连接时结束</p><h1 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h1><h3 id="HTTP的缺点"><a href="#HTTP的缺点" class="headerlink" title="HTTP的缺点"></a>HTTP的缺点</h3><ul><li>通信使用明文，不加密，内容可能会被窃听</li><li>不验证通信双方的身份，因此有可能会遭遇伪装</li><li>无法验证报文的完整性，所以有可能已遭篡改</li></ul><p>HTTP+加密+认证+完整性保护=HTTPS</p><h3 id="共享密钥（对称密钥）"><a href="#共享密钥（对称密钥）" class="headerlink" title="共享密钥（对称密钥）"></a>共享密钥（对称密钥）</h3><p>加密和解密同用一个密钥的方式</p><p>但是发送密钥有被窃听的风险，但不发送，对方就不能解密。如果密钥能够安全地被发送，那数据也应该能安全送达</p><h3 id="使用两把密钥的公开密钥加密"><a href="#使用两把密钥的公开密钥加密" class="headerlink" title="使用两把密钥的公开密钥加密"></a>使用两把密钥的公开密钥加密</h3><p>公开密钥加密使用一对非对称的密钥。一把叫做私有密钥，另一把叫做公开密钥。</p><p>私有密钥不能让别人直到，公开密钥可以随意发布，任何人都能获得</p><p>使用公开密钥加密方式，发送密钥的一方使用对方的公开密钥进行加密处理，对方收到被加密的信息后，再使用自己的私有密钥进行解密。</p><p>根据公开密钥和密文，解密是非常困难的</p><h3 id="HTTPS采用混合加密机制"><a href="#HTTPS采用混合加密机制" class="headerlink" title="HTTPS采用混合加密机制"></a>HTTPS采用混合加密机制</h3><p>HTTPS使用<strong>共享密钥加密</strong>和<strong>公开密钥加密</strong>两者并用的混合加密机制</p><img src="/2022/09/04/HTTP/image-20220906141458279.png" class title="image-20220906141458279"><p><strong>证书</strong>：解决公开密钥是否是真正的公开密钥的问题</p><p>证书作用一个是证明通信一方的服务器是否规范，另外一个作用是可确认对方服务器背后运营的企业是否真实存在</p><p>证书使用流程：</p><ol><li>服务器首先向一个大家都信任的第三方机构申请一个身份证书</li><li>客户端向服务器建立通信之前首先向服务器请求获得服务器的证书</li><li>服务器收到请求后把数字证书发送给客户端</li><li>客户端获得服务器证书后，然后与可信任的第三方机构证书进行验证，验证通过过后则进行正常的内容通信</li></ol><h3 id="HTTPS安全通信机制"><a href="#HTTPS安全通信机制" class="headerlink" title="HTTPS安全通信机制"></a>HTTPS安全通信机制</h3><p>前提：公共密钥加密的密文只有私钥才能解开，私有密钥加密的密文只有公共密钥才能解开</p><h4 id="1-客户端发出请求"><a href="#1-客户端发出请求" class="headerlink" title="1.客户端发出请求"></a>1.客户端发出请求</h4><p>客户端向服务器发出加密通信的请求，称为Client Hello报文。</p><p>报文中有以下信息：</p><ul><li>客户端支持的SSL版本</li><li>加密组件(Cipher Suite)列表</li></ul><h4 id="2-服务器回应"><a href="#2-服务器回应" class="headerlink" title="2.服务器回应"></a>2.服务器回应</h4><p>如果加密组件不符合服务器的要求，断开连接</p><ol><li>服务器发送Server Hello报文回应，内容和上一封客户端报文相似，服务器的加密组件内容是从接收到的客户端加密组件内筛选出来的</li><li>发送Certificate报文，报文包含公开密钥证书</li><li>发送Server Hello Done报文通知客户端</li></ol><h4 id="3-客户端回应"><a href="#3-客户端回应" class="headerlink" title="3.客户端回应"></a>3.客户端回应</h4><ol><li>客户端发送Client Key Exchange报文作为回应，报文中包含通信加密中使用的一种被称为Pro Master secret的随机密码串，该密码串就是后面用到的对称加密的私钥</li><li>客户端持续发送Change Cipher Spec报文，提示服务器之后的通信会采用Pre-master secret密钥加密</li><li>客户端发送Finished报文，报文包含连接至今全部报文的整体校验值。这次握手协商是否能够成功，要以服务器是否能够正确解密该报文作为判定标准</li></ol><h4 id="4-服务器响应"><a href="#4-服务器响应" class="headerlink" title="4.服务器响应"></a>4.服务器响应</h4><ol><li>服务器同样发送Change Cipher Spec报文</li><li>服务器同样发送Finished报文</li></ol><p>服务器和客户端的Finished报文交换完毕之后，SSL连接就算建立完成了</p><p>两者开始发送HTTP报文</p><h3 id="SSL速度"><a href="#SSL速度" class="headerlink" title="SSL速度"></a>SSL速度</h3><p>SSL速度慢分两种</p><p>一种是通信慢，另一种是由于大量消耗CPU等内存资源，导致变慢，</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉查找树</title>
    <link href="/2022/09/02/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/"/>
    <url>/2022/09/02/%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h1><p>对数中的每个节点，它的左子树的值都小于该节点的值，它的右子树的值都大于该节点的值</p><p>增加节点、查找节点比较简单，删除节点的逻辑有点复杂</p><p>我们先要找到<strong>要删除节点的父节点</strong>和<strong>要删除的节点</strong>，然后分以下三种情况</p><ul><li>如果要删除的节点是叶子节点，直接让父节点的左儿子或右儿子为0即可</li><li>如果要删除的节点有左右子树，找到右子树的最小值，让删除该节点并互换两节点的值</li><li>如果要删除的节点只有一棵子树，直接按链表删除就好，注意分好类</li></ul><p>定义节点类：</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">int</span> value;<br>    Node left;<br>    Node right;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Node</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br>        <span class="hljs-built_in">this</span>.value=value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Node&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;value=&quot;</span> + value +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//递归的形式添加节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Node node)</span>&#123;<br>        <span class="hljs-keyword">if</span>(node==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//判断传入节点的值，和当前子树的根节点值嗯对关系</span><br>        <span class="hljs-keyword">if</span>(node.value&lt;<span class="hljs-built_in">this</span>.value)&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left==<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//如果当前节点左子节点为空</span><br>                <span class="hljs-built_in">this</span>.left=node;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">this</span>.left.add(node);<span class="hljs-comment">//递归地向左子树添加</span><br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//添加地节点地值大于当前节点的值</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right==<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-built_in">this</span>.right=node;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-built_in">this</span>.right.add(node);<span class="hljs-comment">//递归地向右子树添加</span><br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//中序遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.left.infixOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.right.infixOrder();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//查找要删除的节点</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 希望删除的节点的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 如果找到返回该节点，否则返回null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.value==value) <span class="hljs-keyword">return</span>  <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(value&lt;<span class="hljs-built_in">this</span>.value)&#123;<span class="hljs-comment">//如果查找的值小于当前节点，则向左子树递归查找</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left==<span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.left.search(value);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//如果查找的值大于当前节点，则向右子树递归查找</span><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right==<span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.right.search(value);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//查找要删除节点的父节点</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> value 要查找的节点的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回要删除节点的父节点，如果没有就返回null</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">searchParent</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br>        <span class="hljs-comment">//如果当前节点就是要删除的节点的父节点就返回</span><br>        <span class="hljs-keyword">if</span>((<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>&amp;&amp;<span class="hljs-built_in">this</span>.left.value==value)||<br>                (<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>&amp;&amp;<span class="hljs-built_in">this</span>.right.value==value))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        &#125;<br>        <span class="hljs-comment">//如果查找的值小于当前节点的值并且当前节点的左子节点不为空</span><br>        <span class="hljs-keyword">if</span>(value&lt;<span class="hljs-built_in">this</span>.value&amp;&amp;<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.left.searchParent(value);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(value&gt;=<span class="hljs-built_in">this</span>.value&amp;&amp;<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.right.searchParent(value);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<span class="hljs-comment">//没有找到父节点</span><br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>定义二叉查找树类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinarySortTree</span>&#123;<br>    <span class="hljs-keyword">private</span> Node root;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Node node)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>)&#123;<br>            root=node;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            root.add(node);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (root != <span class="hljs-literal">null</span>) &#123;<br>            root.infixOrder();<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;当前二叉排序树空，不能遍历&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//查找要删除的节点</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root.search(value);<br>    &#125;<br>    <span class="hljs-comment">//查找要删除的父节点</span><br>    <span class="hljs-keyword">public</span> Node <span class="hljs-title function_">searchParent</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> root.searchParent(value);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 功能：返回并删除根节点的右子树的最小节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> node 传入的节点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 返回以node为根节点的二叉排序树的最小节点的值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delRightTreeMin</span><span class="hljs-params">(Node node)</span>&#123;<br>        Node target=node;<br>        <span class="hljs-keyword">while</span>(target.left!=<span class="hljs-literal">null</span>)&#123;<br>            target=target.left;<br>        &#125;<br>        <span class="hljs-comment">//这时target就指向了最小节点</span><br>        <span class="hljs-comment">//删除最小节点</span><br>        delNode(target.value);<br>        <span class="hljs-keyword">return</span> target.value;<br>    &#125;<br>    <span class="hljs-comment">//删除节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delNode</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        Node targetNode=search(value);<br>        <span class="hljs-comment">//如果没有找到要删除的节点</span><br>        <span class="hljs-keyword">if</span>(targetNode==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//如果发现当前这棵二叉排序树只有一个节点</span><br>        <span class="hljs-keyword">if</span>(root.left==<span class="hljs-literal">null</span>&amp;&amp;root.right==<span class="hljs-literal">null</span>)&#123;<br>           root=<span class="hljs-literal">null</span>;<br>           <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//去找targetNode的父节点</span><br>        Node parent=searchParent(value);<br>        <span class="hljs-comment">//如果删除的节点是叶子节点</span><br>        <span class="hljs-keyword">if</span>(targetNode.left==<span class="hljs-literal">null</span>&amp;&amp;targetNode.right==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//判断targetNode是父节点的左子节点还是父节点的右子节点</span><br>            <span class="hljs-keyword">if</span>(parent.left!=<span class="hljs-literal">null</span>&amp;&amp;parent.left==targetNode)&#123;<span class="hljs-comment">//是父节点的左子节点</span><br>                parent.left=<span class="hljs-literal">null</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(parent.right!=<span class="hljs-literal">null</span>&amp;&amp;parent.right==targetNode)&#123;<span class="hljs-comment">//是父节点的右子节点</span><br>                parent.right=<span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(targetNode.left!=<span class="hljs-literal">null</span>&amp;&amp;targetNode.right!=<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//有左右子树</span><br>            <span class="hljs-type">int</span> minVal=delRightTreeMin(targetNode.right);<br>            targetNode.value=minVal;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//删除只有一棵子树的节点</span><br>            <span class="hljs-keyword">if</span>(targetNode.left!=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">if</span>(parent!=<span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">//如果targetNode是parent的左子节点</span><br>                    <span class="hljs-keyword">if</span> (parent.left == targetNode) &#123;<br>                        parent.left = targetNode.left;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        parent.right = targetNode.left;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    root=targetNode.left;<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//要删除的节点有右子节点</span><br>                <span class="hljs-keyword">if</span> (parent != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (parent.left == targetNode) &#123;<br>                        parent.left = targetNode.right;<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        parent.right = targetNode.right;<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    root=targetNode.right;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>二叉树</title>
    <link href="/2022/09/02/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <url>/2022/09/02/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="普通的二叉树的各种方法"><a href="#普通的二叉树的各种方法" class="headerlink" title="普通的二叉树的各种方法"></a>普通的二叉树的各种方法</h1><p>BinaryTree封装HeroNode节点</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTree</span>&#123;<br>    <span class="hljs-keyword">private</span> HeroNode root;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRoot</span><span class="hljs-params">(HeroNode root)</span>&#123;<br>        <span class="hljs-built_in">this</span>.root=root;<br>    &#125;<br>    <span class="hljs-comment">//前序遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root!=<span class="hljs-literal">null</span>)<span class="hljs-built_in">this</span>.root.preOrder();<br>        <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;二叉树为空，无法遍历&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//中序遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root!=<span class="hljs-literal">null</span>) <span class="hljs-built_in">this</span>.root.infixOrder();<br>        <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;二叉树为空，无法遍历&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//后序遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root!=<span class="hljs-literal">null</span>) <span class="hljs-built_in">this</span>.root.postOrder();<br>        <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;二叉树为空，无法遍历&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//前序遍历查找</span><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">preOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root!=<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.root.preOrderSearch(no);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span>  <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;二叉树为空&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//中序遍历查找</span><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">infixOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root!=<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.root.infixOrderSearch(no);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span>  <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;二叉树为空&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//后序遍历查找</span><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">postOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root!=<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.root.postOrderSearch(no);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;二叉树为空&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//删除节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;空树，不能删除&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(root.getNo()==no) &#123;<br>            root=<span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">this</span>.root.delNode(no);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroNode</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> HeroNode left;<br>    <span class="hljs-keyword">private</span> HeroNode right;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HeroNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no,String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.no=no;<br>        <span class="hljs-built_in">this</span>.name=name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getLeft</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeft</span><span class="hljs-params">(HeroNode left)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getRight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRight</span><span class="hljs-params">(HeroNode right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//前序遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.left.preOrder();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.right.preOrder();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//中序遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.left.infixOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.right.infixOrder();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//后续遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.left.postOrder();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.right.postOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-comment">//前序遍历查找</span><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">preOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.no==no) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        HeroNode resNode=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>) resNode=<span class="hljs-built_in">this</span>.left.preOrderSearch(no);<br>        <span class="hljs-keyword">if</span>(resNode!=<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> resNode;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>) resNode=<span class="hljs-built_in">this</span>.right.preOrderSearch(no);<br>        <span class="hljs-keyword">return</span>  resNode;<br>    &#125;<br>    <span class="hljs-comment">//中序遍历查找</span><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">infixOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        HeroNode resNode=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>) resNode=<span class="hljs-built_in">this</span>.left.infixOrderSearch(no);<br>        <span class="hljs-keyword">if</span>(resNode!=<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> resNode;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.no==no) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>) resNode=<span class="hljs-built_in">this</span>.right.infixOrderSearch(no);<br>        <span class="hljs-keyword">return</span> resNode;<br>    &#125;<br>    <span class="hljs-comment">//后序遍历查找</span><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">postOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        HeroNode resNode=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>) resNode=<span class="hljs-built_in">this</span>.left.postOrderSearch(no);<br>        <span class="hljs-keyword">if</span>(resNode!=<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> resNode;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>) resNode=<span class="hljs-built_in">this</span>.right.postOrderSearch(no);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.no==no) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">return</span> resNode;<br>    &#125;<br>    <span class="hljs-comment">//递归删除节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>&amp;&amp;<span class="hljs-built_in">this</span>.left.no==no)&#123;<br>            <span class="hljs-built_in">this</span>.left=<span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>&amp;&amp;<span class="hljs-built_in">this</span>.right.no==no)&#123;<br>            <span class="hljs-built_in">this</span>.right=<span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>) <span class="hljs-built_in">this</span>.left.delNode(no);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>) <span class="hljs-built_in">this</span>.right.delNode(no);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="数组模拟二叉树"><a href="#数组模拟二叉树" class="headerlink" title="数组模拟二叉树"></a>数组模拟二叉树</h1><p>对于一个节点n而言，左儿子是2n，右儿子是2n+1</p><p>假设有N个叶子节点，最少需要2N-1个空间，因为自己需要N个，所有的父节点需要N-1个，因为a[0]是不能用的，所以最少需要开2N个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrBinaryTree</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>  [] arr;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrBinaryTree</span><span class="hljs-params">(<span class="hljs-type">int</span> [] arr)</span>&#123;<br>        <span class="hljs-built_in">this</span>.arr=arr;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span>&#123;<br>        <span class="hljs-keyword">if</span>(arr==<span class="hljs-literal">null</span>||arr.length==<span class="hljs-number">0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;数组为空，不能按照二叉树的前序遍历&quot;</span>);<br>        &#125;<br>        System.out.println(arr[index]);<br>        <span class="hljs-keyword">if</span>(index*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>&lt; arr.length)&#123;<br>            preOrder(index*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(index*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>&lt; arr.length)&#123;<br>            preOrder(index*<span class="hljs-number">2</span>+<span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="线索化二叉树"><a href="#线索化二叉树" class="headerlink" title="线索化二叉树"></a>线索化二叉树</h1><p>传统的二叉树的很多节点，如叶子节点的左右节点都为空，会浪费很多空间，如果让他们指向一些有用的东西，会节省很多资源</p><p>让一些空节点指向”前驱节点“或者”后继节点“，这样就不必用递归的方式遍历二叉树，可以节省很多时间</p><p>这个例子中序线索化二叉树，所以中序遍历就无需递归搜索</p><p>思路：如果该节点的左儿子节点为空，那么就让它指向上一个节点，称为”<strong>前驱节点</strong>“；如果该节点的右儿子为空，那么就让它指向下一个节点，称为”<strong>后继节点</strong>“。</p><p>同时，每个节点还应该加上两个变量，表示左指针的类型，0表示正常指向，1表示是前驱节点或者后继节点</p><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedBinaryTree</span>&#123;<br>    <span class="hljs-keyword">private</span> HeroNode root;<br>    <span class="hljs-keyword">private</span> HeroNode pre=<span class="hljs-literal">null</span>;<span class="hljs-comment">//在进行递归线索化时，pre总是保留node的前一个节点</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRoot</span><span class="hljs-params">(HeroNode root)</span>&#123;<br>        <span class="hljs-built_in">this</span>.root=root;<br>    &#125;<br>    <span class="hljs-comment">//前序遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root!=<span class="hljs-literal">null</span>)<span class="hljs-built_in">this</span>.root.preOrder();<br>        <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;二叉树为空，无法遍历&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//中序遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root!=<span class="hljs-literal">null</span>) <span class="hljs-built_in">this</span>.root.infixOrder();<br>        <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;二叉树为空，无法遍历&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//后序遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root!=<span class="hljs-literal">null</span>) <span class="hljs-built_in">this</span>.root.postOrder();<br>        <span class="hljs-keyword">else</span> System.out.println(<span class="hljs-string">&quot;二叉树为空，无法遍历&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//前序遍历查找</span><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">preOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root!=<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.root.preOrderSearch(no);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span>  <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;二叉树为空&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//中序遍历查找</span><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">infixOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root!=<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.root.infixOrderSearch(no);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span>  <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;二叉树为空&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//后序遍历查找</span><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">postOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root!=<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.root.postOrderSearch(no);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;二叉树为空&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//删除节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deleteNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;空树，不能删除&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(root.getNo()==no) &#123;<br>            root=<span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">this</span>.root.delNode(no);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//遍历中序线索化二叉树的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">threadedList</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//定义一个变量，存储当前遍历的节点</span><br>        HeroNode temp=root;<br>        <span class="hljs-keyword">while</span>(temp!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//循环先找到leftType＝1的节点，即该节点是中序遍历的第一个节点</span><br>            <span class="hljs-keyword">while</span>(temp.getLeftType()==<span class="hljs-number">0</span>)&#123;<br>                temp=temp.getLeft();<br>            &#125;<br>            <span class="hljs-comment">//打印当前节点</span><br>            System.out.println(temp);<br>            <span class="hljs-comment">//如果右节点是后继节点</span><br>            <span class="hljs-keyword">while</span>(temp.getLeftType()==<span class="hljs-number">1</span>)&#123;<br>                temp=temp.getRight();<br>                System.out.println(temp);<br>            &#125;<br>            temp=temp.getRight();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//对二叉树中序线索化的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">threadedNodes</span><span class="hljs-params">(HeroNode node)</span>&#123;<br>        <span class="hljs-comment">//如果node等于null，无法线索化</span><br>        <span class="hljs-keyword">if</span>(node==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//中序线索化：（一）先线索化左子树</span><br>        threadedNodes(node.getLeft());<br>        <span class="hljs-comment">//（二）线索化当前节点</span><br>        <span class="hljs-comment">//先处理当前节点的前驱节点</span><br>        <span class="hljs-keyword">if</span>(node.getLeft()==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//让当前节点的左指针指向前驱节点</span><br>            node.setLeft(pre);<br>            node.setLeftType(<span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-comment">//处理后继节点</span><br>        <span class="hljs-keyword">if</span>(pre!=<span class="hljs-literal">null</span>&amp;&amp;pre.getRight()==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//让前驱节点的右指针指向当前节点</span><br>            pre.setRight(node);<br>            <span class="hljs-comment">//修改前驱节点的右指针类型</span><br>            pre.setRightType(<span class="hljs-number">1</span>);<br>        &#125;<br>        pre=node;<br>        <span class="hljs-comment">//（三）线索化右子树</span><br>        threadedNodes(node.getRight());<br>    &#125;<br>    <span class="hljs-comment">//重载中序线索化方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">threadedNodes</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>.threadedNodes(<span class="hljs-built_in">this</span>.root);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroNode</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> HeroNode left;<br>    <span class="hljs-keyword">private</span> HeroNode right;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> leftType;<span class="hljs-comment">//0:表示左子树  1：表示指向前驱节点</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rightType;<span class="hljs-comment">//0：表示右子树  1：表示后继节点</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLeftType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> leftType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeftType</span><span class="hljs-params">(<span class="hljs-type">int</span> leftType)</span> &#123;<br>        <span class="hljs-built_in">this</span>.leftType = leftType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getRightType</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> rightType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRightType</span><span class="hljs-params">(<span class="hljs-type">int</span> rightType)</span> &#123;<br>        <span class="hljs-built_in">this</span>.rightType = rightType;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">HeroNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.no=no;<br>        <span class="hljs-built_in">this</span>.name=name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br>        <span class="hljs-built_in">this</span>.no = no;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getLeft</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeft</span><span class="hljs-params">(HeroNode left)</span> &#123;<br>        <span class="hljs-built_in">this</span>.left = left;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getRight</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> right;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRight</span><span class="hljs-params">(HeroNode right)</span> &#123;<br>        <span class="hljs-built_in">this</span>.right = right;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;no=&quot;</span> + no +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>    <span class="hljs-comment">//前序遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.left.preOrder();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.right.preOrder();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//中序遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.left.infixOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.right.infixOrder();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//后续遍历</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrder</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.left.postOrder();<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">this</span>.right.postOrder();<br>        &#125;<br>        System.out.println(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <span class="hljs-comment">//前序遍历查找</span><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">preOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.no==no) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        HeroNode resNode=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>) resNode=<span class="hljs-built_in">this</span>.left.preOrderSearch(no);<br>        <span class="hljs-keyword">if</span>(resNode!=<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> resNode;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>) resNode=<span class="hljs-built_in">this</span>.right.preOrderSearch(no);<br>        <span class="hljs-keyword">return</span>  resNode;<br>    &#125;<br>    <span class="hljs-comment">//中序遍历查找</span><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">infixOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        HeroNode resNode=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>) resNode=<span class="hljs-built_in">this</span>.left.infixOrderSearch(no);<br>        <span class="hljs-keyword">if</span>(resNode!=<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> resNode;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.no==no) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>) resNode=<span class="hljs-built_in">this</span>.right.infixOrderSearch(no);<br>        <span class="hljs-keyword">return</span> resNode;<br>    &#125;<br>    <span class="hljs-comment">//后序遍历查找</span><br>    <span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">postOrderSearch</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        HeroNode resNode=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>) resNode=<span class="hljs-built_in">this</span>.left.postOrderSearch(no);<br>        <span class="hljs-keyword">if</span>(resNode!=<span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> resNode;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>) resNode=<span class="hljs-built_in">this</span>.right.postOrderSearch(no);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.no==no) <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>        <span class="hljs-keyword">return</span> resNode;<br>    &#125;<br>    <span class="hljs-comment">//递归删除节点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>&amp;&amp;<span class="hljs-built_in">this</span>.left.no==no)&#123;<br>            <span class="hljs-built_in">this</span>.left=<span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>&amp;&amp;<span class="hljs-built_in">this</span>.right.no==no)&#123;<br>            <span class="hljs-built_in">this</span>.right=<span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left!=<span class="hljs-literal">null</span>) <span class="hljs-built_in">this</span>.left.delNode(no);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right!=<span class="hljs-literal">null</span>) <span class="hljs-built_in">this</span>.right.delNode(no);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>队列</title>
    <link href="/2022/09/02/%E9%98%9F%E5%88%97/"/>
    <url>/2022/09/02/%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h1 id="传统数组队列"><a href="#传统数组队列" class="headerlink" title="传统数组队列"></a>传统数组队列</h1><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用数组模拟队列-编写一个ArrayQueue的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayQueue</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;<span class="hljs-comment">//表示数组的最大容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front;<span class="hljs-comment">//指向队列头</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear;<span class="hljs-comment">//指向队列的尾部</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> []arr;<span class="hljs-comment">//该数组用于存放数据,模拟队列</span><br><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> arrMaxSize)</span>&#123;<br>        maxSize=arrMaxSize;<br>        arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>        front=-<span class="hljs-number">1</span>;<span class="hljs-comment">//指向队列头部，分析出front是指向队列头的前一个位置</span><br>        rear=-<span class="hljs-number">1</span>;<span class="hljs-comment">//指向队列尾，指向队列尾的数据，即队列最后一个数据</span><br>    &#125;<br>    <span class="hljs-comment">//判断队列是否满</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> rear==maxSize-<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">//判断队列是否为空</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> rear==front;<br>    &#125;<br>    <span class="hljs-comment">//添加数据到队列</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br>        <span class="hljs-comment">//判断队列是否满</span><br>        <span class="hljs-keyword">if</span>(isFull()) &#123;<br>            System.out.println(<span class="hljs-string">&quot;队列满，不能加入数据&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            rear++;<span class="hljs-comment">//让rear后移</span><br>            arr[rear]=value;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//获取队列的数据(出队列)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列空，不能取数据&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            front++;<br>            <span class="hljs-keyword">return</span> arr[front];<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//显示队列的所有数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            System.out.println(<span class="hljs-string">&quot;队列空，无数据&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>                System.out.printf(<span class="hljs-string">&quot;arr[%d]=%d\n&quot;</span>,i,arr[i]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//显示头部数据，不取出</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">headQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列空，无数据&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> arr[front+<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>这样front之前的位置就被浪费了</p><h1 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h1><p>循环队列也是用数组模拟实现的，但是循环队列总有一位是空出来的</p><p>初始front和rear指向队列的第一个元素，此时front=rear，rear指向的是<strong>队列中最后一个元素的后一位</strong>，front指向的是<strong>队列中元素的第一个元素的位置</strong></p><p>队列空的条件：$rear==front$</p><p>队列满的条件:$(rear+1)\%maxSize==front$</p><p>队列中元素个数：$(rear+maxSize-front)\%maxSize$ </p><p>添加数据时，$rear=(rear+1)\%maxSize$</p><p>取出数据时，$front=(front+1)\%maxSize$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用数组模拟队列-编写一个CircleArray的类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CircleArray</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;<span class="hljs-comment">//表示数组的最大容量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> front;<span class="hljs-comment">//队列头:指向队列的第一个元素，arr[front]，初始值为0</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> rear;<span class="hljs-comment">//队列尾:指向队列最后一个元素的后一位,希望空出一个位置，初始值为0</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> []arr;<span class="hljs-comment">//该数据用于存放数据，模拟队列</span><br>    <span class="hljs-comment">//构造器</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CircleArray</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span>&#123;<br>        <span class="hljs-built_in">this</span>.maxSize=maxSize;<br>        arr=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>        front=rear=<span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">//判断队列是否满</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> (rear+<span class="hljs-number">1</span>)%maxSize==front;<br>    &#125;<br>    <span class="hljs-comment">//判断队列是否为空</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> rear==front;<br>    &#125;<br>    <span class="hljs-comment">//添加数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addQueue</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br>        <span class="hljs-keyword">if</span>(isFull())&#123;<br>            System.out.println(<span class="hljs-string">&quot;队列满，不能加数据&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        arr[rear]=value;<br>        <span class="hljs-comment">//将rear后移，这里必须考虑取模</span><br>        rear=(rear+<span class="hljs-number">1</span>)%maxSize;<br>    &#125;<br>    <span class="hljs-comment">//取数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列空，不能取数据&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> value=arr[front];<br>        <span class="hljs-comment">//后移时考虑取模</span><br>        front=(front+<span class="hljs-number">1</span>)%maxSize;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-comment">//显示队列数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            System.out.println(<span class="hljs-string">&quot;队列空，没有数据&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-comment">//从front开始遍历，遍历(rear+maxSize-front)%maxSize个值</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=front;i&lt;front+size();i++)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;arr[%d]:%d\n&quot;</span>,i%maxSize,arr[i]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//返回有效数据的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">size</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> (rear+maxSize-front)%maxSize;<br>    &#125;<br>    <span class="hljs-comment">//返回队列头元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">headQueue</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列为空&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> arr[front];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>栈</title>
    <link href="/2022/09/02/%E6%A0%88/"/>
    <url>/2022/09/02/%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<h1 id="栈的实现"><a href="#栈的实现" class="headerlink" title="栈的实现"></a>栈的实现</h1><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayStack</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> maxSize;<span class="hljs-comment">//栈的大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[]stack;<span class="hljs-comment">//数组模拟栈，数据就放在该数组中</span><br>    <span class="hljs-type">int</span> top=-<span class="hljs-number">1</span>;<span class="hljs-comment">//栈顶，没有数据初始化为-1</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ArrayStack</span><span class="hljs-params">(<span class="hljs-type">int</span> maxSize)</span>&#123;<br>        <span class="hljs-built_in">this</span>.maxSize=maxSize;<br>        stack=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[maxSize];<br>    &#125;<br><br>    <span class="hljs-comment">//判断栈是否满</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> top==maxSize-<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//判断栈是否空</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> top==-<span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//入栈</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span>&#123;<br>        <span class="hljs-keyword">if</span>(isFull())&#123;<br>            System.out.println(<span class="hljs-string">&quot;栈满，无法加数据&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        top++;<br>        stack[top]=value;<br>    &#125;<br>    <span class="hljs-comment">//出栈</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            <span class="hljs-keyword">throw</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;栈空，无法返回数据&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> value=stack[top];<br>        top--;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br>    <span class="hljs-comment">//遍历栈,遍历时需要从栈顶开始显示数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(isEmpty())&#123;<br>            System.out.println(<span class="hljs-string">&quot;栈空，无法遍历&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=top;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            System.out.printf(<span class="hljs-string">&quot;stack[%d]=%d\n&quot;</span>,i,stack[i]);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="栈实现一个计算器"><a href="#栈实现一个计算器" class="headerlink" title="栈实现一个计算器"></a>栈实现一个计算器</h1><p>处理以上基本的方法外，还需要在ArrayStack类里添加一些方法：</p><ul><li><p>返回当前栈顶，但是不出栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">peek</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> stack[top];<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>返回运算符的优先级，优先级由程序员决定，数字越高，优先级越大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">priority</span><span class="hljs-params">(<span class="hljs-type">int</span> oper)</span>&#123;<br>        <span class="hljs-keyword">if</span>(oper==<span class="hljs-string">&#x27;*&#x27;</span>||oper==<span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( oper==<span class="hljs-string">&#x27;+&#x27;</span>||oper==<span class="hljs-string">&#x27;-&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">//假定目前的表达式只有加减乘除</span><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>判断是不是一个运算符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isOper</span><span class="hljs-params">(<span class="hljs-type">char</span> val)</span>&#123;<br>        <span class="hljs-keyword">return</span> val==<span class="hljs-string">&#x27;+&#x27;</span>||val==<span class="hljs-string">&#x27;-&#x27;</span>||val==<span class="hljs-string">&#x27;*&#x27;</span>||val==<span class="hljs-string">&#x27;/&#x27;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>计算方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">cal</span><span class="hljs-params">(<span class="hljs-type">int</span> num1,<span class="hljs-type">int</span> num2,<span class="hljs-type">int</span> oper)</span>&#123;<br>        <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<span class="hljs-comment">//用于存放计算结果</span><br>        <span class="hljs-keyword">switch</span> (oper)&#123;<br>            <span class="hljs-keyword">case</span><span class="hljs-string">&#x27;+&#x27;</span>:<br>                res=num1+num2;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span><span class="hljs-string">&#x27;-&#x27;</span>:<br>                res=num2-num1;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                res=num1*num2;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>                res=num2/num1;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br></code></pre></td></tr></table></figure></li></ul><p>我们需要两个栈，一个是数栈，存放数字和计算结果，一个是符号栈，用来存放符号</p><p>输入一串字符串，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String expression=<span class="hljs-string">&quot;33+2*6-2&quot;</span><br></code></pre></td></tr></table></figure><p>扫描字符串，碰到数字就入数栈，碰到符号先判断栈是否为空。</p><p>如果是空栈就入栈；</p><p>如果不是空栈，判断该符号的优先级是否小于等于栈顶符号的优先级，如果大于，入栈；如果是，就将弹出符号栈栈顶的一个运算符和数栈的两个数字进行运算，将运算结果再入数栈</p><p>最后扫描完字符串以后，按顺序从数栈和符号栈中pop出相应的数和符号，并进行运算</p><p>步骤：</p><p>第一步：准备</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">ArrayStack numStack=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayStack2</span>(<span class="hljs-number">10</span>);<br>ArrayStack operStack=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayStack2</span>(<span class="hljs-number">10</span>);<br><span class="hljs-comment">//定义需要的相关变量</span><br><span class="hljs-type">int</span> index=<span class="hljs-number">0</span>;<span class="hljs-comment">//用于扫描</span><br><span class="hljs-type">int</span> num1=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> num2=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> oper=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>String keepNum=<span class="hljs-string">&quot;&quot;</span>;<span class="hljs-comment">//用于拼接多位数</span><br><span class="hljs-type">char</span> ch=<span class="hljs-string">&#x27; &#x27;</span>;<span class="hljs-comment">//将每次扫描得到的char保存到ch中</span><br></code></pre></td></tr></table></figure><p>第二步：扫描整个字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>    <span class="hljs-comment">//依次得到expression中的每一个字符</span><br>    ch=expression.substring(index,index+<span class="hljs-number">1</span>).charAt(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//判断ch是什么，然后做相应的处理</span><br>    <span class="hljs-keyword">if</span>(operStack.isOper(ch))&#123;<span class="hljs-comment">//如果是运算符</span><br>         <span class="hljs-comment">//判断当前的符号栈是否为空</span><br>         <span class="hljs-keyword">if</span>(!operStack.isEmpty())&#123;<br>           <span class="hljs-comment">/*处理:如果符号栈有操作符，就进行比较，如果当前的操作符的优先级小于或等于栈中的操作符，就 需要从</span><br><span class="hljs-comment">            数栈中pop出两个数，在符号栈中pop出一个符号，进行运算，将得到结果入数栈，然后将当前的操作符入符号栈</span><br><span class="hljs-comment">                   * */</span><br>                   <span class="hljs-keyword">if</span>(operStack.priority(ch)&lt;= operStack.priority(operStack.peek()))&#123;<br>                       num1=numStack.pop();<br>                       num2=numStack.pop();<br>                       oper=operStack.pop();<br>                       res=numStack.cal(num1,num2,oper);<br>                       <span class="hljs-comment">//把运算结果入数栈</span><br>                       numStack.push(res);<br>                       operStack.push(ch);<br>                   &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//如果当前符号的优先级大于栈中操作符的优先级</span><br>                       operStack.push(ch);<br>                   &#125;<br>               &#125;<span class="hljs-keyword">else</span>&#123;<br>                   <span class="hljs-comment">//如果为空，直接入符号栈</span><br>                   operStack.push(ch);<br>               &#125;<br>           &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//如果是数字</span><br>               <span class="hljs-comment">/*</span><br><span class="hljs-comment">               * 当发现是数字时，不能发现一个数就直接入数栈，它可能是多位数</span><br><span class="hljs-comment">               * 在处理数时，需要向expression表达式的后面index后再看一位</span><br><span class="hljs-comment">               * 如果是数字就继续扫描，如果是符号才入栈</span><br><span class="hljs-comment">               * 需要定义一个字符串变量，用于拼接</span><br><span class="hljs-comment">               * */</span><br><br>               <span class="hljs-comment">//处理多位数</span><br>               keepNum+=ch;<br>               <span class="hljs-keyword">if</span>(index==expression.length()-<span class="hljs-number">1</span>)&#123;<br>                   numStack.push(Integer.parseInt(keepNum));<br>               &#125;<span class="hljs-keyword">else</span> &#123;<br>                   <span class="hljs-comment">//判断下一位字符是不是数字,注意只是看一位，不是index++</span><br>                   <span class="hljs-keyword">if</span> (operStack.isOper(expression.substring(index + <span class="hljs-number">1</span>, index + <span class="hljs-number">2</span>).charAt(<span class="hljs-number">0</span>))) &#123;<span class="hljs-comment">//如果后一位是运算符</span><br>                       numStack.push(Integer.parseInt(keepNum));<br>                       <span class="hljs-comment">//清空keepNum</span><br>                       keepNum = <span class="hljs-string">&quot;&quot;</span>;<br>                   &#125;<br>               &#125;<br>           &#125;<br>           <span class="hljs-comment">//让index+1并判断是否扫描到expression的最后</span><br>           index++;<br>           <span class="hljs-keyword">if</span>(index&gt;=expression.length())&#123;<br>               <span class="hljs-keyword">break</span>;<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><p>第三步：当表达式扫描完毕以后，就顺序从数栈和符号栈中pop出相应的数和符号，并运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-comment">//如果符号栈为空，则计算到最后的结果，数栈中只有一个数字</span><br>            <span class="hljs-keyword">if</span>(operStack.isEmpty())&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                num1=numStack.pop();<br>                num2=numStack.pop();<br>                oper=operStack.pop();<br>                res=numStack.cal(num1,num2,oper);<br>                numStack.push(res);<br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>最后数栈的栈顶就是最后得到的结果</p><h1 id="逆波兰表达式"><a href="#逆波兰表达式" class="headerlink" title="逆波兰表达式"></a>逆波兰表达式</h1><p>逆波兰表达式为后缀表达式，这种表达式方便计算器求值</p><h3 id="将中缀表达式转后缀表达式"><a href="#将中缀表达式转后缀表达式" class="headerlink" title="将中缀表达式转后缀表达式"></a>将中缀表达式转后缀表达式</h3><p>中缀表达式为a+b<em>c+(d\</em>e+f)*g，转为后缀为: a b c <em> + d e </em> f + g * +</p><p>转换的过程需要栈，操作如下：</p><ol><li>如果遇到操作数，就将其输出</li><li>如果遇到操作符，将其放入栈中，如果遇到左括号也将其放入栈中</li><li>如果遇到一个右括号，则将栈元素弹出，将弹出的操作符输出知道遇到左括号为止。<strong>但是左括号只弹出不输出。</strong></li><li>如果遇到任何其他的操作符（”+“，”-“，”（ “）等，从栈中弹出元素直到遇到发现更低级的优先级的元素(或栈空)为止。谈完这些元素后，才将遇到的操作符压入栈中。但是，只有在遇到”）“的情况才会弹出”（“，其他情况不会弹出”（“。</li><li>如果读到了输入的末尾，则将栈中所有元素依次弹出</li></ol><p>主要的函数：将中缀表达式转化为后缀表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">parseSuffixExpressionList</span><span class="hljs-params">(List&lt;String&gt; ls)</span>&#123;<br>        Stack&lt;String&gt; s1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<span class="hljs-comment">//符号栈</span><br>        List&lt;String&gt; s2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-comment">//遍历ls</span><br>        <span class="hljs-keyword">for</span>(String item:ls)&#123;<br>            <span class="hljs-comment">//如果是一个数，加入s2</span><br>            <span class="hljs-keyword">if</span>(item.matches(<span class="hljs-string">&quot;\\d+&quot;</span>))&#123;<br>                s2.add(item);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item.equals(<span class="hljs-string">&quot;(&quot;</span>))&#123;<br>                s1.push(item);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item.equals(<span class="hljs-string">&quot;)&quot;</span>))&#123;<br>                <span class="hljs-comment">//如果是右括号，则依次弹出s1栈顶的运算符，并压入s2，直到遇到左括号为止，此时将这一对括号丢弃</span><br>                <span class="hljs-keyword">while</span>(!s1.peek().equals(<span class="hljs-string">&quot;(&quot;</span>))&#123;<br>                    s2.add(s1.pop());<br>                &#125;<br>                s1.pop();<span class="hljs-comment">//弹出对应的左括号</span><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//当item的优先级&lt;=栈顶运算符的优先级,将s1栈顶的运算符弹出并加入到s2中</span><br>                <span class="hljs-keyword">while</span>(s1.size()!=<span class="hljs-number">0</span>&amp;&amp;Operation.getValue(s1.peek())&gt;=Operation.getValue(item))&#123;<br>                    s2.add(s1.pop());<br>                &#125;<br>                <span class="hljs-comment">//还需要将item压入s1中</span><br>                s1.push(item);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//将s1中剩余的运算符依次加入到s2中</span><br>        <span class="hljs-keyword">while</span>(!s1.isEmpty())&#123;<br>            s2.add(s1.pop());<br>        &#125;<br>        <span class="hljs-comment">//按顺序输出就是后序表达式对应的list</span><br>        <span class="hljs-keyword">return</span> s2;<br>    &#125;<br></code></pre></td></tr></table></figure><p>将中缀表达式的元素保存到集合中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">toInfixExpression</span><span class="hljs-params">(String s)</span>&#123;<br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<span class="hljs-comment">//相当于一个指针，用于遍历s</span><br>        String str;<span class="hljs-comment">//用于多位数的拼接工作</span><br>        <span class="hljs-type">char</span> ch;<span class="hljs-comment">//每遍历到一个字符就放到ch中</span><br>       <span class="hljs-keyword">do</span>&#123;<br>           <span class="hljs-comment">//如果ch为非数字，需要加入到ls中</span><br>           <span class="hljs-keyword">if</span>((ch=s.charAt(i))&lt;<span class="hljs-number">48</span>||(ch=s.charAt(i))&gt;<span class="hljs-number">57</span>)&#123;<br>               list.add(<span class="hljs-string">&quot;&quot;</span>+ch);<br>               i++;<br>           &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//如果ch是数字，需要考虑多位数的问题</span><br>               str=<span class="hljs-string">&quot;&quot;</span>;<br>               <span class="hljs-keyword">while</span>(i&lt;s.length()&amp;&amp;(ch=s.charAt(i))&gt;=<span class="hljs-number">48</span>&amp;&amp;(ch=s.charAt(i))&lt;=<span class="hljs-number">57</span>)&#123;<br>                   str+=ch;<span class="hljs-comment">//拼接</span><br>                   i++;<br>               &#125;<br>               list.add(str);<br>           &#125;<br>       &#125;<span class="hljs-keyword">while</span>(i&lt;s.length());<br>       <span class="hljs-keyword">return</span> list;<br>    &#125;<br></code></pre></td></tr></table></figure><p>将后缀表达式放入集合中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">getListString</span><span class="hljs-params">(String suffixExpression)</span>&#123;<br>        <span class="hljs-comment">//将suffixExpression分割</span><br>        String []split=suffixExpression.split(<span class="hljs-string">&quot; &quot;</span>);<br>        List&lt;String&gt; list=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        <span class="hljs-keyword">for</span>(String ele:split)&#123;<br>            list.add(ele);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list;<br>    &#125;<br></code></pre></td></tr></table></figure><p>完成后缀表达式的计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculate</span><span class="hljs-params">(List&lt;String&gt; ls)</span>&#123;<br>        <span class="hljs-comment">//创建一个栈</span><br>        Stack&lt;String&gt; st=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();<br>        <span class="hljs-comment">//遍历list</span><br>        <span class="hljs-keyword">for</span>(String item:ls)&#123;<br>            <span class="hljs-comment">//使用正则表达式来取出数</span><br>            <span class="hljs-keyword">if</span>(item.matches(<span class="hljs-string">&quot;\\d+&quot;</span>))&#123;<span class="hljs-comment">//匹配的是多位数</span><br>                <span class="hljs-comment">//入栈</span><br>                st.push(item);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//pop出两个数并运算，再入栈</span><br>                <span class="hljs-type">int</span> num2=Integer.parseInt(st.pop());<br>                <span class="hljs-type">int</span> num1=Integer.parseInt(st.pop());<br>                <span class="hljs-type">int</span> res=<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">if</span>(item.equals(<span class="hljs-string">&quot;+&quot;</span>))&#123;<br>                    res=num1+num2;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item.equals(<span class="hljs-string">&quot;-&quot;</span>))&#123;<br>                    res=num1-num2;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item.equals(<span class="hljs-string">&quot;*&quot;</span>))&#123;<br>                    res=num1*num2;<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(item.equals(<span class="hljs-string">&quot;/&quot;</span>))&#123;<br>                    res=num1/num2;<br>                &#125;<span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;运算符有误&quot;</span>);<br>                &#125;<br>                st.push(<span class="hljs-string">&quot;&quot;</span>+res);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//最后留在stack中的数据为运算结果</span><br>        <span class="hljs-keyword">return</span> Integer.parseInt(st.pop());<br></code></pre></td></tr></table></figure><p>正则表达式”\\d+”匹配的是多位数</p>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo-Fluid主题使用数学公式</title>
    <link href="/2022/09/02/hexo-Fluid%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/"/>
    <url>/2022/09/02/hexo-Fluid%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>本人使用hexo+github搭建博客，使用<a href="https://fluid-dev.github.io/hexo-fluid-docs/guide">Fliud主题</a></p><p>另外在本页将常用的数学公式和数学符号记录下来</p><h1 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h1><ol><li><p>在fulid的配置文件/themes/fluid/_config.yml设置</p><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br> <span class="hljs-attr">math:</span><br>   <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>   <span class="hljs-attr">engine:</span> <span class="hljs-string">katex</span><br></code></pre></td></tr></table></figure><img src="/2022/09/02/hexo-Fluid%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/image-20220902140632787.png" class title="image-20220902140632787"></li><li><p>更换markdown渲染器</p><p>卸载原有的markdown渲染器：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm uninstall hexo-renderer-marked <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>然后根据上方配置的不同的<strong>engine</strong>，更换渲染器，这里选择katex:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-built_in">npm</span> install @upupming/hexo-renderer-markdown-<span class="hljs-literal">it</span>-plus --save<br></code></pre></td></tr></table></figure></li><li><p>安装完成后执行hexo clean</p></li></ol><h1 id="常用数学符号"><a href="#常用数学符号" class="headerlink" title="常用数学符号"></a>常用数学符号</h1><h4 id><a href="#" class="headerlink" title></a><img src="/2022/09/02/hexo-Fluid%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/2018041621294865.png" class width="2018041621294865"></h4><script type="math/tex; mode=display">\alpha</script><img src="/2022/09/02/hexo-Fluid%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/20180416213036844.png" class width="20180416213036844"><img src="/2022/09/02/hexo-Fluid%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/20180416213119987.png" class width="20180416213119987"><img src="/2022/09/02/hexo-Fluid%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/20180416213126857.png" class width="20180416213126857"><h1 id="行内数学公式"><a href="#行内数学公式" class="headerlink" title="行内数学公式"></a>行内数学公式</h1><ol><li><p>Typora左上角工具栏偏好设置</p><img src="/2022/09/02/hexo-Fluid%E4%B8%BB%E9%A2%98%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/image-20220902143619303.png" class title="image-20220902143619303"><p>设置完之后一定记得重启</p></li><li><p>输入的语法格式为：</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-symbol">$</span>\delta<span class="hljs-symbol">$</span><br></code></pre></td></tr></table></figure><p>写下一个$后按Esc会补上另一个，在两个  $ 之间写数学公式</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo搭建博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第二章-信息的表示和处理</title>
    <link href="/2022/09/02/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/"/>
    <url>/2022/09/02/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="信息存储"><a href="#信息存储" class="headerlink" title="信息存储"></a>信息存储</h1><p><strong>字节</strong>：8位的块，最小的可寻址的内存单位</p><p><strong>虚拟内存</strong>：机器级程序将内存视为一个非常大的字节数组，称为虚拟内存</p><p><strong>虚拟地址空间</strong>：所有可能地址的集合，这只是展现给机器级程序的概念性映像</p><h3 id="十六进制表示法"><a href="#十六进制表示法" class="headerlink" title="十六进制表示法"></a>十六进制表示法</h3><p>主要见数字逻辑中，二进制与十六进制互相转换的方法</p><h3 id="字数据大小"><a href="#字数据大小" class="headerlink" title="字数据大小"></a>字数据大小</h3><p>每台计算机都有一个字长，指明<em>指针数据的标称大小</em>，字长决定的最重要的系统参数就是<strong>虚拟地址空间的最大大小</strong></p><p>程序prog.c用如下伪指令编译后，可以在64位或32位机器上正确运行</p><p>64位机器的指针类型长度为8字节</p><figure class="highlight llvm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs llvm">linux&gt; gcc -m<span class="hljs-number">32</span> prog.<span class="hljs-keyword">c</span><br></code></pre></td></tr></table></figure><p>但是用如下只能在64位机器上正确运行</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">linux&gt; gcc -m<span class="hljs-number">64</span> prog.<span class="hljs-keyword">c</span><br></code></pre></td></tr></table></figure><p>“XX位程序”指的是该程序时如何编译的，而不是其运行的机器类型</p><h3 id="寻址和字节顺序"><a href="#寻址和字节顺序" class="headerlink" title="寻址和字节顺序"></a>寻址和字节顺序</h3><p>跨越多字节的程序对象，必须建立两个原则：</p><ul><li>这个对象的地址是什么</li><li>在内存中如何排列这些字节</li></ul><p>多字节的对象一般存储为连续的字节序列，对象的地址为使用字节中的最小的地址</p><p><strong>小端法</strong>：某些机器选择在内存中按照从最低有效字节到最高有效字节的顺序存储对象</p><p><strong>大端法</strong>：从最高有效字节到最低有效字节的顺序存储对象</p><p>大多数Intel都是小端法</p><h3 id="表示字符串"><a href="#表示字符串" class="headerlink" title="表示字符串"></a>表示字符串</h3><p>文本数据比二进制数据具有更强的平台独立性</p><h3 id="表示代码"><a href="#表示代码" class="headerlink" title="表示代码"></a>表示代码</h3><p>不同的机器类型使用不同的且不兼容的指令和编码方式。</p><p>二进制代码很少能在不同机器和操作系统组合之间移植</p><h3 id="布尔代数简介"><a href="#布尔代数简介" class="headerlink" title="布尔代数简介"></a>布尔代数简介</h3><p>与（ $\&amp;$ ）、或（|）、非（~）、异或（$\oplus$），见数字逻辑</p><p>位向量就是固定长度为$\omega$、由0和1组成的串。</p><p>位向量的运算可以定义成每个对应元素之间的运算。</p><p>设$a、b$分别为位向量$[a_{\omega-1},a_{\omega-2},···,a_0]$和$[b_{\omega-1},b_{\omega-2},···,b_0]$,可以将$a\&amp;b$定义成一个长度为$\omega$的位向量</p><p> 可以使用位向量$[a_{\omega-1},a_{\omega-2},···,a_0]$编码任何一个子集$A\subseteq \{0,1,···,\omega-1\}$  ,$a_(\omega-1)$放在左边，而$a_0$写在右边 ，而位向量$a=[01101001]$表示集合$A=\{0,3,5,6\}$，这种编码集合的方式，<strong>布尔运算$|$和$\&amp;$分别对应集合的并和交</strong>，而~对应集合的补</p><h3 id="C语言中的位级运算"><a href="#C语言中的位级运算" class="headerlink" title="C语言中的位级运算"></a>C语言中的位级运算</h3><p>确定一个位级表达式最好的方法，就是将十六进制的参数扩展成二进制表示并执行二进制运算，然后再转换回十六进制</p><p>位级运算的常见用法就是实现<strong>掩码计算</strong>，这里掩码是一个位模式，表示从一个字中选出的位的集合。如掩码0xFF（最低的8位为1）表示一个字的最低位字节，位级运算x$\&amp;$0xFF生成一个由x的最低有效字节组成的值，而其他字节被置为0</p><h3 id="C语言中的逻辑运算"><a href="#C语言中的逻辑运算" class="headerlink" title="C语言中的逻辑运算"></a>C语言中的逻辑运算</h3><p>||、&amp;&amp;、！不要混淆</p><h3 id="C语言中的移位运算"><a href="#C语言中的移位运算" class="headerlink" title="C语言中的移位运算"></a>C语言中的移位运算</h3><ul><li><p>左移：</p><script type="math/tex; mode=display">[x_{\omega-1},x_{\omega-2},···,x_0]左移k位变成[x_{\omega-k-1},x_{\omega-k-2},···,x_0,0,···,0]</script><p>x向左移动k位，丢弃最高的k位，并在右端补k个0</p></li><li><p>右移</p><ul><li><p>算术右移</p><p>在左端补k个最高有效位的值，如最高有效位为1，补1</p></li><li><p>逻辑右移</p><p>在左端补0</p></li></ul><p>java中定义x&gt;&gt;k会对x做算术单位，x&gt;&gt;&gt;k会对x做逻辑右移</p></li></ul><h1 id="整数表示"><a href="#整数表示" class="headerlink" title="整数表示"></a>整数表示</h1><img src="/2022/09/02/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20220902153208373.png" class title="image-20220902153208373"><h3 id="整型数据类型"><a href="#整型数据类型" class="headerlink" title="整型数据类型"></a>整型数据类型</h3><p>long唯一一个与机器相关的大小指示符</p><p>正数与负数不对称</p><h3 id="无符号编码"><a href="#无符号编码" class="headerlink" title="无符号编码"></a>无符号编码</h3><script type="math/tex; mode=display">B2U_\omega(\overrightarrow{x})\doteq\sum_{i=0}^{\omega-1}x_i2^i</script><p>函数$B2U_\omega$是一个双射，原理：无符号数编码的唯一性</p><h3 id="补码编码"><a href="#补码编码" class="headerlink" title="补码编码"></a>补码编码</h3><p>最高有效位$x_\omega-1$称为符号位，权重为$-2^{\omega-1}$</p><script type="math/tex; mode=display">B2T_\omega(\overrightarrow{x})\doteq-x_{\omega-1}2^{\omega-1}+\sum_{i=0}^{\omega-2}x_i2^i</script><p>函数$B2T_\omega$是一个双射，原理：补码编码的唯一性</p><p>补码范围是不对称的：$|TMin|=|TMax|+1$ ，$|TMin|$没有对应的正数</p><p>最大的无符号数值刚刚好比补码的最大值的两倍大一点$UMax_\omega=2TMax_\omega+1$ </p><h3 id="有符号数和无符号数之间的转换"><a href="#有符号数和无符号数之间的转换" class="headerlink" title="有符号数和无符号数之间的转换"></a>有符号数和无符号数之间的转换</h3><p>处理同样子长的有符号数和无符号数之间相互转换的一般表现：数值可能变，但是位模式不变</p><h4 id="补码转化位无符号数"><a href="#补码转化位无符号数" class="headerlink" title="补码转化位无符号数"></a>补码转化位无符号数</h4><p>对于满足$ TMin_\omega\leqslant x \leqslant TMax_\omega$ 的$x$ 有:</p><script type="math/tex; mode=display">T2U_\omega= \left\{\begin{aligned}x+2^\omega  {x < 0}\\x  \ \ \ {x\geqslant0}\end{aligned}\right.</script><p>推导：补码转化为无符号数</p><script type="math/tex; mode=display">B2U_\omega(\overrightarrow{x})-B2T(\overrightarrow{x})=x_{\omega-1}2^\omega</script><p>所以得到一个关系</p><script type="math/tex; mode=display">B2U_\omega(\overrightarrow{x})=x_{\omega-1}2^\omega+B2T_\omega(\overrightarrow{x})</script><p>因此</p><script type="math/tex; mode=display">B2U_\omega(T2B_\omega(x))=T2U_\omega(x)=x+x_{\omega-1}2^\omega</script><img src="/2022/09/02/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20220903220738262.png" class title="image-20220903220738262"><p>当一个有符号数映射为它相应的无符号数时，负数被转换成大的正数，而非负数会保持不变</p><h4 id="无符号数转化为补码"><a href="#无符号数转化为补码" class="headerlink" title="无符号数转化为补码"></a>无符号数转化为补码</h4><p>对满足$0\leqslant u \leqslant UMax_\omega$ 的$u$有：</p><script type="math/tex; mode=display">U2T_\omega(u)=\left\{\begin{aligned}u \ \ \ {u\leqslant TMax_\omega}\\u-2^\omega {u >TMax_\omega}\end{aligned}\right.</script><p>推导：无符号数转换为补码</p><p>根据两个编码公式可以推导得：</p><script type="math/tex; mode=display">U2T_\omega(u)=-u_{\omega-1}2^\omega+u</script><img src="/2022/09/02/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20220903222111889.png" class title="image-20220903222111889"><p>上图说明对于小的数（$\leqslant TMax_\omega$），从无符号到有符号的转换保留数字原值。对于大的数($&gt;TMax_\omega$)，数字将被转换为一个负数值</p><h3 id="C语言中的有符号数与无符号数"><a href="#C语言中的有符号数与无符号数" class="headerlink" title="C语言中的有符号数与无符号数"></a>C语言中的有符号数与无符号数</h3><p>当执行一个运算时，如果它的一个运算数是有符号的，但是另一个无符号，C语言会隐式地将有符号参数强制转换为无符号数，并且假设这两个数都是非负的，来执行这个运算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span> <span class="hljs-title function_">sun_elements</span><span class="hljs-params">(<span class="hljs-type">float</span> a[],<span class="hljs-type">unsigned</span> length)</span>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">float</span> result=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>,i&lt;=length<span class="hljs-number">-1</span>;i++)&#123;<br>result+=a[i];<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>上段代码unsigned类型的length-1，得到的结果为无符号的-1，对应$UMax$，会造成数组越界</p><h3 id="扩展一个数字的位表示"><a href="#扩展一个数字的位表示" class="headerlink" title="扩展一个数字的位表示"></a>扩展一个数字的位表示</h3><p><strong>零扩展</strong>：将一个无符号数转换为一个更大的数据类型，只要在开头添加0就行</p><p>宽度为$\omega$的位向量$\overrightarrow{u}=[u_{\omega-1},u_{\omega-2},···,u_0]$和宽度为$\omega’$的位向量$\overrightarrow{u’}=[0,··,0,u_{\omega-1},u_{\omega-2},···,u_0]$，其中$\omega’&gt;\omega$。则$B2U_\omega(\overrightarrow{u})=B2U_{\omega’}(\overrightarrow{u’})$</p><p>要将一个补码数字转换为一个更大的数据类型，可以执行<strong>符号扩展</strong>，在开头补符号位</p><p>宽度为$\omega$的位向量$\overrightarrow{x}=[x_{\omega-1},x_{\omega-2},···,x_0]$和宽度为$\omega’$的位向量$\overrightarrow{x’}=[x_{\omega’-1},··,0,x_{\omega-1},x_{\omega-2},···,x_0]$，其中$\omega’&gt;\omega$。则$B2U_\omega(\overrightarrow{x})=B2U_{\omega’}(\overrightarrow{x’})$</p><p>证明用数学归纳法</p><p>在C语言中，把short转化为unsigned时，要先改变大小再从有符号转化为无符号</p><h3 id="截断数字"><a href="#截断数字" class="headerlink" title="截断数字"></a>截断数字</h3><p><strong>截断</strong>：将一个$\omega$位的数$\overrightarrow{x}=[x_{\omega-1},x_{\omega-2},···,x_0]$截断为一个$k$位数字时，丢弃高$\omega-k$位，得到一个位向量$\overrightarrow{x’}=[x_{k-1},x_{x-2},···,x_0]$，截断数字很可能改变它的值</p><p><strong>截断无符号数</strong>：令$\overrightarrow{x}=[x_{\omega-1},x_{\omega-2},···,x_0]$，而$\overrightarrow{x’}$是将其截断$k$位的结果，$\overrightarrow{x’}=[x_{k-1},x_{x-2},···,x_0]$，令$x=B2U_\omega(\overrightarrow{x}),x’=B2U_k(\overrightarrow{x’}),则x’=x mod 2^k$</p><p>推导利用属性，对于任何的$i\geq k，2^i mod 2^k=0$</p><p><strong>补码截断</strong>：将最高位转换为符号位，令$\overrightarrow{x}=[x_{\omega-1},x_{\omega-2},···,x_0]$，而$\overrightarrow{x’}$是将其截断$k$位的结果，$\overrightarrow{x’}=[x_{k-1},x_{x-2},···,x_0]$，令$x=B2U_\omega(\overrightarrow{x}),x’=B2T_k(\overrightarrow{x’}),则x’=U2T_k(xmod2^k)$</p><p>推导利用函数$U2T_k$产生的效果是把最高有效位$x_{k-1}$的权重从$2^{k-1}$转变为$-2^{k-1}$</p><h1 id="整数运算"><a href="#整数运算" class="headerlink" title="整数运算"></a>整数运算</h1><h3 id="无符号数加法"><a href="#无符号数加法" class="headerlink" title="无符号数加法"></a>无符号数加法</h3><p>定义运算 $^{u}_{\omega}+$ 其中$0\leqslant x ,y\leqslant 2^\omega$  ，该操作是把整数和x+y截断为$\omega$位得到的结果</p><p><strong>$^{u}_{\omega}+$ 描述</strong>：</p><p>对满足$0\leqslant x ,y\leqslant 2^\omega$ 的$x$和$y$有：</p><script type="math/tex; mode=display">x+^{u}_{\omega}y =\left\{\begin{aligned}x+y, \ \ \ \ \ {x+y<2^\omega}\\x+y-2^\omega, \ \ \ \ \ \ {2^\omega\leqslant x+y<2^{\omega+1}}\end{aligned}\right.</script><p>推导：如果$x+y&lt;2^\omega$ ，和的$\omega+1$位表示中的最高位会等于0，因此不会改变这个数的值；而$2^\omega\leqslant x+y&lt;2^{\omega+1}$ ，和的$\omega+1$位表示中的最高位会减去1，丢弃$2^\omega$</p><p><strong>检测无符号数加法中的溢出</strong>：</p><p>在对范围$0\leqslant x,y \leqslant UMax_\omega$ 中的$x$和$y$，令$s=x+^{u}_{\omega}y$ ，则对计算s，当且仅当$s&lt;x$时，发生了溢出</p><p><strong>无符号数求反</strong>：</p><p>对满足$0\leqslant x&lt;2^\omega$ 的任意$x$，其$\omega$位的无符号逆元$-^{u}_{\omega}x$由下式给出：</p><script type="math/tex; mode=display">-^{u}_{\omega}x=\left\{\begin{aligned}x,{x=0}\\2^{\omega}-x,{x>0}\end{aligned}\right.</script><h3 id="补码加法"><a href="#补码加法" class="headerlink" title="补码加法"></a>补码加法</h3><p><strong>补码加法</strong>：</p><p>对满足$-2^{\omega-1}\leqslant x,y\leqslant 2^{\omega-1}-1$的整数$x,y$，有：</p><script type="math/tex; mode=display">x+^{t}_{\omega}y=\left\{\begin{aligned}x+y-2^\omega ,{2^{\omega-1}\leqslant x+y} \  {负溢出}\\x+y,{-2^{\omega-1}\leqslant x+y<2^{\omega-1}} {正常}\\x+y+2^\omega,{x+y<-2^{\omega-1}} {负溢出}\end{aligned}\right.</script><p><strong>检测补码加法中的溢出</strong>：</p><p>对满足$TMin_\omega \leqslant x,y \leqslant TMax_\omega$的$x$和$y$，令$s\doteq x+^{t}_{\omega}y$，当且仅当$x&gt;0,y&gt;0$，但$s\leqslant 0$时，计算$s$发生了正溢出。当且仅当$x&lt;0,y&lt;0$，但$s\geqslant 0$时，计算$s$发生了负溢出</p><h3 id="补码的非"><a href="#补码的非" class="headerlink" title="补码的非"></a>补码的非</h3><p><strong>补码的非</strong>：</p><p>对满足$TMin_\omega \leqslant x\leqslant TMax_\omega$ 的$x$ ，其补码的非$-^{t}_{\omega}x$由下式给出:</p><script type="math/tex; mode=display">-^{t}_{\omega}x=\left\{\begin{aligned}TMin_\omega,{x=TMin_\omega}\\-x,{x>TMin_\omega}\end{aligned}\right.</script><h3 id="无符号乘法"><a href="#无符号乘法" class="headerlink" title="无符号乘法"></a>无符号乘法</h3><p>范围在$0 \leqslant x,y\leqslant 2^\omega-1$内的整数$x$和$y$，它们的乘法取值范围$0$到$(2^\omega-1)^2=2^{2\omega}-2^{\omega+1}+1$之间，这可能需要$2\omega$位来表示</p><p>但是C语言无符号乘法定义为产生$\omega$位的值，所以$2\omega$位到$\omega$位的值将被截断</p><p><strong>无符号乘法</strong>:</p><p>对满足的$0 \leqslant x,y \leqslant UMax_\omega$的$x$和$y$有：</p><script type="math/tex; mode=display">x*^{u}_{\omega}y=(x·y)mod 2^\omega</script><h3 id="补码乘法"><a href="#补码乘法" class="headerlink" title="补码乘法"></a>补码乘法</h3><p>将一个补码数截断位$\omega$位相当于先计算该值模$2\omega$，再把无符号数转换为补码</p><p><strong>补码乘法</strong>：</p><p>对满足$TMin_\omega\leqslant x,y \leqslant TMax_\omega$的$x$和$y$有：</p><script type="math/tex; mode=display">x*^{t}_{\omega}y=U2T_\omega((x*y)\ mod\ 2^\omega)</script><p><strong>无符号和补码乘法的位级等价性</strong>：</p><p>给定长度位$\omega$的位向量$\overrightarrow{x}$和$\overrightarrow{y}$，用补码的形式的位向量表示来定义整数$x$和$y$：$x=B2T_\omega(\overrightarrow{x}),y=B2T_\omega(\overrightarrow{y})$ 。用无符号形式的位向量来定义非负整数$x’$和$y’$：$x’=B2U_\omega(\overrightarrow{x}),y’=B2U_\omega(\overrightarrow{y})$，则：</p><script type="math/tex; mode=display">T2B_\omega(x*^{t}_{\omega}y)=U2B_\omega(x'*^{u}_{\omega}y')</script><h3 id="乘以常数"><a href="#乘以常数" class="headerlink" title="乘以常数"></a>乘以常数</h3><h4 id="乘以2的幂"><a href="#乘以2的幂" class="headerlink" title="乘以2的幂"></a>乘以2的幂</h4><p>以$x$为位模式$[x_{\omega-1},x_{\omega-2},···,x_0]$表示的无符号整数，对于任何的$k\geqslant0$ 都认为$[x_{\omega-1},x_{\omega-2},···,x_0,0,···,0]$给出了$x2^\omega$的$\omega+k$位的无符号表示，这里右边加了$k$个0</p><p>左移一个数值等价于执行一个与2的幂相乘的无符号乘法</p><h4 id="与2的幂相乘的无符号乘法"><a href="#与2的幂相乘的无符号乘法" class="headerlink" title="与2的幂相乘的无符号乘法"></a>与2的幂相乘的无符号乘法</h4><p>C变量$x$和$k$有无符号数值$x$和$k$，且$0\leqslant k &lt;\omega$，则C表达式$x&lt;&lt;k$产生数值$x*^{u}_{\omega}2^k$ </p><h4 id="与2的幂相乘的补码乘法"><a href="#与2的幂相乘的补码乘法" class="headerlink" title="与2的幂相乘的补码乘法"></a>与2的幂相乘的补码乘法</h4><p>C变量$x$和$k$有补码值$x$和无符号数值$k$，且$0\leqslant k &lt;\omega$，则C表达式$x&lt;&lt;k$产生数值$x*^{t}_{\omega}2^k$ </p><p>注意都可能导致溢出，C编译器试图以移位、加法、减法来分解乘法，因为乘法代价更大</p><h3 id="除以2的幂"><a href="#除以2的幂" class="headerlink" title="除以2的幂"></a>除以2的幂</h3><p>使用右移，无符号和补码数分别使用逻辑移位和算术移位</p><h4 id="除以2的幂的无符号除法"><a href="#除以2的幂的无符号除法" class="headerlink" title="除以2的幂的无符号除法"></a>除以2的幂的无符号除法</h4><p>C变量$x$和$k$有无符号数值$x$和$k$，且$0\leqslant k &lt;\omega$，则C表达式$x&gt;&gt;k$产生数值$[x/ 2^k]$ </p><h4 id="除以2的幂的补码除法，向下取舍"><a href="#除以2的幂的补码除法，向下取舍" class="headerlink" title="除以2的幂的补码除法，向下取舍"></a>除以2的幂的补码除法，向下取舍</h4><p>C变量$x$和$k$有补码值$x$和无符号数值$k$，且$0\leqslant k &lt;\omega$，当执行算术移位时，C表达式产生数值$[x/2^k]$</p><h4 id="除以2的幂的补码除法，向上舍入"><a href="#除以2的幂的补码除法，向上舍入" class="headerlink" title="除以2的幂的补码除法，向上舍入"></a>除以2的幂的补码除法，向上舍入</h4><p>C变量$x$和$k$有补码值$x$和无符号数值$k$，且$0\leqslant k &lt;\omega$，当执行算术移位时，C表达式$(x+(1&lt;<k)-1)>&gt;k$产生数值$[x/2^k]$</k)-1)></p><h1 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h1><h3 id="IEEE浮点表示"><a href="#IEEE浮点表示" class="headerlink" title="IEEE浮点表示"></a>IEEE浮点表示</h3><p>IEEE浮点标准用$V=(-1)^s <em> M</em>2^E$的形式表示浮点数</p><ul><li>符号：$s$决定是负数($s=1$)还是正数($s=0$)，而对于数值0的符号位解释作为特殊情况处理</li><li>尾数 M是一个二进制小数，范围位$1 $~$2-\varepsilon $ ,或者是$0$~$1-\varepsilon$ </li><li>阶码 E的作用是对浮点数加权，这个权重是2的E次幂</li></ul><img src="/2022/09/02/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20220904145425862.png" class title="image-20220904145425862"><img src="/2022/09/02/%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E4%BF%A1%E6%81%AF%E7%9A%84%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%A4%84%E7%90%86/image-20220904145501200.png" class title="image-20220904145501200">]]></content>
    
    
    <categories>
      
      <category>CSAPP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决：hexo+github本地和线上图片不显示的问题</title>
    <link href="/2022/09/01/%E8%A7%A3%E5%86%B3%EF%BC%9Ahexo-github%E6%9C%AC%E5%9C%B0%E5%92%8C%E7%BA%BF%E4%B8%8A%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2022/09/01/%E8%A7%A3%E5%86%B3%EF%BC%9Ahexo-github%E6%9C%AC%E5%9C%B0%E5%92%8C%E7%BA%BF%E4%B8%8A%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>hexo+github搭建博客之后，使用markdown语法发布的图片无法正常显示，这是因为hexo和markdown图片插入语法不同导致的，</p><p>hexo语法为：</p><figure class="highlight django"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name">asset_img</span> 图片名称 %&#125;</span><br></code></pre></td></tr></table></figure><p>markdown语法为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">!<span class="hljs-selector-attr">[图片名称]</span>(图片位置)<br></code></pre></td></tr></table></figure><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><ol><li><p>在Typora的偏好设置中设置<img src="/2022/09/01/%E8%A7%A3%E5%86%B3%EF%BC%9Ahexo-github%E6%9C%AC%E5%9C%B0%E5%92%8C%E7%BA%BF%E4%B8%8A%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/image-20220901224329268.png" class title="image-20220901224329268"></p><p>表示引用图片会从当前目录下寻找同名文件夹下的图片</p></li><li><p>在blog根目录下，修改_config.yml中的post_asset_folder，false修改为true，这样修改后就会每次使用指令</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">hexo <span class="hljs-keyword">new</span> <span class="hljs-string">&quot;文章标题&quot;</span><br></code></pre></td></tr></table></figure><p>时，都会在文章文件同级目录创建一个与文章名称同名的文件夹，在此存放文章的图片</p></li><li><p>安装插件hexo-asset-img：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">npm install hexo-asset-<span class="hljs-selector-tag">img</span> <span class="hljs-attr">--save</span><br>hexo clean<br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure><p>这样就可以了</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>hexo搭建博客</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第一章-计算机系统漫游</title>
    <link href="/2022/09/01/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/"/>
    <url>/2022/09/01/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="信息就是-位-上下文"><a href="#信息就是-位-上下文" class="headerlink" title="信息就是 位+上下文"></a>信息就是 位+上下文</h1><p>每条C语言程序都必须被其他程序转化为一系列的<em>低级机器语言</em>，然后这些指令按照一种称为<strong>可执行目标程序</strong>的格式打包，并以二进制磁盘文件的形式存放起来，目标程序也称为<strong>可执行目标文件</strong></p><p><em>hello.c</em>转化为可执行文件分为四个阶段：</p><ol><li><strong>预处理</strong>：<em>预处理器</em> 根据预编译头（如<em>#include&lt;stdio.h</em>&gt;），然后读取系统头文件的内容，并将其直接插入到程序文本中，得到.i后缀的文件</li><li><strong>编译阶段</strong>：<em>编译器</em> 将.i后缀的文件编译为.s为后缀的文本文件，包含一个汇编语言程序</li><li><strong>汇编阶段</strong>：<em>汇编器</em> 将.s后缀的文件翻译成机器语言指令，把这些指令打包成一种叫做<strong>可重定位目标程序</strong>的格式，并将结果保存在.o为后缀的二进制文件中</li><li><strong>链接阶段</strong>：C语言库函数存在于一个.o为后缀的单独的预编译好的文件中，<em>链接器</em> 负责合并该文件与总的文件中。最终得到<strong>可执行文件</strong>，可以被加载到内存中，由系统执行</li></ol><h1 id="系统的硬件组成"><a href="#系统的硬件组成" class="headerlink" title="系统的硬件组成"></a>系统的硬件组成</h1><ul><li><h3 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h3><p>贯穿于整个系统的一组电子管道，它负责携带信息字节并负责在各个部件间传递。<strong>总线被设计成传送定长的字节块</strong>，称为字，字的大小在明确定义的上下文中说明</p></li><li><h3 id="I-O设备"><a href="#I-O设备" class="headerlink" title="I/O设备"></a>I/O设备</h3><p>系统与外部世界的联系通道，每一个I/O设备通过一个控制器或适配器与I/O总线相连。</p><p>控制器与适配器的区别是它们的封装方式</p></li><li><h3 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h3><p>临时存储设备，在处理器执行程序时，用来存放程序和程序处理的数据。</p><p>从物理上来说，是由一组<strong><em>动态随机存取存储区（DRAM）</em></strong>芯片组成的。</p><p>从逻辑上来说，存储器是一个线性的字节数组，每个字节都有唯一的地址</p></li><li><h3 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h3><p><em>中央处理单元（CPU）</em> ，简称处理器，是解释、执行存储在主存中的指令的引擎。</p><p>处理器的核心是一个大小为一个字的存储设备（或寄存器），称为<em>程序计数器（PC）</em></p><p>PC在任何时刻都会指向主存中某条机器语言指令</p><p>处理器是由<strong>指令集架构</strong>决定的模型决定的。处理器从程序计数器指向的内存处读取指令，解释指令中的位，执行该指令的简单操作，然后更新PC，使其指向下一条指令</p></li></ul><p>上述操作围绕<strong>主存</strong>、<strong>寄存器文件</strong>和<strong>算术/逻辑单元（ALU）</strong>进行。</p><p>寄存器文件是一个小的存储设备，由一些单个字长的寄存器组成，每个寄存器都有唯一的名字。</p><p>ALU计算新的数据和地址值。</p><p>CPU在指令的要求下可能执行的操作：</p><ul><li><strong>加载</strong>：从主存复制一个字节或者一个字到寄存器，以覆盖寄存器原来的内容</li><li><strong>存储</strong>：从寄存器复制一个字节或者一个字到主存中的某个位置，以覆盖这个位置上原来的内容</li><li><strong>操作</strong>：两个寄存器的内容复制到ALU，ALU对这两个字做算术运算，并将结果存放到寄存器中，以覆盖该寄存器中的原来的内容</li><li><strong>跳转</strong>：从指令本身中抽取一个字，并将这个字复制PC中，以覆盖PC中原来的值</li></ul><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>程序的机器指令最初是存放到磁盘上的，当程序加载时，它们被复制到主存中；</p><p>当处理器运行程序时，指令又从主存复制到处理器；</p><p>数据串开始时在磁盘上，然后被复制到主存中，最后从主存复制到显示设备。</p><p>以上复制就是开销，减缓程序真正的工作。</p><p>根据机械原理，较大的存储设备要比较小的存储设备运行的慢，而快速设备的造价远高于同类的低俗设备。类似，一个典型的寄存器文件只存储几百字节的信息，而主存里可存放几亿字节的信息。而处理器从寄存器文件中读取数据比从主存中读取几乎要快100倍。</p><p>针对处理器与主存之间的差异，采用<strong>高速缓存存储器</strong>，简称cache或高速缓存。</p><p>L1高速缓存位于处理器芯片上，容量可达数万字节，访问速度几乎和访问寄存器文件一样快。</p><p>L2高速缓存通过一条特殊的总线连接到处理器，容量位数十万到数百万字节，比L1访问时间长5倍。</p><p>L1和L2高速缓存是用一种<strong>静态随机访问存储器（SRAM）</strong>的硬件技术实现的</p><h3 id="存储设备形成层次结构"><a href="#存储设备形成层次结构" class="headerlink" title="存储设备形成层次结构"></a>存储设备形成层次结构</h3><img src="/2022/09/01/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/image-20220901203132507.png" class title="image-20220901203132507"><p>存储器层次就够的主要思想是上一层的存储器作为低一层存储器的高速缓存。</p><h1 id="操作系统管理硬件"><a href="#操作系统管理硬件" class="headerlink" title="操作系统管理硬件"></a>操作系统管理硬件</h1><p>操作系统的两个基本功能：</p><ul><li><p>防止硬件被失控的应用程序滥用；</p></li><li><p>向应用程序提供简单一致的机制来控制复杂而又通常大不相同的低级硬件设备</p></li></ul><p>操作系统通过几个基本的抽象的概念：</p><ul><li><strong>文件</strong>：对I/O设备的抽象表示</li><li><strong>虚拟内存</strong>：对主存和磁盘I/O设备的抽象表示</li><li><strong>进程</strong>：对处理器、主存、I/O设备的抽象表示、</li></ul><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>进程是操作系统对一个正在运行的程序的一种抽象。</p><p>一个系统可以运行多个进程，每个进程并发运行，每个进程的指令都是交替进行的</p><p>大多数系统，需要运行的进程数大于可以多于运行它们的CPU个数</p><p><strong>上下文切换</strong>：操作系统实现交错执行的机制，一个CPU可以看上去并发执行多个进程。即保存当前进程的上下文、恢复新进程的上下文，然后将控制权传递给新进程</p><p><strong>上下文</strong>：操作系统保持跟踪进程运行的所有状态信息（包括PC和寄存器文件的当前值），这种状态为上下文</p><p>在任何时候，单处理器系统都只能执行一个进程的代码</p><p><strong>内核</strong>：操作系统代码常驻主存的部分，从一个进程到另一个内核的转换是由它完成的。</p><p>当应用程序需要操作系统的某些操作时，内核就执行一条特殊的<em>系统调用</em> 指令，将控制权传递给内核，然后执行被请求的操作并返回应用程序。</p><p>内核不是一个独立的进程，是系统管理全部进程所用代码和数据结构的集合</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>一个进程由多个线程组成，每个线程都运行在进程的上下文中，并共享同样的代码和全局数据</p><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>是抽象概念，它为每个进程提供了一种假象，即每个进程都在独占地使用主存。</p><p>每个进程看到的内存是一致的，称为<em>虚拟地址空间</em></p><p>linux进程的虚拟地址空间：地址从下往上增大<img src="/2022/09/01/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/image-20220901212311906.png" class title="image-20220901212311906"></p><p>内核虚拟内存不允许应用程序读写这个区域的内容或直接调用内核代码定义的函数</p><p>虚拟内存运作的基本思想是把一个进程虚拟内存的内容存储在磁盘上，然后用主存作为磁盘的高速缓存</p><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>文件就是字节序列。</p><p>系统中所有输入输出都是通过使用一小组的称为Unix I/O的系统调用函数读写文件来实现的</p><h1 id="系统之间利用网络通信"><a href="#系统之间利用网络通信" class="headerlink" title="系统之间利用网络通信"></a>系统之间利用网络通信</h1><p>见计算机网络</p><h1 id="Amdahl定律"><a href="#Amdahl定律" class="headerlink" title="Amdahl定律"></a>Amdahl定律</h1><p>主要思想：当我们对系统的某一部分加速时，其对系统整体性能的影响取决于该部分的重要性和加速程度</p><img src="/2022/09/01/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/image-20220901213856413.png" class title="image-20220901213856413"><img src="/2022/09/01/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/image-20220901213914144.png" class title="image-20220901213914144"><h1 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h1><p>并发：通用的概念，一个同时具有多个活动的系统</p><p>并行：用并发来使一个系统运行得更快</p><h3 id="线程级并发"><a href="#线程级并发" class="headerlink" title="线程级并发"></a>线程级并发</h3><ul><li><p><strong>多核处理器</strong>：将多个CPU集成到一个集成电路芯片上</p><img src="/2022/09/01/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/image-20220901215311312.png" class title="image-20220901215311312"></li><li><p><strong>超线程</strong>：一项允许一个CPU执行多个控制流的技术。</p><p>设计CPU某些硬件有多个备份如程序计数器和寄存器文件。超线程的处理器可以在单个周期的基础上决定要执行哪一个线程</p><p>可以在两方面提高系统性能：</p><ul><li>减少了在执行多个任务时模拟并发的需要</li><li>使应用程序运行的更快</li></ul></li></ul><h3 id="指令级并行"><a href="#指令级并行" class="headerlink" title="指令级并行"></a>指令级并行</h3><p>现代处理器可以同时执行多条指令的属性为指令级并行</p><h3 id="单指令、多数据并行"><a href="#单指令、多数据并行" class="headerlink" title="单指令、多数据并行"></a>单指令、多数据并行</h3><p>现代处理器拥有特殊的硬件，允许一条指令产生多个可以并行执行的操作，这种方式为单指令、多数据</p><h1 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h1><img src="/2022/09/01/%E7%AC%AC%E4%B8%80%E7%AB%A0-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F%E6%BC%AB%E6%B8%B8/image-20220901221222775.png" class title="image-20220901221222775">]]></content>
    
    
    <categories>
      
      <category>CSAPP</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>lab0</title>
    <link href="/2022/06/27/lab0/"/>
    <url>/2022/06/27/lab0/</url>
    
    <content type="html"><![CDATA[<p>#</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
      <category>CS144</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>cs144实验环境准备</title>
    <link href="/2022/06/07/cs144%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/"/>
    <url>/2022/06/07/cs144%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<h1 id="设置虚拟机"><a href="#设置虚拟机" class="headerlink" title="设置虚拟机"></a>设置虚拟机</h1><h2 id="下载工作"><a href="#下载工作" class="headerlink" title="下载工作"></a>下载工作</h2><p><a href="https://stanford.edu/class/cs144/vm_howto/">地址</a><br>1、下载VirtualBox，本人用windows环境，就下载windows版本的<br>2、下载VM映像，下载后是这样：<br><img src="/2022/06/07/cs144%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/VM.png" class></p><h2 id="设置VM镜像"><a href="#设置VM镜像" class="headerlink" title="设置VM镜像"></a>设置VM镜像</h2><p>打开VirtualBox，配置好虚拟机，按照官方文档描述配置即可</p><h2 id="连接虚拟机"><a href="#连接虚拟机" class="headerlink" title="连接虚拟机"></a>连接虚拟机</h2><figure class="highlight css"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs css">ssh -<span class="hljs-selector-tag">p</span> <span class="hljs-number">2222</span> cs144<span class="hljs-keyword">@localhost</span> <br></code></pre></td></tr></table></figure><p>这句是在cmd窗口打的，不是在虚拟机，效果如下：<br><img src="/2022/06/07/cs144%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/TCP.png" class></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
      <category>CS144</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>网络层</title>
    <link href="/2022/06/05/%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <url>/2022/06/05/%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="数据平面-每台路由器的功能"><a href="#数据平面-每台路由器的功能" class="headerlink" title="数据平面(每台路由器的功能)"></a>数据平面(每台路由器的功能)</h1><p>数据平面功能决定到达路由器输入链路之一的数据报如何转发到该路由器的输出链路之一</p><p><strong>转发</strong> 是指将分组从一个输入链路接口转移到适当的输出链路接口的路由器本地动作<br><strong>路由选择</strong> 是指确定分组从源到目的地所采取的端到端路径的网络范围处理过程 </p><h1 id="控制平面-网络范围的逻辑"><a href="#控制平面-网络范围的逻辑" class="headerlink" title="控制平面(网络范围的逻辑)"></a>控制平面(网络范围的逻辑)</h1><p>控制平面功能控制数据报沿着从源主机到目的主机的端到端路径中路由器之间的路由方式</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/2022/05/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2022/05/27/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h2 id="动态规划五部曲"><a href="#动态规划五部曲" class="headerlink" title="动态规划五部曲"></a>动态规划五部曲</h2><ol><li>确定dp数组以及下标的含义</li><li>确定递推公式</li><li>dp数组如何初始化</li><li>确定遍历顺序</li><li>举例推导dp数组</li></ol><h2 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h2><h4 id="二维数组："><a href="#二维数组：" class="headerlink" title="二维数组："></a>二维数组：</h4><ol><li>dp[i][j]的含义：从下标为[0~i]的物品里任意取，放进容量为j的背包，价值总和最大是多少</li><li>递推公式：</li></ol><ul><li>不放物品i：由dp[i - 1][j]推出，即背包容量为j，里面不放物品i的最大价值，此时dp[i][j]就是dp[i - 1][j]。(其实就是当物品i的重量大于背包j的重量时，物品i无法放进背包中，所以被背包内的价值依然和前面相同。)</li><li>放物品i：由dp[i - 1][j - weight[i]]推出，dp[i - 1][j - weight[i]] 为背包容量为j - weight[i]的时候不放物品i的最大价值，那么dp[i - 1][j - weight[i]] + value[i] （物品i的价值），就是背包放物品i得到的最大价值 <figure class="highlight inform7"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs inform7">dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span>=max(dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>,dp<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-weight<span class="hljs-comment">[i]</span>]</span>+value<span class="hljs-comment">[i]</span>)<br></code></pre></td></tr></table></figure></li></ul><ol><li>初始化：<br>j&gt;=weight[0]，dp[0][j]应该为value[0]<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs abnf">for (int j <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-comment">; j &lt; weight[0]; j++) &#123;  </span><br>     dp[<span class="hljs-number">0</span>][j] <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br> &#125;<br> // 正序遍历<br> for (int j <span class="hljs-operator">=</span> weight[<span class="hljs-number">0</span>]<span class="hljs-comment">; j &lt;= bagweight; j++) &#123;</span><br>     dp[<span class="hljs-number">0</span>][j] <span class="hljs-operator">=</span> value[<span class="hljs-number">0</span>]<span class="hljs-comment">;</span><br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>遍历顺序：<br><strong>背包从小到大</strong><br><strong>先遍历物品，然后遍历背包重量</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs inform7"><br>// weight数组的大小 就是物品个数<br>for(int i = 1; i &lt; weight.size(); i++) &#123; // 遍历物品<br>for(int j = 0; j &lt;= bagweight; j++) &#123; // 遍历背包容量<br>    if (j &lt; weight<span class="hljs-comment">[i]</span>) dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = dp<span class="hljs-comment">[i - 1]</span><span class="hljs-comment">[j]</span>; <br>    else dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = max(dp<span class="hljs-comment">[i - 1]</span><span class="hljs-comment">[j]</span>, dp<span class="hljs-comment">[i - 1]</span><span class="hljs-comment">[j - weight<span class="hljs-comment">[i]</span>]</span> + value<span class="hljs-comment">[i]</span>);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>先遍历背包，再遍历物品</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs inform7">    // weight数组的大小 就是物品个数<br>    for(int j = 0; j &lt;= bagweight; j++) &#123; // 遍历背包容量<br>    for(int i = 1; i &lt; weight.size(); i++) &#123; // 遍历物品<br>        if (j &lt; weight<span class="hljs-comment">[i]</span>) dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = dp<span class="hljs-comment">[i - 1]</span><span class="hljs-comment">[j]</span>;<br>        else dp<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = max(dp<span class="hljs-comment">[i - 1]</span><span class="hljs-comment">[j]</span>, dp<span class="hljs-comment">[i - 1]</span><span class="hljs-comment">[j - weight<span class="hljs-comment">[i]</span>]</span> + value<span class="hljs-comment">[i]</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>举例</li></ol><h4 id="一维数组-滚动数组"><a href="#一维数组-滚动数组" class="headerlink" title="一维数组(滚动数组)"></a>一维数组(滚动数组)</h4><ol><li>dp[j]的含义：容量为j的背包，所背的物品价值可以最大为dp[j]</li><li>递推公式 <figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">dp<span class="hljs-comment">[j]</span>=max(dp<span class="hljs-comment">[j]</span>,dp<span class="hljs-comment">[j-weight<span class="hljs-comment">[i]</span>]</span>+value<span class="hljs-comment">[i]</span>);<br></code></pre></td></tr></table></figure></li><li>初始化<br> 全初始化成0</li><li>遍历顺序<br><strong>背包从大到小</strong>，目的是为了保证物品i只被放入一次<br>并且<strong>只能物品嵌套背包容量</strong><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">for(int i = <span class="hljs-number">0</span><span class="hljs-comment">; i &lt; weight.size(); i++) &#123; // 遍历物品</span><br>     for(int <span class="hljs-keyword">j </span>= <span class="hljs-keyword">bagWeight; </span><span class="hljs-keyword">j </span>&gt;= weight[i]<span class="hljs-comment">; j--) &#123; // 遍历背包容量</span><br>         dp[<span class="hljs-keyword">j] </span>= max(dp[<span class="hljs-keyword">j], </span>dp[<span class="hljs-keyword">j </span>- weight[i]] + value[i]);<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure></li><li>举例</li></ol><h4 id="力扣34-整数拆分"><a href="#力扣34-整数拆分" class="headerlink" title="力扣34.整数拆分"></a><a href="https://leetcode.cn/problems/integer-break/">力扣34</a>.整数拆分</h4><ol><li>dp[i]的含义：i数字可以拆分的整数的最大的乘积</li><li>递推公式：先将i拆分成i-j和j，其中j从1到i-1；然后再将i-j再拆分，得最大乘积，即dp[i-j]；综上，取<strong>j*(i-j)</strong>和<strong>dp[i-j]*j</strong>的最大值。另外再和<strong>dp[i]</strong>比大小，取上述三者最大值<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dp<span class="hljs-selector-attr">[i]</span>=<span class="hljs-built_in">max</span>(dp<span class="hljs-selector-attr">[i]</span>,<span class="hljs-built_in">max</span>(j*(i-j),dp<span class="hljs-selector-attr">[i-j]</span>*j))<br></code></pre></td></tr></table></figure></li><li>dp数组初始化,dp[0]与dp[1]均无意义,初始化dp[2]=1;</li><li>遍历顺序，从前往后</li><li>举例</li></ol>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数据链路</title>
    <link href="/2022/05/26/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF/"/>
    <url>/2022/05/26/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p><strong>数据链路层的协议定义了通过通信媒介互连的设备之间传输的规范</strong><br>通信媒介包括双绞线电缆、同轴电缆、光纤、电波以及红外线等介质。此外，各个设备之间有时也会通过交换机、网桥、中继器等中转数据</p><h2 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h2><p>MAC地址用于识别数据链路中互连的节点<br>MAC地址长48比特，任何一个网卡的MAC地址都是唯一的<br><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF/MAC%E5%9C%B0%E5%9D%80.png" class></p><h2 id="共享介质型网络"><a href="#共享介质型网络" class="headerlink" title="共享介质型网络"></a>共享介质型网络</h2><p><strong>共享介质型网络是指由多个设备共享一个通信介质的一种网络</strong>，有两种介质访问控制方式：争用方式和令牌传递方式</p><h3 id="争用方式"><a href="#争用方式" class="headerlink" title="争用方式"></a>争用方式</h3><p>争夺获取数据传输的权力，也叫CSMA，采用先到先得的方式占用信道发送数据<br>改良CSMA另一种方式——CSMA/CD</p><ul><li>如果载波信道上没有数据流动，任何站可以发送数据</li><li>检查是否会发生冲突。一旦发生冲突，放弃发送数据，同时立即释放载波信道</li><li>放弃发送后，随机延时一段时间，再重新争用介质，重新发送帧</li></ul><h3 id="令牌传递方式"><a href="#令牌传递方式" class="headerlink" title="令牌传递方式"></a>令牌传递方式</h3><p>只有获得令牌的站才能发送数据，有两个特点：</p><ul><li>不会有冲突</li><li>每个站都有通过平等循环获得令牌的机会</li></ul><h2 id="非共享介质网络"><a href="#非共享介质网络" class="headerlink" title="非共享介质网络"></a>非共享介质网络</h2><p>网络中的每个站直连交换机，由交换机负责转发数据帧<br>并且交换机的端口与计算机之间可以实现同时收发的全双工通信<br><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF/%E9%9D%9E%E5%85%B1%E4%BA%AB%E4%BB%8B%E8%B4%A8%E7%BD%91%E7%BB%9C.png" class></p><h2 id="根据MAC地址转发"><a href="#根据MAC地址转发" class="headerlink" title="根据MAC地址转发"></a>根据MAC地址转发</h2><p><strong>以太网交换机就是持有多个端口的网桥</strong>，此处端口不是操作系统的端口。它们根据数据链路层中每个帧的目标MAC地址，决定从哪个网络接口发送数据。<strong>所参考的，用以记录发送接口的表叫做转发表</strong><br>转发表内容可以自动生成，又叫<strong>自学过程</strong><br><img src="/2022/05/26/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF/%E4%BA%A4%E6%8D%A2%E6%9C%BA%E8%87%AA%E5%AD%A6.png" class><br>当连接多个终端时，有必要讲网络分成多个数据链路，采用类似于网络层的IP地址一样对地址进行分层管理<br><strong>交换机转发方式</strong>：</p><ul><li>存储转发：检查以太网数据帧末尾的FCS位后再进行转发，可以避免由于冲突而被破坏的帧或噪声导致的错误帧</li><li>直通转发：不需要将整个帧全部接收下来以后再进行转发。只需要得知目标地址即可开始转发。具有延迟较短的优势，但可能会发送错误帧</li></ul><h2 id="环路检测技术"><a href="#环路检测技术" class="headerlink" title="环路检测技术"></a>环路检测技术</h2><p>最坏的情况下，数据帧会在环路中被持续转发，数据帧的积累导致网络瘫痪</p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>传输层</title>
    <link href="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    <url>/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="概述和传输层服务"><a href="#概述和传输层服务" class="headerlink" title="概述和传输层服务"></a>概述和传输层服务</h1><p>网络层服务：主机到主机的逻辑通信<br>传输层服务：主机中进程到进程的逻辑通信</p><ul><li>依赖于网络层的服务，如延时，带宽</li><li>并对网络层的服务进行增强，如数据丢失、顺序混乱、加密等</li></ul><p>可靠的、保序的传输：TCP</p><ul><li>多路复用，解复用</li><li>拥塞控制</li><li>流量控制</li><li>建立连接</li></ul><p>不可靠的、不保序的传输：UDP</p><ul><li>多路复用、解复用</li><li>没有尽力而为地为IP服务器添加更多的其他的额外的服务</li></ul><p>都不提供的服务：</p><ul><li>延时保证</li><li>带宽保证</li></ul><h1 id="多路复用与多路分解"><a href="#多路复用与多路分解" class="headerlink" title="多路复用与多路分解"></a>多路复用与多路分解</h1><h2 id="接收主机将到达地运输层报文定向到适当的套接字"><a href="#接收主机将到达地运输层报文定向到适当的套接字" class="headerlink" title="接收主机将到达地运输层报文定向到适当的套接字"></a>接收主机将到达地运输层报文定向到适当的套接字</h2><p>每个运输层报文段中具有几个字段<br>在接收端，运输层检查这些字段，表示出接收套接字，进而将报文段定向到该套接字<br><strong>将运输段报文段中的数据交付到正确的套接字地工作成为多路分解</strong></p><p>源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息从而生成报文段，然后将报文段传递到网络层，所有这些工作为<strong>多路复用</strong></p><p><strong>它们在某层的单一协议何时被位于接下来的较高层的多个协议使用有关</strong></p><p><strong>运输层多路复用的要求：</strong></p><ol><li>套接字有唯一标识符</li><li>每个报文段有特殊字段来指示该报文段所要交付到的套接字</li></ol><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AB%AF%E5%8F%A3.png" class><p>上述特殊字段是<strong>源端口号字段</strong>和<strong>目的端口号字段</strong><br>端口号是16比特的数，在0~65535之间。</p><ul><li>0~1023范围的端口号为周知端口号，是受限制的，留给HTTP(80号端口)、FTP(21号端口)、DNS(53号端口)等周知的应用层协议来使用<img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/TCPUDP.png" class><h2 id="无连接的多路复用与多路分解"><a href="#无连接的多路复用与多路分解" class="headerlink" title="无连接的多路复用与多路分解"></a>无连接的多路复用与多路分解</h2></li></ul><ol><li>主机A向主机B发送UDP报文</li><li>主机A的运输层创建一个运输层报文段，包括应用程序数据、目的IP、目的端口号和两个其他值、UDPSocket</li><li>运输层将得到的报文段传递到网络层</li><li>网络层将报文段封装到一个IP数据报并尽力将报文段交付给接收主机</li><li>主机B运输层检查报文段目标端口号，并将报文段交付给该端口号所标识的套接字</li><li>主机B有多个进程，每个进程有自己特定的UDP套接字和相应的端口号，当UDP报文段从网络到达时，主机B检查报文段的目的端口号，将每个报文段定向分解到相应的套接字</li></ol><p><strong>一个UDP套接字时一个二元组：目的主机IP和目的主机端口号</strong></p><p>若两个源主机IP不同，源端口号不同，但是目的主机IP和目的主机端口号相同的UDP报文段，那么这两个报文段就会被定向到相同的目标进程</p><p>UDP报文段源主机IP和源端口号的作用显然<br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AB%AF%E5%8F%A3%E5%8F%8D%E8%BD%AC.png" class></p><h2 id="面向连接的多路复用与多路分解"><a href="#面向连接的多路复用与多路分解" class="headerlink" title="面向连接的多路复用与多路分解"></a>面向连接的多路复用与多路分解</h2><p>与UDP不同，TCP套接字是一个四元组(前面已知)，TCP报文段的四部分必须完全一致才能被定向到一个相同的进程<br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/TCP0.png" class></p><h1 id="无连接传输UDP"><a href="#无连接传输UDP" class="headerlink" title="无连接传输UDP"></a>无连接传输UDP</h1><p>UDP的优点：</p><ol><li>采用UDP时，只要应用进程将数据传递给UDP，UDP就会将此数据打包进UDP报文段并将其立即传递给网络层。<strong>TCP有拥塞控制机制</strong>，当源和目的主机的一条或多条链路变得极度拥塞时会遏制TCP发送方，TCP发送方仍然会发送，不管用多长时间。<strong>实时应用通常要求最小的发送速率，不希望过分地延迟报文段的发送，能容忍数据的丢失</strong></li><li><strong>无须连接建立</strong>，TCP不会引入建立连接的时延，而TCP会</li><li><strong>无连接状态</strong>，TCP需要在端系统中维护连接状态，包括接收和发送缓存、拥塞控制参数以及序号和确认号的参数。UDP不需要维护连接状态，也不跟踪这些参数</li><li>分组首部开销小。每个TCP报文段都有20字节的首部开销，而UDP仅有8字节的开销</li></ol><h2 id="UDP报文段结构"><a href="#UDP报文段结构" class="headerlink" title="UDP报文段结构"></a>UDP报文段结构</h2><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/UDP0.png" class><p>UDP首部只有4个字段，每个字段两个字节<br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/789456.png" class><br><strong>长度</strong>：指示了在UDP报文段中的字节数(首部加数据)。接收方使用检验和来检查在报文段中是否出现了差错</p><h2 id="UDP检验和"><a href="#UDP检验和" class="headerlink" title="UDP检验和"></a>UDP检验和</h2><p><strong>UDP检验和提供了差错检测功能</strong>，检验和用于确定当UDP报文段从源到达目的地移动时，其中的比特是否发生了改变。<br>发送方的UDP对报文段中的所有16比特字的和进行反码运算，求和时遇到的任何溢出都被回卷。得到的结果被放在UDP报文段中的检验和字段</p><p><strong>虽然UDP提供差错检测，但它对差错恢复无能为力。UDP的某种实现只是丢弃受损的报文段；其他实现是将受损的报文段交给应用程序并给出警告</strong></p><h1 id="可靠数据传输原理"><a href="#可靠数据传输原理" class="headerlink" title="可靠数据传输原理"></a>可靠数据传输原理</h1><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/%E5%8F%AF%E9%9D%A0%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1.png" class><h2 id="构造可靠数据传输协议"><a href="#构造可靠数据传输协议" class="headerlink" title="构造可靠数据传输协议"></a>构造可靠数据传输协议</h2><h3 id="经完全可靠信道的可靠数据传输-rdt1-0"><a href="#经完全可靠信道的可靠数据传输-rdt1-0" class="headerlink" title="经完全可靠信道的可靠数据传输 rdt1.0"></a>经完全可靠信道的可靠数据传输 rdt1.0</h3><p>在这个协议中，一个单元数据和一个分组没差别。所有分组是从发送方流向接收方；<br>有了完全可靠的信道，接收端就不需要提供任何反馈信息给发送方，因为不必担心差错；<br>假定接收方接收数据的速率能够和发送方发送数据的速率一样快，接收方没有必要请求发送方慢一点<br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/rdt1.png" class></p><h3 id="经具有比特差错信道的可靠数据传输-rdt2-0"><a href="#经具有比特差错信道的可靠数据传输-rdt2-0" class="headerlink" title="经具有比特差错信道的可靠数据传输 rdt2.0"></a>经具有比特差错信道的可靠数据传输 rdt2.0</h3><p><strong>自动重传请求(ARQ)协议</strong><br>这些控制报文使得接收方可以让发送方知道哪些内容被正确接受，哪些内容接收有误并因此需要重复，基于这样的重传机制为自动重传请求协议</p><p>此外，还需要另外三种协议功能来处理比特差错的情况</p><ul><li><strong>差错检测</strong>，如UDP使用因特网检验和字段是为了这个目的</li><li><strong>接收方反馈ACK/NAK</strong>：如”ACK”(肯定确认)和”NAK”(否定确认)，理论上，这些分组只需要一个比特长，0标示NAK，1标示ACK</li><li><strong>重传</strong>：接收方收到有差错的分组时，发送方将重传该报文</li></ul><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/rdt2.png" class><h4 id="rdt2-1"><a href="#rdt2-1" class="headerlink" title="rdt2.1"></a>rdt2.1</h4><p>rdt2.0的缺陷是无法确认ACK和NAK一定是正确的<br>就是在rdt2.0基础上将发送方的数据进行分组</p><p> 如果收到受损的分组 ，则接收方将发送一个否定确认 。 如果不发送 NAK, 而是对上次正确接收的分组发送一个 ACK, 我们也能实现与 NAK — 样的效果 。 发送方接收到对同一个分组的两个 ACK （ 即接收冗余 ACK（ duplicate ACK））后 ， 就知道接收方没有正确接收到跟在被确认两次的分组后面的分组<br>发送方<br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/rdt2.11.png" class><br>接收方<br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/rdt2.12.png" class></p><h4 id="rdt2-2"><a href="#rdt2-2" class="headerlink" title="rdt2.2"></a>rdt2.2</h4><p>相比于rdt2.1，rdt2.2只使用ACK报</p><ul><li>接收方通过ACK告知最后一个被正确接收的分组</li><li>在ACK消息中显示地加入被正确分组的序列号</li></ul><p>发送方收到重复的ACK之后，采取与收到NAK消息相同的动作，重传当前分组<br>发送方<br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/rdt2.21.png" class><br>接收方<br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/rdt2.22.png" class></p><h3 id="经具有比特差错的丢包信道的可靠数据传输：rdt3-0"><a href="#经具有比特差错的丢包信道的可靠数据传输：rdt3-0" class="headerlink" title="经具有比特差错的丢包信道的可靠数据传输：rdt3.0"></a>经具有比特差错的丢包信道的可靠数据传输：rdt3.0</h3><p>让发送方负责检测和恢复丢包工作<br>在发送方和接收方之间加一个往返时延，当发送方在此时间内没有收到ACK，则重传该分组。<br><strong>这就在发送方和接收方的信道中引入了冗余数据分组的可能性</strong>，在rdt2.2中该问题已解决<br><strong>发送方应该做到</strong>：</p><ol><li>每次发送一个分组(包括第一次分组和重传分组)时，便启动一个定时器</li><li>响应定时器中断(采取适当动作)</li><li>终止定时器<br>发送方：<img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/rdt3.png" class></li></ol><h2 id="流水线可靠数据传输协议"><a href="#流水线可靠数据传输协议" class="headerlink" title="流水线可靠数据传输协议"></a>流水线可靠数据传输协议</h2><p>既然rdt3.0性能非常差，那么每次让发送方发送一定数量的分组而无需等待确认，可以解决该问题。</p><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/%E6%B5%81%E6%B0%B4%E7%BA%BF%E6%93%8D%E4%BD%9C.png" class><ol><li>必须增加序号范围：每个输送的分组(不包括重传)必须有一个唯一的序号，而且也许有多个在输送中的未确认的报文</li><li>协议中的发送方和接收方两端也许不得不缓存多个分组。发送方最低限度应当能缓冲哪些已发送但没有确认的分组</li><li>解决流水线的回复差错的两种基本方法：<strong>回退N步(GBN)和选择重传(SR)</strong></li></ol><h3 id="GBN"><a href="#GBN" class="headerlink" title="GBN"></a>GBN</h3><p><strong>基序号</strong>定义为最早未确认分组的序号，将<strong>下一个序号</strong>定义为最小的未使用序号(下一个待发分组的序号)<br><strong>N为窗口长度</strong></p><p>[0,base-1]对应已经发送但未被确认的分组<br>[base,nexteqnum-1]对应已经发送但未确认的分组<br>[nexteqnum,base+N-1] 对应要被立即发送的分组<br>直到流水线中未被确认的分组得到确认为止，大于等于base+N的序号时不能使用的<br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/GBN.png" class><br>扩展的状态机：<br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/GBN1.png" class><br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/GBN2.png" class></p><p>ACK机制：发送拥有最高序列号的、已被正确接收的分组的ACK</p><ul><li>可能产生ACK</li><li>只需要记住唯一的expectedeqnum</li></ul><p>乱序到达的分组</p><ul><li>直接丢弃-&gt;接收方没有缓存</li><li>重新确认序列号最大的、按序到达的分组</li></ul><h3 id="SR"><a href="#SR" class="headerlink" title="SR"></a>SR</h3><ul><li>接收方对每个分组<strong>单独进行确认</strong><ul><li>设置<strong>缓存机制</strong>，缓存乱序到达的分组</li></ul></li><li>发送方只重传那些没收到ACK的分组 <ul><li>为每个窗口设置定时器</li></ul></li><li>发送方窗口<ul><li>N个连续的序列号</li><li>限制已发送且未确认的分组 </li></ul></li></ul><p>比GBN先进的地方是，</p><ul><li>为每个分组单独地设置计时器，当超时以后，没发出去的分组再单独重发，不必将后面的已经收到的重发</li><li>接收方也有一个滑动窗口，可以将乱序的分组放进缓存中去</li></ul><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/SR.png" class><p>当窗口中的所有分组都收到时，才将该窗口的分组交给上层应用</p><h1 id="面向连接的传输：TCP"><a href="#面向连接的传输：TCP" class="headerlink" title="面向连接的传输：TCP"></a>面向连接的传输：TCP</h1><h2 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h2><p><strong>三次握手</strong>：前两个报文段不包含应用层数据；第三个报文段可以承载有效载荷</p><ul><li>点对点</li><li>可靠的、按序的字节流</li><li>流水线机制<ul><li>Tcp拥塞控制和流量控制机制，设置窗口尺寸 </li></ul></li><li>发送方/接收方缓存</li><li>全双工：同一连接中能够传输双向数据流</li><li>面向连接</li><li>流量控制机制</li></ul><p>TCP将数据引导到连接的<strong>发送缓存</strong>里，发送缓存是发起三次握手期间设置的缓存之一<br>TCP在方便的时候以报文段的形式发送数据。<br>TCP可从缓存中取出并放入报文段的数量受限于<strong>最大报文段长度MSS</strong>。MSS通常根据最初确定的由本地发送主机发送的<strong>最大链路层帧长度(最大传输单元)</strong>来设置</p><p>TCP为每块客户数据配上一个TCP首部，从而形成多个TCP报文段</p><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%E5%8F%91%E9%80%81%E7%BC%93%E5%AD%98%E5%92%8C%E6%8E%A5%E6%94%B6%E7%BC%93%E5%AD%98.png" class><h2 id="TCP报文段结构"><a href="#TCP报文段结构" class="headerlink" title="TCP报文段结构"></a>TCP报文段结构</h2><p>MSS限制了报文段数据字段的最大长度<br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%E6%8A%A5%E6%96%87%E6%AE%B5%E7%BB%93%E6%9E%84.png" class><br>TCP首部一般是20字节(UDP8字节)<br>TCP报文段首部包括：</p><ul><li><strong>源端口和目的端口</strong></li><li><strong>检验和字段</strong></li><li>32比特的<strong>序号字段</strong>和32比特的<strong>确认号字段</strong></li><li>16比特的<strong>接收窗口字段</strong>，该字段用于流量控制</li><li>4比特的<strong>首部长度字段</strong>，该字段指示了以32比特的字为单位的TCP首部长度(通常该字段为空，所以TCP首部的典型长度为20字节)</li><li>可选与变长的<strong>选项字段</strong>，该字段用于发送方与接收方协商最大报文段长度时，或在高速网络环境下用作窗口调节因子时使用</li><li>16比特的<strong>标志字段</strong>，<ul><li>RST、SYN、FIN比特用于连接建立和拆除</li><li>明确拥塞通告中使用了CWR和ECE比特</li><li>当PSH比特被置位时，就指示接收方应立即将数据交给上层</li><li>URG比特用于指示报文段里存在着被发送端上层实体置为“紧急”的数据。紧急数据的最后一个字节由16比特的<strong>紧急数据指针字段指出</strong></li></ul></li></ul><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/123456789.png" class><h4 id="序号和确认号"><a href="#序号和确认号" class="headerlink" title="序号和确认号"></a>序号和确认号</h4><p><strong>序号</strong>以字节为编号，是该报文段首字节的字节流编号。500000字节大小文件，MSS为1000，则序号分别为0，1000，2000<br><strong>主机A填充进报文段的确认号是主机A期望从主机B收到的下一字节的序号</strong>，确认n-1及之前的字节<br>TCP只确认该流中至第一个丢失字节为止的字节，所以被称为提供<strong>累计确认</strong><br>主机收到失序报文段，由实现TCP的编程人员去处理</p><ul><li>接收方立即丢弃失序报文段</li><li>接收方保留时失序报文段，并等待缺少的字节以填补该间隔</li></ul><h2 id="往返时间估计与超时"><a href="#往返时间估计与超时" class="headerlink" title="往返时间估计与超时"></a>往返时间估计与超时</h2><h3 id="估计往返时间"><a href="#估计往返时间" class="headerlink" title="估计往返时间"></a>估计往返时间</h3><p>大多数TCP仅在某一时刻做sampleRTT测量，不为每个发送的报文段做sampleRTT<br>TCP维持一个SampleRTT均值(EstimatedRTT)<br>EstimatedRTT=(1-α)<em>EstimatedRTT+α</em>SampleRTT，推荐α取0.125<br>偏差DevRTT=(1-β)<em>DevRTT+β</em>|SampleRTT-EstimatedRTT|,推荐β取0.25<br>TimeoutInterval=EstimatedRTT+4*DevRTT;当出现超时，值加倍；只要收到报文段并更新EstimatedRTT，就使用公式重新计算</p><h2 id="可靠数据传输"><a href="#可靠数据传输" class="headerlink" title="可靠数据传输"></a>可靠数据传输</h2><ul><li>TCP在IP不可靠的服务基础上建立了rdt<ul><li>管道化的报文段</li><li>累计确认</li><li>单个重传定时器</li><li>是否可以接受乱序的，没有规范</li></ul></li><li>通过以下事件触发重传<ul><li>超时(只重发那个最早的未确认的段)</li><li>重复的确认，例如收到ACK50之后又收到3个冗余的ACK50</li></ul></li><li>首先考虑简化的TCP发送发<ul><li>忽略重复的确认</li><li>忽略流量控制和拥塞控制</li></ul></li></ul><p><strong>产生TCP ACk的建议:</strong><br></p><h2 id="TCP流量控制"><a href="#TCP流量控制" class="headerlink" title="TCP流量控制"></a>TCP流量控制</h2><p><strong>流量控制就是让发送方的发送速率不要太快，要接收方来得及接收</strong><br>利用滑动窗口机制方便在TCP连接上实现对发送方的流量控制</p><ul><li>TCP接收方利用自己的接收窗口的大小来限制发送方发送窗口的大小</li><li>TCP发送方收到接收方的零窗口通知后，应启动持续计时器。持续计时器超时后，向接收方发送零窗口探测报文(该探测报文超过一段时间未收到确认后也会重传)</li></ul><p>RcvBuffer：接受主机分配的接收缓存<br>LastByteRead：主机 B 上的应用进程从缓存读出的数据流的最后一个字节的编号 。<br>LastByteRcvd : 从网络中到达的并且已放入主机 B 接收缓存中的数据流的最后一个字节的编号<br>Tcp不允许已分配的缓存溢出，必须有：LastByteRcvd - LastByteRead &lt;= RcvBuffer<br>接受窗口用rwnd表示，rwnd = RcvBuffer - [ LastByteRcvd - LastByteRead ]<br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/8678964165.png" class></p><p> 主机 B 通过把当前的rwnd 值放入它发给主机 A 的报文段接收窗口字段中 ， 通知主机 A 它在该连接的缓存中还有多少可用空间。开始时，主机 B设定 rwnd = RcvBuffer<br> 主机 A 轮流跟踪两个变量 ， LastByteSent 和 LastByteAcked</p><p>主机 A 在该连接的整个生命周期须保证:LastByteSent-LastByteAcked &lt;= rwnd<br><strong>当主机 B 的接收窗口为 0 时,主机 A 继续发送只有一个字节数据的报文段。这些报文段将会被接收方确认 。最终缓存将开始清空，并且确认报文里将包含一个非0的rwnd 值</strong></p><h2 id="TCP拥塞控制"><a href="#TCP拥塞控制" class="headerlink" title="TCP拥塞控制"></a>TCP拥塞控制</h2><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6.png" class><p>假定：</p><ol><li>数据是单方向传送，而另一个方向只传送确认</li><li>接收方总是有足够大的缓存空间，因而发送方发送窗口的大小由网络的拥塞程度来决定</li><li>以最大报文段MSS的个数为讨论问题的单位，而不是以字节为单位</li></ol><ul><li>发送方维护一个<strong>拥塞窗口cwnd</strong>的状态变量，其值取决于<strong>网络的拥塞程度</strong>，并且<strong>动态变化</strong><ul><li>拥塞窗口<strong>cwnd的维护原则</strong>：只要窗口没有出现拥塞，拥塞窗口就再增大一些；但只要网络出现拥塞，拥塞窗口就减少一些</li><li>判断出现网络拥塞的<strong>依据</strong>：没有按时收到应当到达的报文(即<strong>发生超时重传</strong>)</li></ul></li><li>发送方将拥塞窗口作为<strong>发送窗口swnd</strong>，即<strong>swnd=cwnd</strong></li><li>维护一个慢开始门限<strong>ssthresh</strong>状态变量：<ul><li>当cwnd&lt; ssthresh时，使用慢开始算法；</li><li>当cwnd&gt;ssthresh时，停止使用慢开始算法而改用拥塞避免算法</li><li>当cwnd==ssthresh时，既可以使用慢开始算法，也可以使用拥塞避免算法</li></ul></li></ul><h3 id="TCP拥塞控制算法：慢启动、拥塞避免、快速恢复"><a href="#TCP拥塞控制算法：慢启动、拥塞避免、快速恢复" class="headerlink" title="TCP拥塞控制算法：慢启动、拥塞避免、快速恢复"></a>TCP拥塞控制算法：慢启动、拥塞避免、快速恢复</h3><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6FSM%E6%8F%8F%E8%BF%B0.png" class><h2 id="TCP连接管理"><a href="#TCP连接管理" class="headerlink" title="TCP连接管理"></a>TCP连接管理</h2><p><strong>三次握手：</strong><br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" class><br><strong>客户ＴＣＰ经历的典型的ＴＣＰ状态序列</strong><br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/%E5%AE%A2%E6%88%B7%EF%BC%B4%EF%BC%A3%EF%BC%B0%E7%BB%8F%E5%8E%86%E7%9A%84%E5%85%B8%E5%9E%8B%E7%9A%84%EF%BC%B4%EF%BC%A3%EF%BC%B0%E7%8A%B6%E6%80%81%E5%BA%8F%E5%88%97.png" class><br><strong>服务端TCP经历的典型的TCP状态序列</strong><br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/%E5%BE%B7%E7%93%A6dawdle4.png" class></p>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>贪心</title>
    <link href="/2022/05/23/%E8%B4%AA%E5%BF%83/"/>
    <url>/2022/05/23/%E8%B4%AA%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<p>贪心算法没有固定的模板，总的思路就是找到局部最优解从而推出总体最优解，并且找不到反例，就可以用贪心</p><h4 id="力扣55-跳跃游戏"><a href="#力扣55-跳跃游戏" class="headerlink" title="力扣55.跳跃游戏"></a><a href="https://leetcode.cn/problems/jump-game/">力扣55</a>.跳跃游戏</h4><p>局部最优解：每次取最大的跳跃步数，就是取最大的覆盖范围<br>整体最优解：最后得到整体的最大覆盖范围<br>找不到反例，可以用贪心<br>现设一个cover变量，初始化为0；<br>然后遍历可以到达的数组，cover每次取可以最大的覆盖范围，如果cover大于数组长度，返回true</p><h4 id="力扣45-跳跃游戏II"><a href="#力扣45-跳跃游戏II" class="headerlink" title="力扣45.跳跃游戏II"></a><a href="https://leetcode.cn/problems/jump-game-ii/">力扣45</a>.跳跃游戏II</h4><p>本题覆盖范围要设两个变量，一个是当前的最大覆盖范围curDistance，另一个是下一步的最大覆盖范围nextDistance<br>遍历整个数组，更新nextDistance；<br>如果当前curDistance＝i，判断curDistance是否大于数组最大长度，大于，终止；小于，步数+1并且curDistance=nextDistance。</p><h4 id="力扣1005-k次取反后最大化的数组和"><a href="#力扣1005-k次取反后最大化的数组和" class="headerlink" title="力扣1005.k次取反后最大化的数组和"></a><a href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/">力扣1005</a>.k次取反后最大化的数组和</h4><p>sort函数可以有第三个参数，标示排序的规则<br>本题在类内使用sort函数，需要定义一个排序的函数，必须在函数前加static，因为sort需要传入的是一个普通函数指针，而不是成员函数指针，所以需要在类成员定义前加static</p><p>利用绝对值大小排序，将小于0的值尽可能多的反正，如果k还有剩余<br>这里可以判断k的奇偶，奇的话让最小的值变号即可</p><h4 id="力扣134-加油站"><a href="#力扣134-加油站" class="headerlink" title="力扣134.加油站"></a><a href="https://leetcode.cn/problems/gas-station/">力扣134</a>.加油站</h4><h5 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h5><p>从全局进行选择：</p><ol><li>如果gas的总和小于cost的总和，返回-1；</li><li>rest[ i ]=gas[ i ]-cost[ i ]为一天剩下的油，从0位置开始遍历，如果rest一直大于0，说明油一直没断过，0就是起点</li><li>如果累加的最小值是负数，汽车就要从非0节点出发，从后向前，看哪个节点能把负数填平，哪个节点就是出发节点<figure class="highlight mel"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">int</span> canCompleteCircuit(<span class="hljs-keyword">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; gas, <span class="hljs-keyword">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; cost) &#123;<br>           <span class="hljs-keyword">int</span> <span class="hljs-keyword">min</span>=INT_MAX;<br>           <span class="hljs-keyword">int</span> curSum=<span class="hljs-number">0</span>;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;gas.<span class="hljs-keyword">size</span>();i++)&#123;<br>               <span class="hljs-keyword">int</span> rest=gas[i]-cost[i];<br>               curSum+=rest;<br>               <span class="hljs-keyword">if</span>(curSum&lt;<span class="hljs-keyword">min</span>)&#123;<br>                   <span class="hljs-keyword">min</span>=curSum;<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">if</span>(curSum&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>           <span class="hljs-keyword">if</span>(<span class="hljs-keyword">min</span>&gt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=gas.<span class="hljs-keyword">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>               <span class="hljs-keyword">int</span> rest=gas[i]-cost[i];<br>               <span class="hljs-keyword">min</span>+=rest;<br>               <span class="hljs-keyword">if</span>(<span class="hljs-keyword">min</span>&gt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> i;<br>           &#125;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h5>贪心算法：<br>每个加油站的剩余量rest[ i ]为gas[i]-cost[i]；i从0开始累加rest[i]，和记为curSum，一旦curSum&lt;0说明[0, i]都不能作为起始位置，起始位置从i+1算起，再从0累加curSum<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> canCompleteCircuit(vector&lt;<span class="hljs-type">int</span>&gt;&amp; gas, vector&lt;<span class="hljs-type">int</span>&gt;&amp; <span class="hljs-keyword">cost</span>) &#123;<br>       <span class="hljs-type">int</span> totalSum=<span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> curSum=<span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span>    start=<span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;gas.size();i++)&#123;<br>           curSum+=gas[i]-<span class="hljs-keyword">cost</span>[i];<br>           totalSum+=gas[i]-<span class="hljs-keyword">cost</span>[i];<br>           <span class="hljs-keyword">if</span>(curSum&lt;<span class="hljs-number">0</span>)&#123;<br>               start=i+<span class="hljs-number">1</span>;<br>               curSum=<span class="hljs-number">0</span>;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(totalSum&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">start</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="力扣452-用最小的箭引爆气球"><a href="#力扣452-用最小的箭引爆气球" class="headerlink" title="力扣452.用最小的箭引爆气球"></a><a href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/">力扣452</a>.用最小的箭引爆气球</h4><p>本题甚至看题都有一点费劲<br>先排序，按照左边界从小到大，那么对应的也要从前往后遍历<br>关注气球的左右边界：</p><ul><li>如果两个气球没挨着，结果值+1<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">if(points<span class="hljs-selector-attr">[i]</span><span class="hljs-selector-attr">[0]</span>&gt;points<span class="hljs-selector-attr">[i-1]</span><span class="hljs-selector-attr">[1]</span>)<br></code></pre></td></tr></table></figure></li><li>如果两个气球挨着，那么更新第i个的右边界，取第i-1个和它本身最小值。当遍历到两气球没有挨着时，前面几个都可以用一支箭，就是第一种情况<figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">points<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>=min(points<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[1]</span>,points<span class="hljs-comment">[i]</span><span class="hljs-comment">[1]</span>);<br></code></pre></td></tr></table></figure></li></ul><h4 id="力扣435-无重叠区间"><a href="#力扣435-无重叠区间" class="headerlink" title="力扣435.无重叠区间"></a><a href="https://leetcode.cn/problems/non-overlapping-intervals/">力扣435</a>.无重叠区间</h4><p>先排序，按照左边界排序和右边界排序均可以<br>总的区间个数=重叠区间个数+非重叠区间个数<br><strong>只需找到非重叠区间个数最多的情况即可</strong><br>如果按照右边界排序，就从左向右遍历<br><strong>优先选取右边界比较小的区间，那么留给下一个区间的范围就会更大，局部最优推出整体最优，找不到反例，用贪心</strong></p><p>每次取非交叉区间的时候，都是可右边界最小的来做分割点<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">static <span class="hljs-built_in">bool</span> cmp( vector&lt;<span class="hljs-built_in">int</span>&gt; &amp;a,vector&lt;<span class="hljs-built_in">int</span>&gt; &amp;b)&#123;<br>        <span class="hljs-keyword">return</span> a[<span class="hljs-number">1</span>]&lt;b[<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-built_in">int</span> eraseOverlapIntervals(vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;&amp; <span class="hljs-built_in">int</span>ervals) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">int</span>ervals.size()==<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        sort(<span class="hljs-built_in">int</span>ervals.begin(),<span class="hljs-built_in">int</span>ervals.end(),cmp);<br>        <span class="hljs-built_in">int</span> count=<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">int</span> minBoard=<span class="hljs-built_in">int</span>ervals[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-built_in">int</span>ervals.size();i++)&#123;<br>            <span class="hljs-keyword">if</span>(minBoard&lt;=<span class="hljs-built_in">int</span>ervals[i][<span class="hljs-number">0</span>])&#123;<br>                count++;<br>                minBoard=<span class="hljs-built_in">int</span>ervals[i][<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>ervals.size()-count;<br>    &#125;<br></code></pre></td></tr></table></figure></p><h4 id="力扣763-划分字母区间"><a href="#力扣763-划分字母区间" class="headerlink" title="力扣763.划分字母区间"></a><a href="https://leetcode.cn/problems/partition-labels/">力扣763</a>.划分字母区间</h4><p>首先要先创建一个关于每个字母的最远出现下标的对应关系，这里只有26个字母，用数组比较方便，但要注意创建27大小的，这样可以规避数组下标带来的麻烦。创建hasa[27]保存每个字母的最远的出现的下标</p><p>然后定义left和right，每次right取字符出现的最远边界，如果此时遍历到最远的边界，那么就可以push_back了</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs excel">vector&lt;<span class="hljs-built_in">int</span>&gt; partitionLabels(string s) &#123;<br>        <span class="hljs-built_in">int</span> hash[<span class="hljs-number">27</span>]=&#123;<span class="hljs-number">0</span>&#125;;<br>        for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;s.size();i++)&#123;<br>            hash[s[i]-&#x27;a&#x27;]=i;<br>        &#125;<br>        vector&lt;<span class="hljs-built_in">int</span>&gt;result;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>=<span class="hljs-number">0</span>;<br>        for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;s.size();i++)&#123;<br>            <span class="hljs-built_in">right</span>=<span class="hljs-built_in">max</span>(hash[s[i]-&#x27;a&#x27;],<span class="hljs-built_in">right</span>);<br>            <span class="hljs-built_in">if</span>(i==<span class="hljs-built_in">right</span>)&#123;<br>                result.push_back(<span class="hljs-built_in">right</span>-<span class="hljs-built_in">left</span>+<span class="hljs-number">1</span>);<br>                <span class="hljs-built_in">left</span>=<span class="hljs-built_in">right</span>+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        return result;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="力扣56-合并区间"><a href="#力扣56-合并区间" class="headerlink" title="力扣56.合并区间"></a><a href="https://leetcode.cn/problems/merge-intervals/">力扣56</a>.合并区间</h4><p>先按照区间左边界从小到大排序<br>从第二个区间开始遍历整个数组<br>设立left和right表示上一个区间的左右边界<br>当该区间左边界小于right时，则区间必有交集，更新right为最大值<br>需要主要的是将最后一个区间是否被合并标记出来，如果最后是false，需要手动将最后一个区间加进去<br><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">static <span class="hljs-built_in">bool</span> cmp(vector&lt;<span class="hljs-built_in">int</span>&gt; &amp;a,vector&lt;<span class="hljs-built_in">int</span>&gt; &amp;b)&#123;<br>        <span class="hljs-keyword">return</span> a[<span class="hljs-number">0</span>]&lt;b[<span class="hljs-number">0</span>];<br>    &#125;<br>    vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; merge(vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt;&amp; <span class="hljs-built_in">int</span>ervals) &#123;<br>        vector&lt;vector&lt;<span class="hljs-built_in">int</span>&gt;&gt; result;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">int</span>ervals.size()==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> result;<br>        <span class="hljs-built_in">bool</span> flag=<span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">int</span> length=<span class="hljs-built_in">int</span>ervals.size();<br>        sort(<span class="hljs-built_in">int</span>ervals.begin(),<span class="hljs-built_in">int</span>ervals.end(),cmp);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-built_in">int</span>ervals.size();i++)&#123;<br>            <span class="hljs-built_in">int</span> left=<span class="hljs-built_in">int</span>ervals[i<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>];<br>            <span class="hljs-built_in">int</span> right=<span class="hljs-built_in">int</span>ervals[i<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">while</span>(i&lt;length&amp;&amp;<span class="hljs-built_in">int</span>ervals[i][<span class="hljs-number">0</span>]&lt;=right)&#123;<br>                right=max(right,<span class="hljs-built_in">int</span>ervals[i][<span class="hljs-number">1</span>]);<br>                <span class="hljs-keyword">if</span>(i==length<span class="hljs-number">-1</span>) flag=<span class="hljs-literal">true</span>;<br>                i++;<br>            &#125;<br>            result.push_back(&#123;left,right&#125;);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag==<span class="hljs-literal">false</span>)&#123;<br>            result.push_back(&#123;<span class="hljs-built_in">int</span>ervals[length<span class="hljs-number">-1</span>][<span class="hljs-number">0</span>],<span class="hljs-built_in">int</span>ervals[length<span class="hljs-number">-1</span>][<span class="hljs-number">1</span>]&#125;);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></td></tr></table></figure></p><h4 id="力扣738-单调递增的数字"><a href="#力扣738-单调递增的数字" class="headerlink" title="力扣738.单调递增的数字"></a><a href="https://leetcode.cn/problems/monotone-increasing-digits/">力扣738</a>.单调递增的数字</h4><p>暴力肯定是过不了<br>将数字转为字符串后，从后往前遍历，不会修改上一步的结果<br>strNum[i-1]&gt;strNum[i]，就让strNum[i-1]—，flag标记i，最后让flag往后的全变为’9’即可<br><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">int</span> monotoneIncreasingDigits(<span class="hljs-keyword">int</span> n) &#123;<br>        <span class="hljs-keyword">string</span> strNum=to_string(n);<br>        <span class="hljs-keyword">int</span> flag=strNum.<span class="hljs-keyword">size</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=strNum.<span class="hljs-keyword">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">1</span>;i--)&#123;<br>            <span class="hljs-keyword">if</span>(strNum[i<span class="hljs-number">-1</span>]&gt;strNum[i])&#123;<br>                flag=i;<br>                strNum[i<span class="hljs-number">-1</span>]--;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=flag;i&lt;strNum.<span class="hljs-keyword">size</span>();i++)&#123;<br>            strNum[i]=<span class="hljs-string">&#x27;9&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> stoi(strNum);<br>    &#125;<br></code></pre></td></tr></table></figure></p><h4 id="力扣714-买股票的最佳时机含手续费"><a href="#力扣714-买股票的最佳时机含手续费" class="headerlink" title="力扣714.买股票的最佳时机含手续费"></a><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">力扣714</a>.买股票的最佳时机含手续费</h4><p>收获利润操作的时候有三种情况：</p><ol><li>收获利润的这一天并不是收获利润区里的最后一天(不是真正的卖出，相当于持有股票)，所以后面要继续收获利润</li><li>前一天是收获区间里的最后一天(相当于真正卖出了)，今天要重新记录最小价格了</li><li>不作操作，保持原有状态</li></ol><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-type">int</span> maxProfit(vector&lt;<span class="hljs-type">int</span>&gt;&amp; prices, <span class="hljs-type">int</span> fee) &#123;<br>       <span class="hljs-type">int</span> minPrice=prices[<span class="hljs-number">0</span>];<br>       <span class="hljs-type">int</span> <span class="hljs-built_in">result</span>=<span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;prices.size();i++)&#123;<br>           <span class="hljs-keyword">if</span>(minPrice&gt;prices[i])&#123;<br>               minPrice=prices[i];<br>           &#125;<br>           <span class="hljs-keyword">if</span>(minPrice&lt;=prices[i]&amp;&amp;prices[i]&lt;=minPrice+fee)&#123;<br>               <span class="hljs-keyword">continue</span>;<br>           &#125;<br>           <span class="hljs-keyword">if</span>(prices[i]&gt;minPrice+fee)&#123;<br>               <span class="hljs-built_in">result</span>+=prices[i]-minPrice-fee ;<br>               minPrice=prices[i]-fee;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-built_in">result</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="力扣968-监控二叉树"><a href="#力扣968-监控二叉树" class="headerlink" title="力扣968.监控二叉树"></a><a href="https://leetcode.cn/problems/binary-tree-cameras/">力扣968</a>.监控二叉树</h4><p>确定遍历顺序：后序遍历：左右中，可以从下往上遍历<br>确定每个节点的状态：</p><ul><li>0：表示无覆盖</li><li>1：表示有摄像头</li><li>2：表示有覆盖</li></ul><p>可以分四种情况</p><ol><li>左右节点都被覆盖，返回2</li><li>左节点或者右节点有摄像头，返回0</li><li>左节点或者右节点没被覆盖，返回1</li><li>根节点没被覆盖，result+1</li></ol><p><strong>空节点的状态只能是有覆盖(2)，否则叶子节点就安排上摄像头了，这不可行</strong><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> result;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">traversal</span><span class="hljs-params">(TreeNode* cur)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(cur==<span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> left=<span class="hljs-built_in">traversal</span>(cur-&gt;left);<br>        <span class="hljs-type">int</span> right=<span class="hljs-built_in">traversal</span>(cur-&gt;right);<br>        <span class="hljs-comment">//情况1：左右节点都被覆盖</span><br>        <span class="hljs-keyword">if</span>(left==<span class="hljs-number">2</span>&amp;&amp;right==<span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//情况2：左右节点有一个没被覆盖</span><br>        <span class="hljs-keyword">if</span>(left==<span class="hljs-number">0</span>||right==<span class="hljs-number">0</span>)&#123;<br>            result++;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-comment">//情况3：左右节点有一个有摄像头</span><br>        <span class="hljs-keyword">if</span>(left==<span class="hljs-number">1</span>||right==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span>  <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125; <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minCameraCover</span><span class="hljs-params">(TreeNode* root)</span> </span>&#123;<br>        result=<span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//情况4：根节点没被覆盖</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">traversal</span>(root)==<span class="hljs-number">0</span>)&#123;<br>            result++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></p>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022-05-09~2022-05-15</title>
    <link href="/2022/05/09/2022-05-09-2022-05-15/"/>
    <url>/2022/05/09/2022-05-09-2022-05-15/</url>
    
    <content type="html"><![CDATA[<h4 id="力扣131-分割回文串"><a href="#力扣131-分割回文串" class="headerlink" title="力扣131.分割回文串"></a><a href="https://leetcode.cn/problems/palindrome-partitioning/">力扣131</a>.分割回文串</h4><p><strong>切割问题</strong>类似于组合问题，递归用来纵向遍历，for循环用来横向遍历，在切割线遇到字符串的结尾，递归完成，找到一个例子<br>在判断终止条件的时候优点问题：stratIndex大于s.size()终止，此时分割线已经到达字符串末尾<br>在push_back    path的时候，使用substr函数，分割字符串<br>回溯函数：<br><figure class="highlight reasonml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml">void backtracking(const <span class="hljs-built_in">string</span> &amp;s,<span class="hljs-built_in">int</span> startIndex)&#123;<br>        <span class="hljs-keyword">if</span>(s.size<span class="hljs-literal">()</span>&lt;=startIndex)&#123;<br>            result.push<span class="hljs-constructor">_back(<span class="hljs-params">path</span>)</span>;<br>            return;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=startIndex;i&lt;s.size<span class="hljs-literal">()</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(is<span class="hljs-constructor">Palindrome(<span class="hljs-params">s</span>,<span class="hljs-params">startIndex</span>,<span class="hljs-params">i</span>)</span>)&#123;<br>                <span class="hljs-built_in">string</span> str=s.substr(startIndex,i-startIndex+<span class="hljs-number">1</span>);<br>                path.push<span class="hljs-constructor">_back(<span class="hljs-params">str</span>)</span>;<br>            &#125;<span class="hljs-keyword">else</span> continue;<br>            backtracking(s,i+<span class="hljs-number">1</span>);<br>            path.pop<span class="hljs-constructor">_back()</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><br><strong>回溯函数模板</strong>：<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scss">void <span class="hljs-built_in">backtracking</span>(参数) &#123;<br>    if (终止条件) &#123;<br>        存放结果;<br>        return;<br>    &#125;<br><br>    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;<br>        处理节点;<br>        <span class="hljs-built_in">backtracking</span>(路径，选择列表); <span class="hljs-comment">// 递归</span><br>        回溯，撤销处理结果<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></p><h4 id="力扣93-复原IP地址"><a href="#力扣93-复原IP地址" class="headerlink" title="力扣93.复原IP地址"></a><a href="https://leetcode.cn/problems/restore-ip-addresses/">力扣93</a>.复原IP地址</h4><p>这道题首先要写个判断字串是否是合法的</p><ul><li>不能以0开头</li><li>不能有非法字符</li><li>不能大于255</li></ul><p>封装一个函数，不然的话卸载回溯函数里面优点麻烦<br>然后这道题没有path，直接在s里面修改，通过增加删除’.’来修改结果<br>回溯函数要多一个参数，s里面逗号的个数<br>当逗号个数为3，判断是否是合法的字串，然后放到结果集里面，终止递归<br><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void backtracking(<span class="hljs-built_in">string</span> s,<span class="hljs-built_in">int</span> startIndex,<span class="hljs-built_in">int</span> pointNum)&#123;<br>        <span class="hljs-keyword">if</span>(pointNum==<span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">if</span>(is<span class="hljs-constructor">Valid(<span class="hljs-params">s</span>,<span class="hljs-params">startIndex</span>,<span class="hljs-params">s</span>.<span class="hljs-params">size</span>()</span>-<span class="hljs-number">1</span>))&#123;<br>                result.push<span class="hljs-constructor">_back(<span class="hljs-params">s</span>)</span>;<br>                return;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=startIndex;i&lt;s.size<span class="hljs-literal">()</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(is<span class="hljs-constructor">Valid(<span class="hljs-params">s</span>,<span class="hljs-params">startIndex</span>,<span class="hljs-params">i</span>)</span>)&#123;<br>                s.insert(s.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>+i+<span class="hljs-number">1</span>,<span class="hljs-character">&#x27;.&#x27;</span>);<br>                pointNum++;<br>                backtracking(s,i+<span class="hljs-number">2</span>,pointNum);<br>                pointNum--;<br>                s.erase(s.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>+i+<span class="hljs-number">1</span>);<br>            &#125;<span class="hljs-keyword">else</span> break;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><br>可以说是上一道题的加强版。<br>同时还要注意下一次回溯要从i+2开始，因为已经加了一个’.’<br>另外还要熟练运用string的函数<br>insert(),erase()</p><h4 id="力扣78-子集"><a href="#力扣78-子集" class="headerlink" title="力扣78.子集"></a><a href="https://leetcode.cn/problems/subsets/submissions/">力扣78</a>.子集</h4><p>如果把 子集问题、组合问题、分割问题都抽象为一棵树的话，那么组合问题和分割问题都是收集树的叶子节点，而<strong>子集问题是找树的所有节点</strong>！<br>每次for循环时就把path添加进result中，因为是寻找所有节点</p><h4 id="力扣90-子集II"><a href="#力扣90-子集II" class="headerlink" title="力扣90.子集II"></a><a href="https://leetcode.cn/problems/subsets-ii/submissions/">力扣90</a>.子集II</h4><p>这道题与上题的区别是这道题的数组中有重复的元素，原理同<a href="https://lch781023.github.io/2022/05/02/2022-5-02-2022-5-08/#%E5%91%A8%E6%97%A5">组合总和II</a></p><h4 id="力扣491-递增子序列"><a href="#力扣491-递增子序列" class="headerlink" title="力扣491.递增子序列"></a><a href="https://leetcode.cn/problems/increasing-subsequences/">力扣491</a>.递增子序列</h4><p>这道题我们使用哈希表unordered_set(或数组)对同一树层进行去重<br>即同一父节点下同层使用过的元素不能再使用</p><ul><li>result添加条件：path长度大于1</li><li>每层循环去重：path不空且nums[i]&lt; used.back()  或者同一树层没有使用过(nums[i]不在used里面)</li></ul><p>需要注意的是used每次递归不需要回溯，因为是判断同一树层是否使用，每往下一层，used就会被重新定义</p><h4 id="力扣46-全排列"><a href="#力扣46-全排列" class="headerlink" title="力扣46.全排列"></a><a href="https://leetcode.cn/problems/permutations/">力扣46</a>.全排列</h4><p><strong>排列</strong>问题不需要去重</p><ul><li>当path的长度等于nums的长度时，添加到result中</li><li>使用used判断该元素是否被用过</li><li>每次都从0开始而不是startIndex</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">void</span> backtracking(vector&lt;<span class="hljs-type">int</span>&gt;&amp;nums,vector&lt;<span class="hljs-type">bool</span>&gt;&amp;used)&#123;<br>       <span class="hljs-keyword">if</span>(<span class="hljs-type">path</span>.size()==nums.size())&#123;<br>           result.push_back(<span class="hljs-type">path</span>);<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();i++)&#123;<br>           <span class="hljs-keyword">if</span>(used[i]==<span class="hljs-keyword">true</span>) <span class="hljs-keyword">continue</span>;<br>           <span class="hljs-type">path</span>.push_back(nums[i]);<br>           used[i]=<span class="hljs-keyword">true</span>;<br>           backtracking(nums,used);<br>           used[i]=<span class="hljs-keyword">false</span>;<br>           <span class="hljs-type">path</span>.pop_back();<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="力扣47-全排列II"><a href="#力扣47-全排列II" class="headerlink" title="力扣47.全排列II"></a><a href="https://leetcode.cn/problems/permutations-ii/">力扣47</a>.全排列II</h4><p>本题与上一题的区别是该题给的元素有重复，需要对同一树层进行去重<br><strong>去重一定要先对nums进行排序，这样才好通过相邻节点判断是否用过了</strong><br>与上题的对比：<br><figure class="highlight plaintext"><figcaption><span>backtracking(vector<int>&nums,vector<bool> used)&#123;</bool></int></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs void">    if(nums.size()==path.size())&#123;<br>        result.push_back(path);<br>        return;<br>    &#125;<br>    for(int i=0;i&lt;nums.size();i++)&#123;<br>        if(used[i]==true) continue;<br>        if(i&gt;0&amp;&amp;nums[i]==nums[i-1]&amp;&amp;used[i-1]==false)&#123;<br>            continue;<br>        &#125;<br>        path.push_back(nums[i]);<br>        used[i]=true;<br>        backtracking(nums,used);<br>        used[i]=false;<br>        path.pop_back();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><br><strong>一般来说，组合问题和排列问题是在树的叶子收集结果，而子集问题是在树枝就收集结果</strong></p>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关系数据库</title>
    <link href="/2022/05/06/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2022/05/06/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="关系数据结构及形式化定义"><a href="#关系数据结构及形式化定义" class="headerlink" title="关系数据结构及形式化定义"></a>关系数据结构及形式化定义</h1><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p><strong>域</strong>、<strong>笛卡尔积</strong>、<strong>元组</strong>、<strong>分量</strong>、<strong>基数</strong>、<strong>关系</strong><br><img src="/2022/05/06/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB.png" class><br>关系可以有三种类型：基本关系、查询表和视图表<br>基本关系的6条性质</p><ul><li>列是同质的，每一列中的分量是同一类型的数据，来自同一个域</li><li>不同列课出自同一个域，称其中的每一列为一个属性，不同的属性要给予不同的属性名</li><li>列的顺序无所谓</li><li>任何两个元组的候选码不能取相同的值</li><li>行的顺序无所谓</li><li>分量必须取原子值，每一个分量都是不可分的数据项</li></ul><h2 id="关系模式"><a href="#关系模式" class="headerlink" title="关系模式"></a>关系模式</h2><p>关系的描述称为<strong>关系模式</strong>，表示为：R(U,D,DOM,F)<br>R：关系名，U组成该关系的属性名集合，D：U中属性所来自的域，DOM属性向域的映像集合，F为属性间数据的依赖关系集合</p><h2 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h2><p>型：关系数据库模式<br>值：这些关系模式在某一时刻对应的关系的集合</p><h1 id="关系操作"><a href="#关系操作" class="headerlink" title="关系操作"></a>关系操作</h1><h2 id="基本关系操作"><a href="#基本关系操作" class="headerlink" title="基本关系操作"></a>基本关系操作</h2><p>查询、插入、删除、修改<br>查询基本操作：选择、投影、并、差、笛卡尔积<br>关系操作的特点是集合操作方式，操作的对象和结果都是集合（一次一集合方式），非关系数据库的数据操作方式称为一次一记录方式</p><h2 id="关系数据语言的分类"><a href="#关系数据语言的分类" class="headerlink" title="关系数据语言的分类"></a>关系数据语言的分类</h2><h1 id="关系的完整性"><a href="#关系的完整性" class="headerlink" title="关系的完整性"></a>关系的完整性</h1><h2 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h2><p><strong>实体完整性规则</strong>：若属性A是基本关系R的主属性，则A不能取空值</p><h2 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h2><img src="/2022/05/06/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%8F%82%E7%85%A7%E5%AE%8C%E6%95%B4%E6%80%A7.png" class><p><strong>参照完整性规则</strong>：若属性F是基本关系R的外码，它与基本关系S的主码Ks相对应（基本关系R与S不一定是不同的关系），则对于R中的每个元组在F上的值必须：</p><ul><li>或者空值</li><li>或者等于S中的某个元组的主码值</li><li>空值</li><li>非空值，则该值必须是专业关系元组的“专业号”</li></ul><h2 id="用户定义的完整性"><a href="#用户定义的完整性" class="headerlink" title="用户定义的完整性"></a>用户定义的完整性</h2><p>针对某一具体关系数据库的约束条件，反应某一具体应用涉及的数据必须满足的语义要求</p><h1 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h1><p>关系代数使用对关系的运算来表达查询<br><img src="/2022/05/06/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0.png" class><br>传统的集合运算：并，差，交，笛卡尔积</p><h2 id="专门的关系运算"><a href="#专门的关系运算" class="headerlink" title="专门的关系运算"></a>专门的关系运算</h2><p>选择:返回输入关系中满足谓词的行<br>投影：对输入关系的所有行输出指定的属性<br>连接：从两个输入关系中输出这样的·1元组对：它们在具有相同名字的所有属性上取值相同<br>笛卡尔族：从两个输入关系中输出所有的元组对（无论它们在共同属性上的取值是否相同）<br>并：输出两个关系中元组的并</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>绪论</title>
    <link href="/2022/05/06/%E7%BB%AA%E8%AE%BA/"/>
    <url>/2022/05/06/%E7%BB%AA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><h2 id="两类数据模型"><a href="#两类数据模型" class="headerlink" title="两类数据模型"></a>两类数据模型</h2><p>1、概念模型（信息模型）<br>2、逻辑模型（层次模型、网状模型、关系模型、面向对象数据模型、对象关系数据模型）和物理模型</p><h2 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h2><p>信息世界的基本概念：实体、属性、码、实体型、实体集、联系</p><p>实体之间的联系有一对一，一对多和多对多等多种类型</p><p>概念模型的一种表示方法：实体-联系方法，即E-R方法（模型）</p><h2 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h2><p>数据结构、数据操作、数据的完整性约束条件</p><h2 id="常用的数据模型"><a href="#常用的数据模型" class="headerlink" title="常用的数据模型"></a>常用的数据模型</h2><ul><li>层次模型</li><li>网状模型</li><li>关系模型</li><li>面向对象数据模型</li><li>对象关系数据模型</li><li>半结构化数据模型</li></ul><p><strong>基本层次联系</strong>是指两个记录以及它们之间的一对多（包括一对一）的联系</p><h2 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h2><p>两个条件：</p><ul><li>有且只有一个节点没有双亲结点，这个节点成为根节点</li><li>根以外的其他节点有且只有一个双亲节点</li></ul><p>层次模型中，每个节点表示一个记录类型，记录类型之间的联系用节点之间的连线表示，这种联系时父子之间一对多的联系</p><p><strong>层次数据库</strong>只能处理一对多的实体联系</p><p>层次模型像一棵倒立的树，节点的双亲是唯一的<br><img src="/2022/05/06/%E7%BB%AA%E8%AE%BA/%E5%B1%82%E6%AC%A1%E6%A8%A1%E5%9E%8B.png" class><br>层次模型优缺点：<br>优点：</p><ul><li>数据结构简单清晰</li><li>查询效率高</li><li>提供了良好的完整性支持</li></ul><p>缺点：</p><ul><li>多对多关系不适合</li><li>如果一个节点具有多个双亲节点，用层次模型很笨拙</li><li>查询子女节点必须通过双亲结点</li><li>层次命令趋于程序化</li></ul><h2 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h2><p>数据结构： </p><ul><li>允许一个以上的节点无双亲</li><li>一个节点可以有多于一个的双亲</li></ul><p>网状模型中子女节点与双亲节点的联系不唯一<br>优点：</p><ul><li>更为直接描述现实世界</li><li>性能好</li></ul><p>缺点：</p><ul><li>结构复杂</li><li>网状模型的DDL、DML复杂</li><li>用户必须了解系统结构的细节，家中编写应用程序的负担</li></ul><h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><p>关系模型要求关系必须是规范化的，关系的每个分量必须是一个不可分的数据项，不允许表中还有表<br>优点：</p><ul><li>建立在严格的数学概念的基础上</li><li>概念单一，用户易懂</li><li>更高的数据独立性、更好的安全保密型，简化开发工作</li></ul><p>缺点： 存储路径对用户是隐蔽的，查询效率不如格式化数据库</p><h1 id="数据库结构系统"><a href="#数据库结构系统" class="headerlink" title="数据库结构系统"></a>数据库结构系统</h1><p>模式是数据库中全体数据的逻辑结构和特征的描述。模式的一个具体值称为模式的一个实例<br>模式是相对稳定的，而实例是相对变动的</p><h2 id="数据库系统的三级模式结构"><a href="#数据库系统的三级模式结构" class="headerlink" title="数据库系统的三级模式结构"></a>数据库系统的三级模式结构</h2><img src="/2022/05/06/%E7%BB%AA%E8%AE%BA/%E4%B8%89%E7%BA%A7%E6%A8%A1%E5%BC%8F.png" class><p><strong>模式</strong>：数据库全体数据的逻辑结构和特征的描述，所有用户的公共数据视图，DDL严格定义模式</p><p><strong>外模式</strong>：也称子模式，用户模式，它是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，数据库用户的数据视图，与某一应用有关的数据的逻辑表示<br>一个数据库可以有多个外模式，但一个应用程序只能使用一个外模式<br>外模式DDL严格定义外模式</p><p><strong>内模式</strong>：也称存储模式，一个数据库只有一个内模式。是数据物理结构和存储方式的描述，是数据再数据库内部的组织方式</p><h2 id="数据库系统的二级映像功能和数据独立性"><a href="#数据库系统的二级映像功能和数据独立性" class="headerlink" title="数据库系统的二级映像功能和数据独立性"></a>数据库系统的二级映像功能和数据独立性</h2><p><strong>外模式/模式映像</strong>：当模式改变时，由数据库管理员对各个外模式/模式的映像作相应的改变，可以使外模式保持不变。应用程序时根据数据的外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性<br><strong>模式/内模式映像</strong>：模式/内模式唯一<br>数据库存储结构改变时，由数据库管理员对模式/内模式映像作相应改变，可以使模式保持不变，从而应用程序也不必改变。保证了数据与程序的物理独立性，简称数据的物理独立性</p><h1 id="数据库系统的组成"><a href="#数据库系统的组成" class="headerlink" title="数据库系统的组成"></a>数据库系统的组成</h1><img src="/2022/05/06/%E7%BB%AA%E8%AE%BA/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90.png" class>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>应用层</title>
    <link href="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <url>/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="应用层协议原理"><a href="#应用层协议原理" class="headerlink" title="应用层协议原理"></a>应用层协议原理</h1><h4 id="应用程序体系结构"><a href="#应用程序体系结构" class="headerlink" title="应用程序体系结构"></a>应用程序体系结构</h4><p>由应用程序研发者决定，使用如客户-服务器体系结构(C/S模式)，P2P体系结构等<br>各个结构的缺点：</p><ul><li>C/S模式的可扩展性比较差，用户达到一定阈值会断崖式下降，可靠性也比较差</li><li>P2P管理困难</li></ul><h4 id="分布式进程需要解决的问题："><a href="#分布式进程需要解决的问题：" class="headerlink" title="分布式进程需要解决的问题："></a>分布式进程需要解决的问题：</h4><ol><li>进程标示和寻址问题(服务用户)</li><li>传输层-应用层提供服务是如何(服务)<ul><li>位置：层间界面的SAP(TCP/IP:socket)</li><li>形式：应用程序接口API(TCP/IP:socket API)</li></ul></li><li>如何使用传输层提供的服务、实现进程间报文的交换，实现应用(用户使用服务)</li></ol><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ol><li>对进程进行编址：引入端口号</li><li>传输层提供的服务：需要穿过层间的信息<ul><li>层间接口必须要携带的的信息：要传输的报文(SDU)、应用进程的标示(IP+TCP或UDP端口)、对方的应用程序的标示(IP+TCP或UDP端口)</li><li>传输层实体根据这些信息进行TCP报文段/UDP数据段的封装</li></ul></li><li><ul><li>定义应用层协议：报文格式，解释，时序等</li><li>编制程序，使用OS提供的API，调用网络基础设施提供通信服务传报文，实现应用时序</li></ul></li></ol><h4 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h4><p>客户、服务器<br>进程之间通过一个称为<strong>套接字</strong>的软件接口向网络发送报文和从网络接受报文。套接字也被称为<strong>应用程序编程接口</strong>。<br>标识进程需要定义两种信息：主机地址+目的主机中接受进程的标识符。标识符，IP地址＋端口号<br><strong>TCP socket返回一个整数，代表一个四元组，是本地标示</strong><br><strong>UDP socket返回整数，代表本地IP和端口的二元组，但是在发送时，必须指定对方的IP和udp端口</strong><br>优点：便于管理、穿过层间的信息量最少</p><h4 id="可供应用程序使用的运输服务"><a href="#可供应用程序使用的运输服务" class="headerlink" title="可供应用程序使用的运输服务"></a>可供应用程序使用的运输服务</h4><p>运输层协议为调用它的应用程序提供四个方面的服务：</p><ul><li>可靠数据传输</li><li>吞吐量</li><li>定时</li><li>安全性<br>可用吞吐量是指发送进程能够向接收进程交付比特的速率<h4 id="因特网提供的运输服务"><a href="#因特网提供的运输服务" class="headerlink" title="因特网提供的运输服务"></a>因特网提供的运输服务</h4><strong>tcp服务</strong>模型包括面向连接服务和可靠数据传输服务，还拥有拥塞控制机制<br><strong>udp服务</strong>实现简单、无头部开销，仅提供最小服务<br>目前因特网没有提供吞吐量和定时的保证<h4 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h4>应用层协议定义：</li><li>交换报文的类型</li><li>各种报文类型的语法</li><li>字段的语义</li><li>确定一个进程何时以及如何发送报文</li></ul><p>注：应用层协议只是网络应用的一部分。<br>web协议是http，电子邮件协议是SMTP</p><h1 id="Web和HTTP"><a href="#Web和HTTP" class="headerlink" title="Web和HTTP"></a>Web和HTTP</h1><h4 id="HTTP概况"><a href="#HTTP概况" class="headerlink" title="HTTP概况"></a>HTTP概况</h4><p>WEB页面由对象组成<br>HTML基本文件通过URL地址引用页面中的其他对象，URL由两部分组成：存放对象的服务器主机名和对象的路径名<br>http使用TCP作为它的支撑运输协议，一个客户进程发送的每个HTTP请求报文都能最终完整地到达服务器，服务器进程发出的每个响应报文都能最终完整地到达客户<br>HTTP是<strong>无状态协议</strong>，不保存任何客户的信息</p><h4 id="非持续连接和持续连接"><a href="#非持续连接和持续连接" class="headerlink" title="非持续连接和持续连接"></a>非持续连接和持续连接</h4><p>非持续连接：每个请求/响应都通过单独的TCP连接发送<br>持续连接：所有的请求和响应都经过相同的TCP连接发送<br>默认情况下使用持续连接</p><h5 id="采用非持续连接的HTTP"><a href="#采用非持续连接的HTTP" class="headerlink" title="采用非持续连接的HTTP"></a>采用非持续连接的HTTP</h5><p>如果客户向服务器访问含有11个对象的网页（1个html基本文件和10个jpeg图像），需要建立11次连接<br>往返时间RTT：一个小的分组从客户端到服务器，再回到客户端的时间(传输时间忽略不计)。包括分组传播时延、分组在中间路由器和交换机上的排队时延以及分组处理的时延。<br>用户点击某超链接时，总的响应时间就是两个RTT（一个RTT用于建立连接，另一个用于请求和接受对象）加上服务器传输html文件的时间</p><h5 id="采用持续连接的TCP"><a href="#采用持续连接的TCP" class="headerlink" title="采用持续连接的TCP"></a>采用持续连接的TCP</h5><p>服务器在发送响应后保持该TCP连接打开，若长时间未使用，HTTP服务器就关闭该连接<br>使用流水线的方式</p><h4 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h4><img src="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E5%92%8C%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png" class><h5 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h5><p>get方法：请求一个对象<br>post方法：提交表单<br>head方法：类似于get方法但是不返回请求对象，常用于调试跟踪<br>put方法：允许用户上传对象到指定的web服务器上的指定的路径<br>delete方法：允许用户或应用程序删除web服务器上的对象</p><h5 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h5><p>常见的状态码和相关短语：</p><ul><li>200 OK：请求成功，信息返回在响应报文中</li><li>301 Moved Permanently：请求的对象已经被永久转移了，新的url定义在响应报文的location：首部行中。客户软件将自动获取新的url</li><li>400 Bad Request：一个通用的差错代码，指示该请求不能被服务器理解。</li><li>404 Not Found：被请求的文档不在服务器上</li><li>505 HTTP Version Not Supported：服务器不支持请求报文使用的http协议版本</li></ul><h4 id="用户和服务器的交互：cookie"><a href="#用户和服务器的交互：cookie" class="headerlink" title="用户和服务器的交互：cookie"></a>用户和服务器的交互：cookie</h4><p>4个组件</p><ul><li>在HTTP响应报文中的一个cookie首部行</li><li>在HTTP请求报文中的一个cookie首部行</li><li>在用户端系统中保留一个cookie文件，并由用户浏览器进行管理</li><li>位于web站点的一个后端数据库</li></ul><h4 id="web缓存（代理服务器）"><a href="#web缓存（代理服务器）" class="headerlink" title="web缓存（代理服务器）"></a>web缓存（代理服务器）</h4><p>web缓存服务器既是服务器又是客户。<br>自己的理解：当用户访问某web站点时，浏览器创建与缓存服务器的TCP连接，然后在缓存服务器中寻找是否有该对象，若有，则发送响应报文返回；若没有，则与创建该对象的初始服务器建立一条TCP连接，发送请求报文，初始服务器返回响应报文，然后web缓存器接受到该对象，在本地存储区建立副本，然后通过响应报文将对象返回给用户。</p><h4 id="条件GET方法"><a href="#条件GET方法" class="headerlink" title="条件GET方法"></a>条件GET方法</h4><p>如果请求报文中使用GET方法，并且请求报文中包含一个”If-modified-Since”首部行，那么这个HTTP请求报文就是一个条件GET请求报文<br>如果客户再次访问该对象（代理服务器已保存），代理服务器向初始服务器使用一个条件GET方法，如果”If-modified-Since”的值等于最后一次服务器发送的响应报文中的Last-Modified:首部行的值，那么服务器的响应报文没有想要请求的对象（避免浪费带宽）</p><h1 id="FTP-文件传输协议"><a href="#FTP-文件传输协议" class="headerlink" title="FTP 文件传输协议"></a>FTP 文件传输协议</h1><p>客户端上载文件到服务器，也可以把服务器相应目录下的文件下载到本地<br>一开始是控制连接：FTP守候的端口TCP：21，等待FTP客户端的连接请求；<br>然后身份认证，客户端向服务端发出一系列命令<br><strong>数据传输是通过另一个TCP上进行的</strong><br>FTP是一个<strong>有状态的</strong>协议</p><h1 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h1><p>因特网电子邮件的三个主要组成部分：<strong>用户代理(如outlook)</strong>，<strong>邮件服务器</strong>，<strong>简单邮件传输协议(SMTP)</strong><br>一个典型的发送邮件的过程：从发送方的用户代理开始，传输到发送方的邮件服务器，在传输到接收方的邮件服务器，然后在这里被分发到接收方的邮箱中。<br>SMTP使用TCP可靠数据传输服务，既是客户端也是服务端</p><h4 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h4><img src="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/SMTP.png" class><p>服务器守候在25号端口，等待客户端建立连接<br>分三个阶段：握手，传报文，关闭。</p><h4 id="与http的对比"><a href="#与http的对比" class="headerlink" title="与http的对比"></a>与http的对比</h4><ul><li>HTTP协议采用<strong>拉协议</strong>，某些人在web服务器上装载信息，用户使用HTTP服务器从该服务器上拉取这些信息。TCP连接时由这些想要接收文件的机器发起的<br>；SMTP基本上是<strong>推协议</strong>，发送邮件的服务器把文件推向接收邮件的服务器，这个TCP连接是要发送该文件的机器发起的</li><li>SMTP要求每个报文采用7比特的ASCLL码格式，如果某报文使用非7比特的ASCLL码或者使用二进制，则报文必须按7比特ASCLL码进行编码；HTTP不受这种限制</li><li><strong>HTTP把每个对象封装到它自己的HTTP响应报文中，而SMTP把所有报文对象放在一个报文之中</strong></li></ul><h4 id="邮件报文格式"><a href="#邮件报文格式" class="headerlink" title="邮件报文格式"></a>邮件报文格式</h4><p>每个首部必须含有一个From：首部行和一个To：首部行；可能含有subject：首部行以及其他可选的首部行。报文首部之后，紧跟一个空白行。然后是以ASCLL表示的报文体</p><h4 id="邮件访问协议"><a href="#邮件访问协议" class="headerlink" title="邮件访问协议"></a>邮件访问协议</h4><p>用户代理没办法到达一个不可达的目的地接收服务器。<br>接收方的用户代理，通过<strong>第三版的邮局协议(POP3)</strong>、<strong>因特网邮件访问协议(IMAP)以及HTTP</strong>“拉取”邮件服务器上的报文传给它的本地PC</p><h5 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h5><p>协议简单，功能有限<br>三个阶段：</p><ul><li><strong>特许</strong>：两个主要命令 user &lt; user name &gt;和pass &lt; password &gt;用户代理以明文形式发送用户名和口令以鉴别用户</li><li><strong>事务处理</strong>：用户代理取回报文；同时，还可以：对报文做删除标记，取消报文的删除标记，获取邮件的统计信息</li><li><strong>更新</strong>：出现在客户发出quit命令之后，目的是结束POP3会话；这时，邮件服务器删除那些被标记为删除的报文</li></ul><p>服务器对命令做出的回答有两种，+OK和-ERR</p><h5 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h5><p>IMAP服务器把每个报文和一个文件夹联系起来，允许用文件夹组织消息<br>IMAP服务器维护了IMAP会话的用户状态信息</p><h4 id="基于WEB的电子邮件"><a href="#基于WEB的电子邮件" class="headerlink" title="基于WEB的电子邮件"></a>基于WEB的电子邮件</h4><p>用户代理就成了浏览器。</p><h1 id="DNS：因特网的目录式服务"><a href="#DNS：因特网的目录式服务" class="headerlink" title="DNS：因特网的目录式服务"></a>DNS：因特网的目录式服务</h1><p>将主机名转化为IP地址</p><h4 id="DNS提供的服务"><a href="#DNS提供的服务" class="headerlink" title="DNS提供的服务"></a>DNS提供的服务</h4><p>DNS是</p><ul><li>一个由分层的DNS服务器实现的分布式数据库</li><li>一个使主机能够查询分布式数据库的应用层协议</li></ul><p><strong>DNS运行在UDP之上，使用53号端口</strong><br>除此之外，还提供</p><ul><li>主机别名</li><li>邮件服务器别名</li><li>负载分配<h5 id="分布式、层级数据库"><a href="#分布式、层级数据库" class="headerlink" title="分布式、层级数据库"></a>分布式、层级数据库</h5>主机域名到ip地址之间的映射分布在DNS服务器上，有三种DNS服务器：根DNS服务器，顶级域DNS服务器和权威DNS服务器，他们中的前者为后者提供IP地址<br>本地DNS服务器不属于层级结构中，通常主机向本地DNS服务器查询属于递归查询(逐级返回IP地址)，而其他查询属于迭代查询(本地DNS服务器一直问问问)<h5 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h5>当某DNS服务器接受某DNS回答时，能将映射缓存到本地存储器中，即使它不是主机名的权威服务器，它也能提供IP地址，但缓存不是永久的<h4 id="DNS记录和报文"><a href="#DNS记录和报文" class="headerlink" title="DNS记录和报文"></a>DNS记录和报文</h4><h5 id="资源记录"><a href="#资源记录" class="headerlink" title="资源记录"></a>资源记录</h5>(Name , Value , Type , TTL)<br>TTL是该记录的生存时间，TTL维护权威记录就是无限大，而维护缓存记录就是有限值<br>Name和Value的值取决于Type：</li><li>“<strong>Type=A</strong>“，则Name是主机名，Value是该主机名对应的IP地址，一条A类型的资源记录提供了标准的主机名到IP地址的映射</li><li>“<strong>Type=NS</strong>“，则Name是个域，Value是个知道如何获得该域中主机IP地址的权威DNS服务器的主机名</li><li>“<strong>Type=CNAME</strong>“，则Value是个别名为Name的主机对应的规范主机名</li><li>“<strong>Type=MX</strong>“，Value是个别名为Name的邮件服务器的规范主机名</li></ul><h5 id="dns报文格式"><a href="#dns报文格式" class="headerlink" title="dns报文格式"></a>dns报文格式</h5><img src="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/dns.png" class><h1 id="P2P应用"><a href="#P2P应用" class="headerlink" title="P2P应用"></a>P2P应用</h1><h4 id="BitTorrent"><a href="#BitTorrent" class="headerlink" title="BitTorrent"></a>BitTorrent</h4><p>参与一个特定的文件分发的所有对等方的集合被称为一个<strong>洪流</strong>。在一个洪流中的对等方彼此下载等长度的<strong>文件块</strong>，典型的块长度为256KB。<br>每个洪流都以一个基础设施节点：<strong>追踪器</strong>，每个对等方加入洪流时，向追踪器注册自己，并且周期性地通知追踪器它仍在该洪流中。<br>一个新的对等方加入该洪流时，追踪器随机地从参与对等方地集合中选择对等方的一个子集<br><strong>最稀缺优先</strong>：解决<strong>某对等方应该从它的另据请求哪些块，应当向哪些向它请求的邻居发送块</strong>的问题。思路：</p><ul><li>针对它没有的块在它的邻居中最稀缺的块，并首先请求那些最稀缺的块。</li><li>对换算法：对等方能够趋向于找到彼此的协调的速率上载。(具体实现机制略)</li></ul><h1 id="视频流和内容分发网"><a href="#视频流和内容分发网" class="headerlink" title="视频流和内容分发网"></a>视频流和内容分发网</h1><h2 id="因特网视频"><a href="#因特网视频" class="headerlink" title="因特网视频"></a>因特网视频</h2><p>流视频的最为重要的性能度量：平均端到端的吞吐量</p><h2 id="HTTP和DASH"><a href="#HTTP和DASH" class="headerlink" title="HTTP和DASH"></a>HTTP和DASH</h2><p><strong>DASH</strong>：经HTTP的动态适应流<br>视频编码为几个不同的版本，每个版本具有不同的比特率，对应于不同的质量水平。客户动态地请求来自不同版本且长度为几秒的视频段数据块。当可用带宽较高时，客户自然的选择来自高速率版本的块；较低时同理。</p><p>DASH允许用户使用不同的以太网接入速率流式播放具有不同编码速率的视频。</p><p>使用DASH后，每个视频版本存储在HTTP服务器中，每个版本都有不同的URL。<br>HTTP服务器有<strong>告示文件</strong>，为每个版本提供了一个URL及其比特率<br>客户首先请求该告示文件并得知各种各样的版本。然后客户通过在HTTP GET请求报文中对每块指定一个URL和一个字节范围，一次选择一块。在下载块的同时，客户也测量接收带宽并运行一个<strong>速率决定算法</strong>来选择下次请求的块</p><h2 id="内容分发网CDN"><a href="#内容分发网CDN" class="headerlink" title="内容分发网CDN"></a>内容分发网CDN</h2><p>CDN管理分布在多个地理位置上的服务器，在它的服务器中存储视频的副本，并且所有试图将每个用户请求定向到一个将提供最好的用户体验的CDN位置<br>CDN可以是</p><ul><li>专用CDN，由内容提供商自己所拥有</li><li>第三方CDN，代表多个内容提供商分发内容</li></ul><p>CDN采用两种不同的服务器安置原则：</p><ul><li>深入：通过在遍及全球的接入ISP中部署服务器集群来深入到ISP的接入网中</li><li>邀请做客：通过在少量关键位置建造大集群来邀请到ISP做客，这些CDN通常将它们的集群放置在因特网交换点(IXP)。</li></ul><p>CDN没有将视频推入它们的集群中，而是采取<strong>拉策略</strong>：如果客户向一个未存储该视频的集群请求某视频，则该集群检索该视频，向客户流式传输视频的同时在本地存储一个副本。类似因特网缓存，当某集群存储器变满时，它删除不经常请求的视频</p><h3 id="CDN操作"><a href="#CDN操作" class="headerlink" title="CDN操作"></a>CDN操作</h3><p>用户浏览器指令检索一个特定的视频，CDN必须截获该请求，以便能够：</p><ul><li>确定此时适合用于该客户的CDN服务器集群</li><li>将客户的请求重定向到该集群的某台服务器.</li></ul><img src="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/%E6%88%AA%E8%8E%B7%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91.png" class><h3 id="集群选择策略"><a href="#集群选择策略" class="headerlink" title="集群选择策略"></a>集群选择策略</h3><ul><li>地理上最为临近：这种简单的策略忽略了时延和可用带宽随因特网路径时间而变化，总是为特定的客户指派相同的集群</li><li>实时测量：CDN能苟对其集群和客户之间的时延和丢包性能执行周期性的实时测量。</li></ul><h1 id="套接字编程"><a href="#套接字编程" class="headerlink" title="套接字编程"></a>套接字编程</h1><p>网络应用程序有两类：</p><ul><li>由协议标准中所定义的操作的实现：定义其操作的这些规则周知，客户程序和服务器程序必须遵守该RFC所规定的规则</li><li>专用的网络应用程序：这些代码并没有实现一个开放的协议，其他独立的开发者将不能开发出和该应用程序交互的代码</li></ul><p>使用python：</p><h2 id="UDP套接字"><a href="#UDP套接字" class="headerlink" title="UDP套接字"></a>UDP套接字</h2><img src="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/UDP.png" class><h3 id="UDPClient-py"><a href="#UDPClient-py" class="headerlink" title="UDPClient.py"></a>UDPClient.py</h3><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>导包<br>from socket import *<br><span class="hljs-regexp">//</span>设置变量<br>serverName=<span class="hljs-string">&#x27;hostname&#x27;</span><br>serverPort=<span class="hljs-number">12000</span><br><span class="hljs-regexp">//</span>创建客户套接字，AF_INET：使用IPv4，SOCK_DGRAM：使用UDP协议<br>clientSocket=socket(<span class="hljs-string">&#x27;Input lowercase sentence:&#x27;</span>)<br>message=raw_input(<span class="hljs-string">&#x27;Input lowercase sentence:&#x27;</span>)<br><span class="hljs-regexp">//</span>将报文由字符串类型转换为字节类型，方法 sendto () 为报文附上目的地址( serverName , serverPort ) 并且向进程的套接字 clientSocket 发送结果分组 <br>clientSocket,sendto(message.encode(),(serverName,serverPort))<br><span class="hljs-regexp">//</span>分组的数据放到modifiedMessage中，源地址放到serverAddress中<br>modifiedMessage,serverAddress=clientSocket.recvfrom(<span class="hljs-number">2048</span>)<br><span class="hljs-regexp">//</span>向屏幕打印<br>print(modifiedMessage.decode())<br><span class="hljs-regexp">//</span>关闭套接字，然后关闭进程<br>clientSocket.close()<br><br></code></pre></td></tr></table></figure><p>当创建套接字时,我们并没有指定客户套接字的端口号;相反,我们让操作系统为我们做这件事.</p><h3 id="UDPserver-py"><a href="#UDPserver-py" class="headerlink" title="UDPserver.py"></a>UDPserver.py</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>导包<br>from socket import *<br><span class="hljs-regexp">//</span>同上<br>serverPort=<span class="hljs-number">12000</span><br>serverSocket=socket(AF_INET,SOCK_DGRAM)<br><span class="hljs-regexp">//</span>将端口号<span class="hljs-number">12000</span>与该服务器的套接字绑定<br>serverSocket.bind(<span class="hljs-string">&#x27;&#x27;</span>,serverPort)<br>print(<span class="hljs-string">&quot;The server is ready to receive&quot;</span>)<br><span class="hljs-keyword">while</span> true:<br>    <span class="hljs-regexp">//</span>保存变量<br>    message,clientAddress=serverSocket.recvfrom(<span class="hljs-number">2048</span>)<br>    <span class="hljs-regexp">//</span>小写转大写<br>    modifiedMessage=message.decode.upper()<br>    <span class="hljs-regexp">//</span>将客户的地址附到大写的报文上，并将所得的分组发送到服务器的套接字中<br>    serverSocket.sendto(modifiedMessage.encode(),clientAddress)<br></code></pre></td></tr></table></figure><p>将端口号与套接字绑定：当任何人向位于该服务器的IP地址的端口12000发送一个分组，该分组将导向该套接字</p><h2 id="TCP套接字"><a href="#TCP套接字" class="headerlink" title="TCP套接字"></a>TCP套接字</h2><p>欢迎套接字和连接套接字<br>客户套接字和服务器连接套接字直接通过一根管道连接<br><img src="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/TCP.png" class></p><img src="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/TCP1.png" class><h3 id="TCPClient-py"><a href="#TCPClient-py" class="headerlink" title="TCPClient.py"></a>TCPClient.py</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">//导包</span><br>from socket import *<br><span class="hljs-comment">//设置变量</span><br>serverName=&#x27;servername&#x27;<br>serverPort=12000<br><span class="hljs-comment">//创建客户套接字</span><br>clientSocket=socket(AF_INET,SOCK_STREAM)<br><span class="hljs-comment">//创建TCP连接</span><br>clientSocket.connect((serverName,serverPort))<br><span class="hljs-comment">//获得句子</span><br>sentence=raw_input(&#x27;<span class="hljs-keyword">input</span> lowercase sentence)<br><span class="hljs-comment">//发送句子,encode方法转字节类型</span><br>clientSocket.send(sentence.<span class="hljs-keyword">encode</span>())<br><span class="hljs-comment">//字符到达服务器时，它们被放置在字符串modifiedSentence中</span><br>modifiedSentence=clientSocket.recv(1024)<br><span class="hljs-keyword">print</span>(&#x27;From Server:&#x27;,modifiedSentence.<span class="hljs-keyword">decode</span>())<br><span class="hljs-comment">//关闭套接字</span><br>clientSocket.<span class="hljs-keyword">close</span>()<br></code></pre></td></tr></table></figure><h3 id="TCPServer-py"><a href="#TCPServer-py" class="headerlink" title="TCPServer.py"></a>TCPServer.py</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk">from socket import *<br>serverPort=<span class="hljs-number">12000</span><br><span class="hljs-regexp">//</span>创建服务端套接字<br>serverSocket=socket(AF_INET,SOCK_STREAM)<br><span class="hljs-regexp">//</span>服务器端口与与该套接字关联<br>serverSocket.bind((<span class="hljs-string">&#x27;&#x27;</span>,serverPort))<br><span class="hljs-regexp">//</span>等待某客户敲门<br>serverSocket.listen(<span class="hljs-number">1</span>)<br>print(<span class="hljs-string">&#x27;The server is ready to receive&#x27;</span>)<br><span class="hljs-keyword">while</span> True:<br>    <span class="hljs-regexp">//</span>创建一个新的套接字，由这个特定的客户专用<br>    connectionSocket,addr=serverSocket.accept()<br>    <span class="hljs-regexp">//</span>将二进制解码成字符串<br>    sentence=connectionSocket.recv(<span class="hljs-number">1024</span>).decode()<br>    <span class="hljs-regexp">//</span>转换大小写<br>    capitalizedSentence=sentence.upper()<br>    <span class="hljs-regexp">//</span>将字符串编码省二进制并且发送给客户端<br>    connectionSocket.send(capitalizedSentence.encode())<br>    <span class="hljs-regexp">//</span>关闭套接字<br>    connectionSocket.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022.5.02~2022.5.08</title>
    <link href="/2022/05/02/2022-5-02-2022-5-08/"/>
    <url>/2022/05/02/2022-5-02-2022-5-08/</url>
    
    <content type="html"><![CDATA[<h4 id="力扣150-逆波兰表达式求值"><a href="#力扣150-逆波兰表达式求值" class="headerlink" title="力扣150. 逆波兰表达式求值"></a><a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/">力扣150</a>. 逆波兰表达式求值</h4><p>心得：创建栈的时候直接创建int型，不要创建string型。用stoi()可以将字符串转化为整形。</p><h4 id="力扣239-滑动窗口的最大值"><a href="#力扣239-滑动窗口的最大值" class="headerlink" title="力扣239.滑动窗口的最大值"></a><a href="https://leetcode-cn.com/problems/sliding-window-maximum/">力扣239</a>.滑动窗口的最大值</h4><p>主要思想：队列没有必要维护窗口里的所有元素，只需要维护<strong>有可能成为窗口里最大值的元素</strong>就可以了，同时保证队列里的元素数值是<strong>由大到小</strong>的。<br>使用单调队列：<br>每次添加元素，都要确保队列入口处的元素要小于该元素。<br>每次删除元素，都要确保队列出口处元素等于该元素，否则不弹出元素<br>这样就能保证每次队列最前端的元素就是该队列元素的最大值<br>每次将que.front()添加到result中即可<br><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyQueue</span> &#123; <span class="hljs-comment">//单调队列（从大到小）</span><br><span class="hljs-keyword">public</span>:<br>    deque&lt;<span class="hljs-type">int</span>&gt; que; <span class="hljs-comment">// 使用deque来实现单调队列</span><br>    <span class="hljs-comment">// 每次弹出的时候，比较当前要弹出的数值是否等于队列出口元素的数值，如果相等则弹出。</span><br>    <span class="hljs-comment">// 同时pop之前判断队列当前是否为空。</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!que.<span class="hljs-built_in">empty</span>() &amp;&amp; value == que.<span class="hljs-built_in">front</span>()) &#123;<br>            que.<span class="hljs-built_in">pop_front</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 如果push的数值大于入口元素的数值，那么就将队列后端的数值弹出，直到push的数值小于等于队列入口元素的数值为止。</span><br>    <span class="hljs-comment">// 这样就保持了队列里的数值是单调从大到小的了。</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>() &amp;&amp; value &gt; que.<span class="hljs-built_in">back</span>()) &#123;<br>            que.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>        que.<span class="hljs-built_in">push_back</span>(value);<br><br>    &#125;<br>    <span class="hljs-comment">// 查询当前队列里的最大值 直接返回队列前端也就是front就可以了。</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">front</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> que.<span class="hljs-built_in">front</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></p><h4 id="力扣347-前k个高频元素"><a href="#力扣347-前k个高频元素" class="headerlink" title="力扣347.前k个高频元素"></a><a href="https://leetcode-cn.com/problems/top-k-frequent-elements/">力扣347</a>.前k个高频元素</h4><p>使用到了优先队列<br>priority_queue&lt;数据类型，容器类型，functional&gt;<br>容器类型只能选择vector、map，不能使用list。<br>当需要使用自定义数据类型时才需要传入三个参数，默认为大顶堆<br>此题需要使用小顶堆，只有当弹出的元素是最小的时候，才能保留k个最大的元素<br>此外，还需要重写()，当传入pirority_queue的第三个参数：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">mycomparison</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&amp;lhs,<span class="hljs-type">const</span> pair &lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&amp;rhs)</span></span>&#123;<br>            <span class="hljs-keyword">return</span> lhs.second&gt;rhs.second;<br>        &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></p><h4 id="力扣513-找树左下角的值"><a href="#力扣513-找树左下角的值" class="headerlink" title="力扣513.找树左下角的值"></a><a href="https://leetcode-cn.com/problems/find-bottom-left-tree-value/submissions/">力扣513</a>.找树左下角的值</h4><p>层序遍历的话，如何判断是最后一层呢？通过迭代result的值就可以了，最后一个result的值一定是最后一层左下角的值了<br><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-keyword">while</span>(!que.empty())&#123;<br>           int size=que.size();<br>           <span class="hljs-function"><span class="hljs-title">result</span>=que.front()-&gt;</span>val;<br>           <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>               TreeNode* cur=que.front();<br>               que.pop();<br>               <span class="hljs-function"><span class="hljs-title">if</span>(cur-&gt;</span><span class="hljs-function"><span class="hljs-title">left</span>) que.push(cur-&gt;</span>left);<br>               <span class="hljs-function"><span class="hljs-title">if</span>(cur-&gt;</span><span class="hljs-function"><span class="hljs-title">right</span>) que.push(cur-&gt;</span>right);<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><br>递归法的话，求深度使用<strong>前序遍历</strong>，但是不能一直递归到最左边，因为不一定是最下层<br>需要一个类里面定义个最大深度，只有最左边的，最大深度的节点，才是树左下角的节点。每次递归是判断是不是叶子节点，如果是，再判断是不是深度最大的，不断更新最大深度<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">int <span class="hljs-attr">maxlen=</span>INT_MIN;<br>int maxLeftValue;<br>void traversal(TreeNode* <span class="hljs-keyword">node</span><span class="hljs-title">,int</span> leftLen)&#123;<br>    if(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;left</span>==NULL&amp;&amp;<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;right</span>==NULL)&#123;<br>        if(leftLen&gt;maxlen)&#123;<br>            <span class="hljs-attr">maxlen=</span>leftLen;<br>            <span class="hljs-attr">maxLeftValue=</span><span class="hljs-keyword">node</span><span class="hljs-title">-&gt;val</span>;<br>        &#125;<br>        return;<br>    &#125;<br>    if(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;left</span>)&#123;<br>        leftLen++;<br>        traversal(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;left</span>,leftLen);<br>        leftLen--; //回溯<br>    &#125;<br>    if(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;right</span>)&#123;<br>        leftLen++;<br>        traversal(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;right</span>,leftLen);<br>        leftLen--;//回溯<br>    &#125;<br>    return ;<br>&#125;<br></code></pre></td></tr></table></figure><br>那么另外，判断某递归函数返回值是void还是其他，如果是遍历整棵树，返回值是void；遍历某一条路线，必须有返回值</p><h4 id="力扣112-路径总和"><a href="#力扣112-路径总和" class="headerlink" title="力扣112.路径总和"></a><a href="https://leetcode-cn.com/problems/path-sum/submissions/">力扣112</a>.路径总和</h4><p>是否需要返回值，由三点：（搬运）</p><ul><li>如果需要搜索整棵二叉树且<strong>不用处理递归返回值</strong>，递归函数就不要返回值。</li><li>如果需要搜索整棵二叉树且<strong>需要处理递归返回值</strong>，递归函数就需要返回值。 </li><li>如果要搜索其中一条符合条件的路径，那么递归一定需要返回值，因为遇到符合条件的路径了就要及时返回。（本题的情况）</li></ul><p>在算总和方面，不要正向加，而是反向减targetSum，使targetSum=0并且没有左右叶子就是要找的路径<br>递归函数：<br><figure class="highlight plaintext"><figcaption><span>traversal(TreeNode* cur, int count) &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bool">    if (!cur-&gt;left &amp;&amp; !cur-&gt;right &amp;&amp; count == 0) return true; // 遇到叶子节点，并且计数为0<br>    if (!cur-&gt;left &amp;&amp; !cur-&gt;right) return false; // 遇到叶子节点直接返回<br><br>    if (cur-&gt;left) &#123; // 左<br>        count -= cur-&gt;left-&gt;val; // 递归，处理节点;<br>        if (traversal(cur-&gt;left, count)) return true;<br>        count += cur-&gt;left-&gt;val; // 回溯，撤销处理结果<br>    &#125;<br>    if (cur-&gt;right) &#123; // 右<br>        count -= cur-&gt;right-&gt;val; // 递归，处理节点;<br>        if (traversal(cur-&gt;right, count)) return true;<br>        count += cur-&gt;right-&gt;val; // 回溯，撤销处理结果<br>    &#125;<br>    return false;<br>&#125;<br></code></pre></td></tr></table></figure><br>特别特别记住，主函数调用时，还要减去根节点的值</p><p><strong>迭代法</strong>要使用pair&lt; TreeNode*,int&gt;，first记录节点，second记录到目前节点的总和</p><h4 id="力扣113-路径之和II"><a href="#力扣113-路径之和II" class="headerlink" title="力扣113.路径之和II"></a><a href="https://leetcode-cn.com/problems/path-sum-ii/submissions/">力扣113</a>.路径之和II</h4><p>类里面定义一个result用于存储结果，vec存储每一条路径<br>因为此题是遍历整个二叉树，递归函数不能有返回值</p><ul><li>递归终止条件：叶子节点并且targetSum＝0，将vec存入result中</li><li>单层递归逻辑：如果有左右节点，vec加入左右节点，targetSum减去左右节点的值，然后调用递归函数，然后再回溯<br>如果不是空树，先将根节点的值push_back进vec里面，调用traversal时也要减去根节点的值<h4 id="力扣106-从中序与后序遍历构造二叉树"><a href="#力扣106-从中序与后序遍历构造二叉树" class="headerlink" title="力扣106.从中序与后序遍历构造二叉树"></a><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/submissions/">力扣106</a>.从中序与后序遍历构造二叉树</h4>心得：</li><li>首先要熟悉理论基础，用中序和后序遍历构造二叉树</li><li>第一步先构造根节点，选用后序遍历的最后一个</li><li>第二步分割中序遍历数组，我们从中序遍历数组中找到后序遍历的最后一个元素，以它为分界线分割（注意要去除它本身）leftInorder和rightInorder，此时中序遍历数组长度应该-1，后序我们人为resize，因为后序的最后一个元素将是下一层递归的根节点，后序遍历数组长度-1</li><li>第三步分割后序遍历数组，因为每次遍历中序和后序数组长度应该一致，我们利用中序数组长度切割后序遍历数组。</li><li>第四步分别root-&gt;left=traversal(leftInorder,leftPostorder)（右边同理）</li><li>最后返回root</li></ul><p>注意的是，每次切割遵循左闭右开<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//切割中序遍历数组</span><br><span class="hljs-type">int</span> delimiterIndex=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(delimiterIndex=<span class="hljs-number">0</span>;delimiterIndex&lt;inorder.<span class="hljs-built_in">size</span>();delimiterIndex++)&#123;<br>    <span class="hljs-keyword">if</span>(inorder[delimiterIndex]==rootValue) <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//切割后序遍历数组</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">leftInorder</span><span class="hljs-params">(inorder.begin(),inorder.begin()+delimiterIndex)</span></span>;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rightInorder</span><span class="hljs-params">(inorder.begin()+delimiterIndex+<span class="hljs-number">1</span>,inorder.end())</span></span>;<br><br>postorder.<span class="hljs-built_in">resize</span>(postorder.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">leftPostorder</span><span class="hljs-params">(postorder.begin(),postorder.begin()+leftInorder.size())</span></span>;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rightPostorder</span><span class="hljs-params">(postorder.begin()+leftInorder.size(),postorder.end())</span></span>;<br><br>root-&gt;left=<span class="hljs-built_in">traversal</span>(leftInorder,leftPostorder);<br>root-&gt;right=<span class="hljs-built_in">traversal</span>(rightInorder,rightPostorder);<br></code></pre></td></tr></table></figure><br>根据前序和中序构建也同理</p><h4 id="力扣654-最大二叉树"><a href="#力扣654-最大二叉树" class="headerlink" title="力扣654.最大二叉树"></a><a href="https://leetcode-cn.com/problems/maximum-binary-tree/">力扣654</a>.最大二叉树</h4><p>心得：</p><ul><li>首先是使用递归的方法</li><li>我们找出数组中的最大的元素，然后将该值赋给该层递归的根节点，然后分割数组，左右的数组分别进入下一层递归</li><li>maxValueIndex值要大于0，才能让root-&gt;left进入下一层递归，否则，root-&gt;left就是空的，maxValueIndex &lt; nums.size()-1同理，必须保证有元素。</li></ul><h4 id="递归求深度高度这块一直不太清楚"><a href="#递归求深度高度这块一直不太清楚" class="headerlink" title="递归求深度高度这块一直不太清楚"></a>递归求深度高度这块一直不太清楚</h4><p>首先，</p><ul><li>深度：从<strong>根节点</strong>到<strong>该节点</strong>最长简单路径的个数（但是力扣上以节点个数为准）</li><li>高度：从<strong>该节点</strong>到<strong>叶子节点</strong>最长简单路径的个数（但是力扣上以节点个数）为准</li></ul><p>求深度，用前序遍历，求高度，用后序遍历<br>因为求深度可以从上往下去查，用前序（中左右）；求高度得从下往上去查，用后序（左右中）<br>但是求二叉树的最大深度（也就是根节点的最大高度），我们可以使用后序。</p><p>如求高度：<a href="https://leetcode-cn.com/problems/balanced-binary-tree/submissions/">力扣110</a>.平衡二叉树</p><h4 id="力扣617-合并二叉树"><a href="#力扣617-合并二叉树" class="headerlink" title="力扣617.合并二叉树"></a><a href="https://leetcode-cn.com/problems/merge-two-binary-trees/submissions/">力扣617</a>.合并二叉树</h4><p>自己做的时候是想创建两个队列，不管是不是空就放进去，空的话就放一个NULL进去，然后这样做的画很麻烦。<br>作者创建一个队列，</p><ul><li>如果两个节点都不空，将两个数的各自的节点同时放进去</li><li>如果root1节点空，但是root2节点不空，就赋值过去</li><li>如果root1节点不空，但是root2节点空，那就什么都不需要管就好了，最终返回也是返回root1</li></ul><p>此题用递归法比较简单。<br>递归：<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coq">TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) &#123;<br>        <span class="hljs-keyword">if</span>(root1==NULL) <span class="hljs-keyword">return</span> root2;<br>        <span class="hljs-keyword">if</span>(root2==NULL) <span class="hljs-keyword">return</span> root1;<br>        <br>        root1-&gt;val+=root2-&gt;val;<br>        root1-&gt;<span class="hljs-built_in">left</span>=mergeTrees(root1-&gt;<span class="hljs-built_in">left</span>,root2-&gt;<span class="hljs-built_in">left</span>);<br>        root1-&gt;<span class="hljs-built_in">right</span>=mergeTrees(root1-&gt;<span class="hljs-built_in">right</span>,root2-&gt;<span class="hljs-built_in">right</span>);<br><br>        <span class="hljs-keyword">return</span> root1;<br>    &#125;<br></code></pre></td></tr></table></figure></p><h4 id="力扣700-二叉搜索树中的搜索"><a href="#力扣700-二叉搜索树中的搜索" class="headerlink" title="力扣700.二叉搜索树中的搜索"></a><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/">力扣700</a>.二叉搜索树中的搜索</h4><p>二叉搜索树可以使用更简单的迭代方法，不适用辅助队列和辅助栈</p><h2 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录"></a>代码随想录</h2><h4 id="力扣236-二叉树的最近公共祖先"><a href="#力扣236-二叉树的最近公共祖先" class="headerlink" title="力扣236.二叉树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">力扣236</a>.二叉树的最近公共祖先</h4><p>如果递归函数有返回值，如何判断搜索一条边还是一棵树：<br>搜索一条边：<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">if</span> (递归函数(root-&gt;<span class="hljs-built_in">left</span>)) <span class="hljs-keyword">return</span> ;<br><br><span class="hljs-keyword">if</span> (递归函数(root-&gt;<span class="hljs-built_in">right</span>)) <span class="hljs-keyword">return</span> ;<br></code></pre></td></tr></table></figure><br>搜索整棵树：<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-built_in">left</span> = 递归函数(root-&gt;<span class="hljs-built_in">left</span>);<br><span class="hljs-built_in">right</span> = 递归函数(root-&gt;<span class="hljs-built_in">right</span>);<br><span class="hljs-built_in">left</span>与<span class="hljs-built_in">right</span>的逻辑处理;<br></code></pre></td></tr></table></figure><br>如果是搜索一条边，递归函数有返回值时，需要立刻返回；<br>如果时搜索整棵树，需要用left和right接住变量值，再处理逻辑，也是后序遍历中处理中间节点的逻辑(也是回溯)</p><p>判断p和q的最近公共祖先：如果根节点左子树有p(q)，并且右子树有q(p)，则该节点是公共祖先。我们从下往上找，就能找到最近公共祖先。从下往上找，就需要后序遍历(回溯)<br>用left和right接住处理结果，当左右都不空，返回该节点；左空右不空，返回右节点(左节点同理)<br><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coq">TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) &#123;<br>       <span class="hljs-keyword">if</span>(q==root|<span class="hljs-type">|p</span>==root|<span class="hljs-type">|root</span>==NULL) <span class="hljs-keyword">return</span> root;<br>       TreeNode* <span class="hljs-built_in">left</span>=lowestCommonAncestor(root-&gt;<span class="hljs-built_in">left</span>,p,q);<br>       TreeNode* <span class="hljs-built_in">right</span>=lowestCommonAncestor(root-&gt;<span class="hljs-built_in">right</span>,p,q);<br>       <span class="hljs-keyword">if</span>(<span class="hljs-built_in">left</span>!=NULL&amp;&amp;<span class="hljs-built_in">right</span>!=NULL) <span class="hljs-keyword">return</span> root;<br>       <span class="hljs-keyword">if</span>(<span class="hljs-built_in">left</span>!=NULL&amp;&amp;<span class="hljs-built_in">right</span>==NULL) <span class="hljs-keyword">return</span> <span class="hljs-built_in">left</span>;<br>       <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">left</span>==NULL&amp;&amp;<span class="hljs-built_in">right</span>!=NULL) <span class="hljs-keyword">return</span> <span class="hljs-built_in">right</span>;<br>       <span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-keyword">return</span> NULL;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></p><h4 id="力扣235-二叉搜索树的最近公共祖先"><a href="#力扣235-二叉搜索树的最近公共祖先" class="headerlink" title="力扣235.二叉搜索树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/submissions/">力扣235</a>.二叉搜索树的最近公共祖先</h4><p>利用二叉搜索树的性质，当节点的值大于p和q，那么就向左边搜索；反之就向右边搜索。<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">TreeNode* traversal(TreeNode* <span class="hljs-keyword">node</span><span class="hljs-title">,TreeNode</span>* p,TreeNode* q)&#123;<br>        if(<span class="hljs-keyword">node</span><span class="hljs-title">==NULL</span>) return <span class="hljs-keyword">node</span><span class="hljs-title">;</span><br><span class="hljs-title">        if</span>(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;val</span>&gt;p-&gt;val&amp;&amp;<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;val</span>&gt;q-&gt;val)&#123;<br>            TreeNode *<span class="hljs-attr">left=</span>traversal(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;left</span>,p,q);<br>            if(left!=NULL) return left;<br>        &#125;<br>        if(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;val</span><span class="hljs-tag">&lt;p-&gt;</span>val&amp;&amp;<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;val</span><span class="hljs-tag">&lt;q-&gt;</span>val)&#123;<br>            TreeNode* <span class="hljs-attr">right=</span>traversal(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;right</span>,p,q);<br>            if(right!=NULL) return right;<br>        &#125;<br>        return <span class="hljs-keyword">node</span><span class="hljs-title">;</span><br><span class="hljs-title">    &#125;</span><br></code></pre></td></tr></table></figure><br>使用迭代法要定义两个节点，一个是当前的节点，另一个是当前节点的父节点<br>注意二叉搜索树的遍历方式<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">TreeNode* insertIntoBST(TreeNode* root, int val) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-attribute">root</span>==NULL)&#123;<br>            TreeNode* <span class="hljs-attribute">cur</span>=new TreeNode(val);<br>            return cur;<br>        &#125;<br>        TreeNode* <span class="hljs-attribute">parent</span>=root;<br>        TreeNode* <span class="hljs-attribute">cur</span>=root;<br>        <span class="hljs-keyword">while</span>(cur!=<span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-attribute">parent</span>=cur;<br>            <span class="hljs-keyword">if</span>(cur-&gt;val&gt;val) <span class="hljs-attribute">cur</span>=cur-&gt;left;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cur-&gt;val&lt;val) <span class="hljs-attribute">cur</span>=cur-&gt;right;<br>        &#125;<br>        TreeNode *<span class="hljs-attribute">node</span>=new TreeNode(val);<br>        <span class="hljs-keyword">if</span>(val&lt;parent-&gt;val)&#123;<br>            parent-&gt;<span class="hljs-attribute">left</span>=node;<br>        &#125;<span class="hljs-keyword">else</span> parent-&gt;<span class="hljs-attribute">right</span>=node;<br>        return root;<br>    &#125;<br></code></pre></td></tr></table></figure></p><h4 id="力扣450-删除二叉树的节点"><a href="#力扣450-删除二叉树的节点" class="headerlink" title="力扣450.删除二叉树的节点"></a><a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/">力扣450</a>.删除二叉树的节点</h4><p>递归法删除要考虑五种情况：</p><ul><li>没找到要删除的节点，直接返回<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">if(root<span class="hljs-operator">=</span><span class="hljs-operator">=</span>NULL) return root<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li>当左右节点都是空(该节点为叶子节点)，直接删除，返回NULL<figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">if</span>(root-&gt;left==<span class="hljs-keyword">NULL</span><span class="hljs-variable">&amp;&amp;root</span>-&gt;right==<span class="hljs-keyword">NULL</span>)&#123;<br>                <span class="hljs-keyword">delete</span> root;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">NULL</span>;<br>            &#125;<br></code></pre></td></tr></table></figure></li><li>当左节点为空，右节点不空，删除节点，右节点补位<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root-&gt;<span class="hljs-built_in">left</span>==NULL&amp;&amp;root-&gt;<span class="hljs-built_in">right</span>!=NULL)&#123;<br>                TreeNode* retNode=root-&gt;<span class="hljs-built_in">right</span>;<br>                delete root;<br>                <span class="hljs-keyword">return</span> retNode;<br>            &#125;<br></code></pre></td></tr></table></figure></li><li>当右节点为空，左节点不空，删除节点，左节点补位<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root-&gt;<span class="hljs-built_in">right</span>==NULL&amp;&amp;root-&gt;<span class="hljs-built_in">left</span>!=NULL)&#123;<br>                TreeNode* retNode=root-&gt;<span class="hljs-built_in">left</span>;<br>                delete root;<br>                <span class="hljs-keyword">return</span> retNode;<br>            &#125;<br></code></pre></td></tr></table></figure></li><li>左右节点都不空，找到该节点右子树的最左边节点，将要删除的节点的左子树移到最左边节点，作为其左子树，然后删除节点，右子树补位<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">else</span>&#123;<br>                TreeNode* cur=root-&gt;<span class="hljs-built_in">right</span>;<br>                while(cur-&gt;<span class="hljs-built_in">left</span>!=NULL)&#123;<br>                    cur=cur-&gt;<span class="hljs-built_in">left</span>;<br>                &#125;<br>                cur-&gt;<span class="hljs-built_in">left</span>=root-&gt;<span class="hljs-built_in">left</span>;<br>                TreeNode* tmp=root;<br>                root=root-&gt;<span class="hljs-built_in">right</span>;<br>                delete tmp;<br>                <span class="hljs-keyword">return</span> root;<br>            &#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="力扣39-组合总和"><a href="#力扣39-组合总和" class="headerlink" title="力扣39.组合总和"></a><a href="https://leetcode-cn.com/problems/combination-sum/submissions/">力扣39</a>.组合总和</h4><p>这道题元素可以重复取</p><h4 id="力扣40-组合总和II"><a href="#力扣40-组合总和II" class="headerlink" title="力扣40.组合总和II"></a><a href="https://leetcode-cn.com/problems/combination-sum-ii/">力扣40</a>.组合总和II</h4><p>这道题和上题的区别是：</p><ul><li>这道题上的每个数字在每个组合只能使用一次(每次回溯的时候i需要＋1，元素不能重复取)</li><li>本题的candidates中的元素是有重复的，而上题的元素是无重复的</li></ul><p><strong>难点：集合有重复元素，但是不能有重复的组合</strong><br>回溯结构都可以用树状结构表示<br>去重有两种意义，第一种是同一层不能重，即组合不能重复取<br>第二种是同一支不能重，即元素不能重复取<br>那么本题的意思就是组合不能重复取,<strong>树层的去重，要先对数组进行排序</strong></p><p>本题首先要对给的数组进行排序，然后在单层逻辑上增添<br><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">if(i&gt;startIndex&amp;&amp;candidates<span class="hljs-comment">[i]</span>==candidates<span class="hljs-comment">[i-1]</span>) continue;<br></code></pre></td></tr></table></figure><br>避免组合重复</p><h4 id="力扣216-组合总和III"><a href="#力扣216-组合总和III" class="headerlink" title="力扣216.组合总和III"></a><a href="https://leetcode.cn/problems/combination-sum-iii/">力扣216</a>.组合总和III</h4><p>本题与上面两题的区别是多了数组的大小，相对而言感觉还是组合总和II更难一点</p>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
