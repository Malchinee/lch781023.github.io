<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>传输层</title>
    <link href="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/"/>
    <url>/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="概述和传输层服务"><a href="#概述和传输层服务" class="headerlink" title="概述和传输层服务"></a>概述和传输层服务</h1><p>网络层服务：主机到主机的逻辑通信<br>传输层服务：主机中进程到进程的逻辑通信</p><ul><li>依赖于网络层的服务，如延时，带宽</li><li>并对网络层的服务进行增强，如数据丢失、顺序混乱、加密等</li></ul><p>可靠的、保序的传输：TCP</p><ul><li>多路复用，解复用</li><li>拥塞控制</li><li>流量控制</li><li>建立连接</li></ul><p>不可靠的、不保序的传输：UDP</p><ul><li>多路复用、解复用</li><li>没有尽力而为地为IP服务器添加更多的其他的额外的服务</li></ul><p>都不提供的服务：</p><ul><li>延时保证</li><li>带宽保证</li></ul><h1 id="多路复用与多路分解"><a href="#多路复用与多路分解" class="headerlink" title="多路复用与多路分解"></a>多路复用与多路分解</h1><h2 id="接收主机将到达地运输层报文定向到适当的套接字"><a href="#接收主机将到达地运输层报文定向到适当的套接字" class="headerlink" title="接收主机将到达地运输层报文定向到适当的套接字"></a>接收主机将到达地运输层报文定向到适当的套接字</h2><p>每个运输层报文段中具有几个字段<br>在接收端，运输层检查这些字段，表示出接收套接字，进而将报文段定向到该套接字<br><strong>将运输段报文段中的数据交付到正确的套接字地工作成为多路分解</strong></p><p>源主机从不同套接字中收集数据块，并为每个数据块封装上首部信息从而生成报文段，然后将报文段传递到网络层，所有这些工作为<strong>多路复用</strong></p><p><strong>它们在某层的单一协议何时被位于接下来的较高层的多个协议使用有关</strong></p><p><strong>运输层多路复用的要求：</strong></p><ol><li>套接字有唯一标识符</li><li>每个报文段有特殊字段来指示该报文段所要交付到的套接字</li></ol><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AB%AF%E5%8F%A3.png" class><p>上述特殊字段是<strong>源端口号字段</strong>和<strong>目的端口号字段</strong><br>端口号是16比特的数，在0~65535之间。</p><ul><li>0~1023范围的端口号为周知端口号，是受限制的，留给HTTP(80号端口)、FTP(21号端口)等周知的应用层协议来使用</li></ul><h2 id="无连接的多路复用与多路分解"><a href="#无连接的多路复用与多路分解" class="headerlink" title="无连接的多路复用与多路分解"></a>无连接的多路复用与多路分解</h2><ol><li>主机A向主机B发送UDP报文</li><li>主机A的运输层创建一个运输层报文段，包括应用程序数据、目的IP、目的端口号和两个其他值、UDPSocket</li><li>运输层将得到的报文段传递到网络层</li><li>网络层将报文段封装到一个IP数据报并尽力将报文段交付给接收主机</li><li>主机B运输层检查报文段目标端口号，并将报文段交付给该端口号所标识的套接字</li><li>主机B有多个进程，每个进程有自己特定的UDP套接字和相应的端口号，当UDP报文段从网络到达时，主机B检查报文段的目的端口号，将每个报文段定向分解到相应的套接字</li></ol><p><strong>一个UDP套接字时一个二元组：目的主机IP和目的主机端口号</strong></p><p>若两个源主机IP不同，源端口号不同，但是目的主机IP和目的主机端口号相同的UDP报文段，那么这两个报文段就会被定向到相同的目标进程</p><p>UDP报文段源主机IP和源端口号的作用显然<br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AB%AF%E5%8F%A3%E5%8F%8D%E8%BD%AC.png" class></p><h2 id="面向连接的多路复用与多路分解"><a href="#面向连接的多路复用与多路分解" class="headerlink" title="面向连接的多路复用与多路分解"></a>面向连接的多路复用与多路分解</h2><p>与UDP不同，TCP套接字是一个四元组(前面已知)，TCP报文段的四部分必须完全一致才能被定向到一个相同的进程<br><img src="/2022/05/24/%E4%BC%A0%E8%BE%93%E5%B1%82/TCP0.png" class></p><h2 id="Web服务器与TCP"><a href="#Web服务器与TCP" class="headerlink" title="Web服务器与TCP"></a>Web服务器与TCP</h2>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>贪心</title>
    <link href="/2022/05/23/%E8%B4%AA%E5%BF%83/"/>
    <url>/2022/05/23/%E8%B4%AA%E5%BF%83/</url>
    
    <content type="html"><![CDATA[<p>贪心算法没有固定的模板，总的思路就是找到局部最优解从而推出总体最优解，并且找不到反例，就可以用贪心</p><h4 id="力扣55-跳跃游戏"><a href="#力扣55-跳跃游戏" class="headerlink" title="力扣55.跳跃游戏"></a><a href="https://leetcode.cn/problems/jump-game/">力扣55</a>.跳跃游戏</h4><p>局部最优解：每次取最大的跳跃步数，就是取最大的覆盖范围<br>整体最优解：最后得到整体的最大覆盖范围<br>找不到反例，可以用贪心<br>现设一个cover变量，初始化为0；<br>然后遍历可以到达的数组，cover每次取可以最大的覆盖范围，如果cover大于数组长度，返回true</p><h4 id="力扣45-跳跃游戏II"><a href="#力扣45-跳跃游戏II" class="headerlink" title="力扣45.跳跃游戏II"></a><a href="https://leetcode.cn/problems/jump-game-ii/">力扣45</a>.跳跃游戏II</h4><p>本题覆盖范围要设两个变量，一个是当前的最大覆盖范围curDistance，另一个是下一步的最大覆盖范围nextDistance<br>遍历整个数组，更新nextDistance；<br>如果当前curDistance＝i，判断curDistance是否大于数组最大长度，大于，终止；小于，步数+1并且curDistance=nextDistance。</p><h4 id="力扣1005-k次取反后最大化的数组和"><a href="#力扣1005-k次取反后最大化的数组和" class="headerlink" title="力扣1005.k次取反后最大化的数组和"></a><a href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations/">力扣1005</a>.k次取反后最大化的数组和</h4><p>sort函数可以有第三个参数，标示排序的规则<br>本题在类内使用sort函数，需要定义一个排序的函数，必须在函数前加static，因为sort需要传入的是一个普通函数指针，而不是成员函数指针，所以需要在类成员定义前加static</p><p>利用绝对值大小排序，将小于0的值尽可能多的反正，如果k还有剩余<br>这里可以判断k的奇偶，奇的话让最小的值变号即可</p><h4 id="力扣134-加油站"><a href="#力扣134-加油站" class="headerlink" title="力扣134.加油站"></a><a href="https://leetcode.cn/problems/gas-station/">力扣134</a>.加油站</h4><h5 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h5><p>从全局进行选择：</p><ol><li>如果gas的总和小于cost的总和，返回-1；</li><li>rest[ i ]=gas[ i ]-cost[ i ]为一天剩下的油，从0位置开始遍历，如果rest一直大于0，说明油一直没断过，0就是起点</li><li>如果累加的最小值是负数，汽车就要从非0节点出发，从后向前，看哪个节点能把负数填平，哪个节点就是出发节点<figure class="highlight mel"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">int</span> canCompleteCircuit(<span class="hljs-keyword">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; gas, <span class="hljs-keyword">vector</span>&lt;<span class="hljs-keyword">int</span>&gt;&amp; cost) &#123;<br>           <span class="hljs-keyword">int</span> <span class="hljs-keyword">min</span>=INT_MAX;<br>           <span class="hljs-keyword">int</span> curSum=<span class="hljs-number">0</span>;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;gas.<span class="hljs-keyword">size</span>();i++)&#123;<br>               <span class="hljs-keyword">int</span> rest=gas[i]-cost[i];<br>               curSum+=rest;<br>               <span class="hljs-keyword">if</span>(curSum&lt;<span class="hljs-keyword">min</span>)&#123;<br>                   <span class="hljs-keyword">min</span>=curSum;<br>               &#125;<br>           &#125;<br>           <span class="hljs-keyword">if</span>(curSum&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>           <span class="hljs-keyword">if</span>(<span class="hljs-keyword">min</span>&gt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>           <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=gas.<span class="hljs-keyword">size</span>()<span class="hljs-number">-1</span>;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>               <span class="hljs-keyword">int</span> rest=gas[i]-cost[i];<br>               <span class="hljs-keyword">min</span>+=rest;<br>               <span class="hljs-keyword">if</span>(<span class="hljs-keyword">min</span>&gt;=<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> i;<br>           &#125;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h5>贪心算法：<br>每个加油站的剩余量rest[ i ]为gas[i]-cost[i]；i从0开始累加rest[i]，和记为curSum，一旦curSum&lt;0说明[0, i]都不能作为起始位置，起始位置从i+1算起，再从0累加curSum<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> canCompleteCircuit(vector&lt;<span class="hljs-type">int</span>&gt;&amp; gas, vector&lt;<span class="hljs-type">int</span>&gt;&amp; <span class="hljs-keyword">cost</span>) &#123;<br>       <span class="hljs-type">int</span> totalSum=<span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> curSum=<span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span>    start=<span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;gas.size();i++)&#123;<br>           curSum+=gas[i]-<span class="hljs-keyword">cost</span>[i];<br>           totalSum+=gas[i]-<span class="hljs-keyword">cost</span>[i];<br>           <span class="hljs-keyword">if</span>(curSum&lt;<span class="hljs-number">0</span>)&#123;<br>               start=i+<span class="hljs-number">1</span>;<br>               curSum=<span class="hljs-number">0</span>;<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(totalSum&lt;<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">start</span>;<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022-05-09~2022-05-15</title>
    <link href="/2022/05/09/2022-05-09-2022-05-15/"/>
    <url>/2022/05/09/2022-05-09-2022-05-15/</url>
    
    <content type="html"><![CDATA[<h4 id="力扣131-分割回文串"><a href="#力扣131-分割回文串" class="headerlink" title="力扣131.分割回文串"></a><a href="https://leetcode.cn/problems/palindrome-partitioning/">力扣131</a>.分割回文串</h4><p><strong>切割问题</strong>类似于组合问题，递归用来纵向遍历，for循环用来横向遍历，在切割线遇到字符串的结尾，递归完成，找到一个例子<br>在判断终止条件的时候优点问题：stratIndex大于s.size()终止，此时分割线已经到达字符串末尾<br>在push_back    path的时候，使用substr函数，分割字符串<br>回溯函数：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml">void backtracking(const <span class="hljs-built_in">string</span> &amp;s,<span class="hljs-built_in">int</span> startIndex)&#123;<br>        <span class="hljs-keyword">if</span>(s.size<span class="hljs-literal">()</span>&lt;=startIndex)&#123;<br>            result.push<span class="hljs-constructor">_back(<span class="hljs-params">path</span>)</span>;<br>            return;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=startIndex;i&lt;s.size<span class="hljs-literal">()</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(is<span class="hljs-constructor">Palindrome(<span class="hljs-params">s</span>,<span class="hljs-params">startIndex</span>,<span class="hljs-params">i</span>)</span>)&#123;<br>                <span class="hljs-built_in">string</span> str=s.substr(startIndex,i-startIndex+<span class="hljs-number">1</span>);<br>                path.push<span class="hljs-constructor">_back(<span class="hljs-params">str</span>)</span>;<br>            &#125;<span class="hljs-keyword">else</span> continue;<br>            backtracking(s,i+<span class="hljs-number">1</span>);<br>            path.pop<span class="hljs-constructor">_back()</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>回溯函数模板</strong>：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scss">void <span class="hljs-built_in">backtracking</span>(参数) &#123;<br>    if (终止条件) &#123;<br>        存放结果;<br>        return;<br>    &#125;<br><br>    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) &#123;<br>        处理节点;<br>        <span class="hljs-built_in">backtracking</span>(路径，选择列表); <span class="hljs-comment">// 递归</span><br>        回溯，撤销处理结果<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="力扣93-复原IP地址"><a href="#力扣93-复原IP地址" class="headerlink" title="力扣93.复原IP地址"></a><a href="https://leetcode.cn/problems/restore-ip-addresses/">力扣93</a>.复原IP地址</h4><p>这道题首先要写个判断字串是否是合法的</p><ul><li>不能以0开头</li><li>不能有非法字符</li><li>不能大于255</li></ul><p>封装一个函数，不然的话卸载回溯函数里面优点麻烦<br>然后这道题没有path，直接在s里面修改，通过增加删除’.’来修改结果<br>回溯函数要多一个参数，s里面逗号的个数<br>当逗号个数为3，判断是否是合法的字串，然后放到结果集里面，终止递归</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void backtracking(<span class="hljs-built_in">string</span> s,<span class="hljs-built_in">int</span> startIndex,<span class="hljs-built_in">int</span> pointNum)&#123;<br>        <span class="hljs-keyword">if</span>(pointNum==<span class="hljs-number">3</span>)&#123;<br>            <span class="hljs-keyword">if</span>(is<span class="hljs-constructor">Valid(<span class="hljs-params">s</span>,<span class="hljs-params">startIndex</span>,<span class="hljs-params">s</span>.<span class="hljs-params">size</span>()</span>-<span class="hljs-number">1</span>))&#123;<br>                result.push<span class="hljs-constructor">_back(<span class="hljs-params">s</span>)</span>;<br>                return;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=startIndex;i&lt;s.size<span class="hljs-literal">()</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(is<span class="hljs-constructor">Valid(<span class="hljs-params">s</span>,<span class="hljs-params">startIndex</span>,<span class="hljs-params">i</span>)</span>)&#123;<br>                s.insert(s.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>+i+<span class="hljs-number">1</span>,<span class="hljs-character">&#x27;.&#x27;</span>);<br>                pointNum++;<br>                backtracking(s,i+<span class="hljs-number">2</span>,pointNum);<br>                pointNum--;<br>                s.erase(s.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>+i+<span class="hljs-number">1</span>);<br>            &#125;<span class="hljs-keyword">else</span> break;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>可以说是上一道题的加强版。<br>同时还要注意下一次回溯要从i+2开始，因为已经加了一个’.’<br>另外还要熟练运用string的函数<br>insert(),erase()</p><h4 id="力扣78-子集"><a href="#力扣78-子集" class="headerlink" title="力扣78.子集"></a><a href="https://leetcode.cn/problems/subsets/submissions/">力扣78</a>.子集</h4><p>如果把 子集问题、组合问题、分割问题都抽象为一棵树的话，那么组合问题和分割问题都是收集树的叶子节点，而<strong>子集问题是找树的所有节点</strong>！<br>每次for循环时就把path添加进result中，因为是寻找所有节点</p><h4 id="力扣90-子集II"><a href="#力扣90-子集II" class="headerlink" title="力扣90.子集II"></a><a href="https://leetcode.cn/problems/subsets-ii/submissions/">力扣90</a>.子集II</h4><p>这道题与上题的区别是这道题的数组中有重复的元素，原理同<a href="https://lch781023.github.io/2022/05/02/2022-5-02-2022-5-08/#%E5%91%A8%E6%97%A5">组合总和II</a></p><h4 id="力扣491-递增子序列"><a href="#力扣491-递增子序列" class="headerlink" title="力扣491.递增子序列"></a><a href="https://leetcode.cn/problems/increasing-subsequences/">力扣491</a>.递增子序列</h4><p>这道题我们使用哈希表unordered_set(或数组)对同一树层进行去重<br>即同一父节点下同层使用过的元素不能再使用</p><ul><li>result添加条件：path长度大于1</li><li>每层循环去重：path不空且nums[i]&lt; used.back()  或者同一树层没有使用过(nums[i]不在used里面)</li></ul><p>需要注意的是used每次递归不需要回溯，因为是判断同一树层是否使用，每往下一层，used就会被重新定义</p><h4 id="力扣46-全排列"><a href="#力扣46-全排列" class="headerlink" title="力扣46.全排列"></a><a href="https://leetcode.cn/problems/permutations/">力扣46</a>.全排列</h4><p><strong>排列</strong>问题不需要去重</p><ul><li>当path的长度等于nums的长度时，添加到result中</li><li>使用used判断该元素是否被用过</li><li>每次都从0开始而不是startIndex</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">void</span> backtracking(vector&lt;<span class="hljs-type">int</span>&gt;&amp;nums,vector&lt;<span class="hljs-type">bool</span>&gt;&amp;used)&#123;<br>       <span class="hljs-keyword">if</span>(<span class="hljs-type">path</span>.size()==nums.size())&#123;<br>           result.push_back(<span class="hljs-type">path</span>);<br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.size();i++)&#123;<br>           <span class="hljs-keyword">if</span>(used[i]==<span class="hljs-keyword">true</span>) <span class="hljs-keyword">continue</span>;<br>           <span class="hljs-type">path</span>.push_back(nums[i]);<br>           used[i]=<span class="hljs-keyword">true</span>;<br>           backtracking(nums,used);<br>           used[i]=<span class="hljs-keyword">false</span>;<br>           <span class="hljs-type">path</span>.pop_back();<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="力扣47-全排列II"><a href="#力扣47-全排列II" class="headerlink" title="力扣47.全排列II"></a><a href="https://leetcode.cn/problems/permutations-ii/">力扣47</a>.全排列II</h4><p>本题与上一题的区别是该题给的元素有重复，需要对同一树层进行去重<br><strong>去重一定要先对nums进行排序，这样才好通过相邻节点判断是否用过了</strong><br>与上题的对比：</p><figure class="highlight plaintext"><figcaption><span>backtracking(vector<int>&nums,vector<bool> used)&#123;</bool></int></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs void">    if(nums.size()==path.size())&#123;<br>        result.push_back(path);<br>        return;<br>    &#125;<br>    for(int i=0;i&lt;nums.size();i++)&#123;<br>        if(used[i]==true) continue;<br>        if(i&gt;0&amp;&amp;nums[i]==nums[i-1]&amp;&amp;used[i-1]==false)&#123;<br>            continue;<br>        &#125;<br>        path.push_back(nums[i]);<br>        used[i]=true;<br>        backtracking(nums,used);<br>        used[i]=false;<br>        path.pop_back();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>一般来说，组合问题和排列问题是在树的叶子收集结果，而子集问题是在树枝就收集结果</strong></p>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL</title>
    <link href="/2022/05/08/SQL/"/>
    <url>/2022/05/08/SQL/</url>
    
    <content type="html"><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p>SQL语言：</p><ul><li>数据定义语言<strong>DDL</strong>（提供定义关系模式、删除关系以及修改关系模式的命令）</li><li>数据操纵语言<strong>DML</strong>（提供从数据库中查询信息，以及在数据库中插入元组、删除元组、修改元组的能力）</li><li>完整性：<strong>DDL</strong>定义完整性约束的命令，保存在数据库中的数据必须满足所定义的完整性约束</li><li>视图定义：DDL包括视图的定义</li><li>事务控制：定义事务的开始和结束</li><li>嵌入式SQL和动态SQL</li><li>授权:DDL包括定义对关系和视图的访问权限的命令</li></ul><h1 id="SQL数据定义"><a href="#SQL数据定义" class="headerlink" title="SQL数据定义"></a>SQL数据定义</h1><h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><p>SQL支持的多种固有类型：</p><ul><li><strong>char</strong>：固定长度字符串</li><li><strong>varchar</strong>：可变长度字符串，用户指定最大长度</li><li><strong>int</strong></li><li><strong>smallint</strong></li><li>**numeric(p,d)**：定点数，精度由用户指定。这个数字有p位数字(加上一个符号位，d位数字在小数点右边)</li><li><strong>real，double precision</strong></li><li><strong>float</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关系数据库</title>
    <link href="/2022/05/06/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2022/05/06/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="关系数据结构及形式化定义"><a href="#关系数据结构及形式化定义" class="headerlink" title="关系数据结构及形式化定义"></a>关系数据结构及形式化定义</h1><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p><strong>域</strong>、<strong>笛卡尔积</strong>、<strong>元组</strong>、<strong>分量</strong>、<strong>基数</strong>、<strong>关系</strong></p><img src="/2022/05/06/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB.png" class><p>关系可以有三种类型：基本关系、查询表和视图表<br>基本关系的6条性质</p><ul><li>列是同质的，每一列中的分量是同一类型的数据，来自同一个域</li><li>不同列课出自同一个域，称其中的每一列为一个属性，不同的属性要给予不同的属性名</li><li>列的顺序无所谓</li><li>任何两个元组的候选码不能取相同的值</li><li>行的顺序无所谓</li><li>分量必须取原子值，每一个分量都是不可分的数据项</li></ul><h2 id="关系模式"><a href="#关系模式" class="headerlink" title="关系模式"></a>关系模式</h2><p>关系的描述称为<strong>关系模式</strong>，表示为：R(U,D,DOM,F)<br>R：关系名，U组成该关系的属性名集合，D：U中属性所来自的域，DOM属性向域的映像集合，F为属性间数据的依赖关系集合</p><h2 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h2><p>型：关系数据库模式<br>值：这些关系模式在某一时刻对应的关系的集合</p><h1 id="关系操作"><a href="#关系操作" class="headerlink" title="关系操作"></a>关系操作</h1><h2 id="基本关系操作"><a href="#基本关系操作" class="headerlink" title="基本关系操作"></a>基本关系操作</h2><p>查询、插入、删除、修改<br>查询基本操作：选择、投影、并、差、笛卡尔积<br>关系操作的特点是集合操作方式，操作的对象和结果都是集合（一次一集合方式），非关系数据库的数据操作方式称为一次一记录方式</p><h2 id="关系数据语言的分类"><a href="#关系数据语言的分类" class="headerlink" title="关系数据语言的分类"></a>关系数据语言的分类</h2><h1 id="关系的完整性"><a href="#关系的完整性" class="headerlink" title="关系的完整性"></a>关系的完整性</h1><h2 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h2><p><strong>实体完整性规则</strong>：若属性A是基本关系R的主属性，则A不能取空值</p><h2 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h2><img src="/2022/05/06/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%8F%82%E7%85%A7%E5%AE%8C%E6%95%B4%E6%80%A7.png" class><p><strong>参照完整性规则</strong>：若属性F是基本关系R的外码，它与基本关系S的主码Ks相对应（基本关系R与S不一定是不同的关系），则对于R中的每个元组在F上的值必须：</p><ul><li>或者空值</li><li>或者等于S中的某个元组的主码值</li><li>空值</li><li>非空值，则该值必须是专业关系元组的“专业号”</li></ul><h2 id="用户定义的完整性"><a href="#用户定义的完整性" class="headerlink" title="用户定义的完整性"></a>用户定义的完整性</h2><p>针对某一具体关系数据库的约束条件，反应某一具体应用涉及的数据必须满足的语义要求</p><h1 id="关系代数"><a href="#关系代数" class="headerlink" title="关系代数"></a>关系代数</h1><p>关系代数使用对关系的运算来表达查询</p><img src="/2022/05/06/%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93/%E5%85%B3%E7%B3%BB%E4%BB%A3%E6%95%B0.png" class><p>传统的集合运算：并，差，交，笛卡尔积</p><h2 id="专门的关系运算"><a href="#专门的关系运算" class="headerlink" title="专门的关系运算"></a>专门的关系运算</h2><p>选择:返回输入关系中满足谓词的行<br>投影：对输入关系的所有行输出指定的属性<br>连接：从两个输入关系中输出这样的·1元组对：它们在具有相同名字的所有属性上取值相同<br>笛卡尔族：从两个输入关系中输出所有的元组对（无论它们在共同属性上的取值是否相同）<br>并：输出两个关系中元组的并</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>绪论</title>
    <link href="/2022/05/06/%E7%BB%AA%E8%AE%BA/"/>
    <url>/2022/05/06/%E7%BB%AA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="数据模型"><a href="#数据模型" class="headerlink" title="数据模型"></a>数据模型</h1><h2 id="两类数据模型"><a href="#两类数据模型" class="headerlink" title="两类数据模型"></a>两类数据模型</h2><p>1、概念模型（信息模型）<br>2、逻辑模型（层次模型、网状模型、关系模型、面向对象数据模型、对象关系数据模型）和物理模型</p><h2 id="概念模型"><a href="#概念模型" class="headerlink" title="概念模型"></a>概念模型</h2><p>信息世界的基本概念：实体、属性、码、实体型、实体集、联系</p><p>实体之间的联系有一对一，一对多和多对多等多种类型</p><p>概念模型的一种表示方法：实体-联系方法，即E-R方法（模型）</p><h2 id="数据模型的组成要素"><a href="#数据模型的组成要素" class="headerlink" title="数据模型的组成要素"></a>数据模型的组成要素</h2><p>数据结构、数据操作、数据的完整性约束条件</p><h2 id="常用的数据模型"><a href="#常用的数据模型" class="headerlink" title="常用的数据模型"></a>常用的数据模型</h2><ul><li>层次模型</li><li>网状模型</li><li>关系模型</li><li>面向对象数据模型</li><li>对象关系数据模型</li><li>半结构化数据模型</li></ul><p><strong>基本层次联系</strong>是指两个记录以及它们之间的一对多（包括一对一）的联系</p><h2 id="层次模型"><a href="#层次模型" class="headerlink" title="层次模型"></a>层次模型</h2><p>两个条件：</p><ul><li>有且只有一个节点没有双亲结点，这个节点成为根节点</li><li>根以外的其他节点有且只有一个双亲节点</li></ul><p>层次模型中，每个节点表示一个记录类型，记录类型之间的联系用节点之间的连线表示，这种联系时父子之间一对多的联系</p><p><strong>层次数据库</strong>只能处理一对多的实体联系</p><p>层次模型像一棵倒立的树，节点的双亲是唯一的</p><img src="/2022/05/06/%E7%BB%AA%E8%AE%BA/%E5%B1%82%E6%AC%A1%E6%A8%A1%E5%9E%8B.png" class><p>层次模型优缺点：<br>优点：</p><ul><li>数据结构简单清晰</li><li>查询效率高</li><li>提供了良好的完整性支持</li></ul><p>缺点：</p><ul><li>多对多关系不适合</li><li>如果一个节点具有多个双亲节点，用层次模型很笨拙</li><li>查询子女节点必须通过双亲结点</li><li>层次命令趋于程序化</li></ul><h2 id="网状模型"><a href="#网状模型" class="headerlink" title="网状模型"></a>网状模型</h2><p>数据结构： </p><ul><li>允许一个以上的节点无双亲</li><li>一个节点可以有多于一个的双亲</li></ul><p>网状模型中子女节点与双亲节点的联系不唯一<br>优点：</p><ul><li>更为直接描述现实世界</li><li>性能好</li></ul><p>缺点：</p><ul><li>结构复杂</li><li>网状模型的DDL、DML复杂</li><li>用户必须了解系统结构的细节，家中编写应用程序的负担</li></ul><h2 id="关系模型"><a href="#关系模型" class="headerlink" title="关系模型"></a>关系模型</h2><p>关系模型要求关系必须是规范化的，关系的每个分量必须是一个不可分的数据项，不允许表中还有表<br>优点：</p><ul><li>建立在严格的数学概念的基础上</li><li>概念单一，用户易懂</li><li>更高的数据独立性、更好的安全保密型，简化开发工作</li></ul><p>缺点： 存储路径对用户是隐蔽的，查询效率不如格式化数据库</p><h1 id="数据库结构系统"><a href="#数据库结构系统" class="headerlink" title="数据库结构系统"></a>数据库结构系统</h1><p>模式是数据库中全体数据的逻辑结构和特征的描述。模式的一个具体值称为模式的一个实例<br>模式是相对稳定的，而实例是相对变动的</p><h2 id="数据库系统的三级模式结构"><a href="#数据库系统的三级模式结构" class="headerlink" title="数据库系统的三级模式结构"></a>数据库系统的三级模式结构</h2><img src="/2022/05/06/%E7%BB%AA%E8%AE%BA/%E4%B8%89%E7%BA%A7%E6%A8%A1%E5%BC%8F.png" class><p><strong>模式</strong>：数据库全体数据的逻辑结构和特征的描述，所有用户的公共数据视图，DDL严格定义模式</p><p><strong>外模式</strong>：也称子模式，用户模式，它是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，数据库用户的数据视图，与某一应用有关的数据的逻辑表示<br>一个数据库可以有多个外模式，但一个应用程序只能使用一个外模式<br>外模式DDL严格定义外模式</p><p><strong>内模式</strong>：也称存储模式，一个数据库只有一个内模式。是数据物理结构和存储方式的描述，是数据再数据库内部的组织方式</p><h2 id="数据库系统的二级映像功能和数据独立性"><a href="#数据库系统的二级映像功能和数据独立性" class="headerlink" title="数据库系统的二级映像功能和数据独立性"></a>数据库系统的二级映像功能和数据独立性</h2><p><strong>外模式&#x2F;模式映像</strong>：当模式改变时，由数据库管理员对各个外模式&#x2F;模式的映像作相应的改变，可以使外模式保持不变。应用程序时根据数据的外模式编写的，从而应用程序不必修改，保证了数据与程序的逻辑独立性，简称数据的逻辑独立性<br><strong>模式&#x2F;内模式映像</strong>：模式&#x2F;内模式唯一<br>数据库存储结构改变时，由数据库管理员对模式&#x2F;内模式映像作相应改变，可以使模式保持不变，从而应用程序也不必改变。保证了数据与程序的物理独立性，简称数据的物理独立性</p><h1 id="数据库系统的组成"><a href="#数据库系统的组成" class="headerlink" title="数据库系统的组成"></a>数据库系统的组成</h1><img src="/2022/05/06/%E7%BB%AA%E8%AE%BA/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F%E7%BB%84%E6%88%90.png" class>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>应用层</title>
    <link href="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/"/>
    <url>/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="应用层协议原理"><a href="#应用层协议原理" class="headerlink" title="应用层协议原理"></a>应用层协议原理</h1><h4 id="应用程序体系结构"><a href="#应用程序体系结构" class="headerlink" title="应用程序体系结构"></a>应用程序体系结构</h4><p>由应用程序研发者决定，使用如客户-服务器体系结构(C/S模式)，P2P体系结构等<br>各个结构的缺点：</p><ul><li>C/S模式的可扩展性比较差，用户达到一定阈值会断崖式下降，可靠性也比较差</li><li>P2P管理困难</li></ul><h4 id="分布式进程需要解决的问题："><a href="#分布式进程需要解决的问题：" class="headerlink" title="分布式进程需要解决的问题："></a>分布式进程需要解决的问题：</h4><ol><li>进程标示和寻址问题(服务用户)</li><li>传输层-应用层提供服务是如何(服务)<ul><li>位置：层间界面的SAP(TCP/IP:socket)</li><li>形式：应用程序接口API(TCP/IP:socket API)</li></ul></li><li>如何使用传输层提供的服务、实现进程间报文的交换，实现应用(用户使用服务)</li></ol><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ol><li>对进程进行编址：引入端口号</li><li>传输层提供的服务：需要穿过层间的信息<ul><li>层间接口必须要携带的的信息：要传输的报文(SDU)、应用进程的标示(IP+TCP或UDP端口)、对方的应用程序的标示(IP+TCP或UDP端口)</li><li>传输层实体根据这些信息进行TCP报文段/UDP数据段的封装</li></ul></li><li><ul><li>定义应用层协议：报文格式，解释，时序等</li><li>编制程序，使用OS提供的API，调用网络基础设施提供通信服务传报文，实现应用时序</li></ul></li></ol><h4 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h4><p>客户、服务器<br>进程之间通过一个称为<strong>套接字</strong>的软件接口向网络发送报文和从网络接受报文。套接字也被称为<strong>应用程序编程接口</strong>。<br>标识进程需要定义两种信息：主机地址+目的主机中接受进程的标识符。标识符，IP地址＋端口号<br><strong>TCP socket返回一个整数，代表一个四元组，是本地标示</strong><br><strong>UDP socket返回整数，代表本地IP和端口的二元组，但是在发送时，必须指定对方的IP和udp端口</strong><br>优点：便于管理、穿过层间的信息量最少</p><h4 id="可供应用程序使用的运输服务"><a href="#可供应用程序使用的运输服务" class="headerlink" title="可供应用程序使用的运输服务"></a>可供应用程序使用的运输服务</h4><p>运输层协议为调用它的应用程序提供四个方面的服务：</p><ul><li>可靠数据传输</li><li>吞吐量</li><li>定时</li><li>安全性<br>可用吞吐量是指发送进程能够向接收进程交付比特的速率<h4 id="因特网提供的运输服务"><a href="#因特网提供的运输服务" class="headerlink" title="因特网提供的运输服务"></a>因特网提供的运输服务</h4><strong>tcp服务</strong>模型包括面向连接服务和可靠数据传输服务，还拥有拥塞控制机制<br><strong>udp服务</strong>实现简单、无头部开销，仅提供最小服务<br>目前因特网没有提供吞吐量和定时的保证<h4 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h4>应用层协议定义：</li><li>交换报文的类型</li><li>各种报文类型的语法</li><li>字段的语义</li><li>确定一个进程何时以及如何发送报文</li></ul><p>注：应用层协议只是网络应用的一部分。<br>web协议是http，电子邮件协议是SMTP</p><h1 id="Web和HTTP"><a href="#Web和HTTP" class="headerlink" title="Web和HTTP"></a>Web和HTTP</h1><h4 id="HTTP概况"><a href="#HTTP概况" class="headerlink" title="HTTP概况"></a>HTTP概况</h4><p>WEB页面由对象组成<br>HTML基本文件通过URL地址引用页面中的其他对象，URL由两部分组成：存放对象的服务器主机名和对象的路径名<br>http使用TCP作为它的支撑运输协议，一个客户进程发送的每个HTTP请求报文都能最终完整地到达服务器，服务器进程发出的每个响应报文都能最终完整地到达客户<br>HTTP是<strong>无状态协议</strong>，不保存任何客户的信息</p><h4 id="非持续连接和持续连接"><a href="#非持续连接和持续连接" class="headerlink" title="非持续连接和持续连接"></a>非持续连接和持续连接</h4><p>非持续连接：每个请求/响应都通过单独的TCP连接发送<br>持续连接：所有的请求和响应都经过相同的TCP连接发送<br>默认情况下使用持续连接</p><h5 id="采用非持续连接的HTTP"><a href="#采用非持续连接的HTTP" class="headerlink" title="采用非持续连接的HTTP"></a>采用非持续连接的HTTP</h5><p>如果客户向服务器访问含有11个对象的网页（1个html基本文件和10个jpeg图像），需要建立11次连接<br>往返时间RTT：一个小的分组从客户端到服务器，再回到客户端的时间(传输时间忽略不计)。包括分组传播时延、分组在中间路由器和交换机上的排队时延以及分组处理的时延。<br>用户点击某超链接时，总的响应时间就是两个RTT（一个RTT用于建立连接，另一个用于请求和接受对象）加上服务器传输html文件的时间</p><h5 id="采用持续连接的TCP"><a href="#采用持续连接的TCP" class="headerlink" title="采用持续连接的TCP"></a>采用持续连接的TCP</h5><p>服务器在发送响应后保持该TCP连接打开，若长时间未使用，HTTP服务器就关闭该连接<br>使用流水线的方式</p><h4 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h4><img src="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/%E8%AF%B7%E6%B1%82%E6%8A%A5%E6%96%87%E5%92%8C%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F.png" class><h5 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h5><p>get方法：请求一个对象<br>post方法：提交表单<br>head方法：类似于get方法但是不返回请求对象，常用于调试跟踪<br>put方法：允许用户上传对象到指定的web服务器上的指定的路径<br>delete方法：允许用户或应用程序删除web服务器上的对象</p><h5 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h5><p>常见的状态码和相关短语：</p><ul><li>200 OK：请求成功，信息返回在响应报文中</li><li>301 Moved Permanently：请求的对象已经被永久转移了，新的url定义在响应报文的location：首部行中。客户软件将自动获取新的url</li><li>400 Bad Request：一个通用的差错代码，指示该请求不能被服务器理解。</li><li>404 Not Found：被请求的文档不在服务器上</li><li>505 HTTP Version Not Supported：服务器不支持请求报文使用的http协议版本</li></ul><h4 id="用户和服务器的交互：cookie"><a href="#用户和服务器的交互：cookie" class="headerlink" title="用户和服务器的交互：cookie"></a>用户和服务器的交互：cookie</h4><p>4个组件</p><ul><li>在HTTP响应报文中的一个cookie首部行</li><li>在HTTP请求报文中的一个cookie首部行</li><li>在用户端系统中保留一个cookie文件，并由用户浏览器进行管理</li><li>位于web站点的一个后端数据库</li></ul><h4 id="web缓存（代理服务器）"><a href="#web缓存（代理服务器）" class="headerlink" title="web缓存（代理服务器）"></a>web缓存（代理服务器）</h4><p>web缓存服务器既是服务器又是客户。<br>自己的理解：当用户访问某web站点时，浏览器创建与缓存服务器的TCP连接，然后在缓存服务器中寻找是否有该对象，若有，则发送响应报文返回；若没有，则与创建该对象的初始服务器建立一条TCP连接，发送请求报文，初始服务器返回响应报文，然后web缓存器接受到该对象，在本地存储区建立副本，然后通过响应报文将对象返回给用户。</p><h4 id="条件GET方法"><a href="#条件GET方法" class="headerlink" title="条件GET方法"></a>条件GET方法</h4><p>如果请求报文中使用GET方法，并且请求报文中包含一个”If-modified-Since”首部行，那么这个HTTP请求报文就是一个条件GET请求报文<br>如果客户再次访问该对象（代理服务器已保存），代理服务器向初始服务器使用一个条件GET方法，如果”If-modified-Since”的值等于最后一次服务器发送的响应报文中的Last-Modified:首部行的值，那么服务器的响应报文没有想要请求的对象（避免浪费带宽）</p><h1 id="FTP-文件传输协议"><a href="#FTP-文件传输协议" class="headerlink" title="FTP 文件传输协议"></a>FTP 文件传输协议</h1><p>客户端上载文件到服务器，也可以把服务器相应目录下的文件下载到本地<br>一开始是控制连接：FTP守候的端口TCP：21，等待FTP客户端的连接请求；<br>然后身份认证，客户端向服务端发出一系列命令<br><strong>数据传输是通过另一个TCP上进行的</strong><br>FTP是一个<strong>有状态的</strong>协议</p><h1 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h1><p>因特网电子邮件的三个主要组成部分：<strong>用户代理(如outlook)</strong>，<strong>邮件服务器</strong>，<strong>简单邮件传输协议(SMTP)</strong><br>一个典型的发送邮件的过程：从发送方的用户代理开始，传输到发送方的邮件服务器，在传输到接收方的邮件服务器，然后在这里被分发到接收方的邮箱中。<br>SMTP使用TCP可靠数据传输服务，既是客户端也是服务端</p><h4 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h4><img src="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/SMTP.png" class><p>服务器守候在25号端口，等待客户端建立连接<br>分三个阶段：握手，传报文，关闭。</p><h4 id="与http的对比"><a href="#与http的对比" class="headerlink" title="与http的对比"></a>与http的对比</h4><ul><li>HTTP协议采用<strong>拉协议</strong>，某些人在web服务器上装载信息，用户使用HTTP服务器从该服务器上拉取这些信息。TCP连接时由这些想要接收文件的机器发起的<br>；SMTP基本上是<strong>推协议</strong>，发送邮件的服务器把文件推向接收邮件的服务器，这个TCP连接是要发送该文件的机器发起的</li><li>SMTP要求每个报文采用7比特的ASCLL码格式，如果某报文使用非7比特的ASCLL码或者使用二进制，则报文必须按7比特ASCLL码进行编码；HTTP不受这种限制</li><li><strong>HTTP把每个对象封装到它自己的HTTP响应报文中，而SMTP把所有报文对象放在一个报文之中</strong></li></ul><h4 id="邮件报文格式"><a href="#邮件报文格式" class="headerlink" title="邮件报文格式"></a>邮件报文格式</h4><p>每个首部必须含有一个From：首部行和一个To：首部行；可能含有subject：首部行以及其他可选的首部行。报文首部之后，紧跟一个空白行。然后是以ASCLL表示的报文体</p><h4 id="邮件访问协议"><a href="#邮件访问协议" class="headerlink" title="邮件访问协议"></a>邮件访问协议</h4><p>用户代理没办法到达一个不可达的目的地接收服务器。<br>接收方的用户代理，通过<strong>第三版的邮局协议(POP3)</strong>、<strong>因特网邮件访问协议(IMAP)以及HTTP</strong>“拉取”邮件服务器上的报文传给它的本地PC</p><h5 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h5><p>协议简单，功能有限<br>三个阶段：</p><ul><li><strong>特许</strong>：两个主要命令 user &lt; user name &gt;和pass &lt; password &gt;用户代理以明文形式发送用户名和口令以鉴别用户</li><li><strong>事务处理</strong>：用户代理取回报文；同时，还可以：对报文做删除标记，取消报文的删除标记，获取邮件的统计信息</li><li><strong>更新</strong>：出现在客户发出quit命令之后，目的是结束POP3会话；这时，邮件服务器删除那些被标记为删除的报文</li></ul><p>服务器对命令做出的回答有两种，+OK和-ERR</p><h5 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h5><p>IMAP服务器把每个报文和一个文件夹联系起来，允许用文件夹组织消息<br>IMAP服务器维护了IMAP会话的用户状态信息</p><h4 id="基于WEB的电子邮件"><a href="#基于WEB的电子邮件" class="headerlink" title="基于WEB的电子邮件"></a>基于WEB的电子邮件</h4><p>用户代理就成了浏览器。</p><h1 id="DNS：因特网的目录式服务"><a href="#DNS：因特网的目录式服务" class="headerlink" title="DNS：因特网的目录式服务"></a>DNS：因特网的目录式服务</h1><p>将主机名转化为IP地址</p><h4 id="DNS提供的服务"><a href="#DNS提供的服务" class="headerlink" title="DNS提供的服务"></a>DNS提供的服务</h4><p>DNS是</p><ul><li>一个由分层的DNS服务器实现的分布式数据库</li><li>一个使主机能够查询分布式数据库的应用层协议</li></ul><p><strong>DNS运行在UDP之上，使用53号端口</strong><br>除此之外，还提供</p><ul><li>主机别名</li><li>邮件服务器别名</li><li>负载分配<h5 id="分布式、层级数据库"><a href="#分布式、层级数据库" class="headerlink" title="分布式、层级数据库"></a>分布式、层级数据库</h5>主机域名到ip地址之间的映射分布在DNS服务器上，有三种DNS服务器：根DNS服务器，顶级域DNS服务器和权威DNS服务器，他们中的前者为后者提供IP地址<br>本地DNS服务器不属于层级结构中，通常主机向本地DNS服务器查询属于递归查询(逐级返回IP地址)，而其他查询属于迭代查询(本地DNS服务器一直问问问)<h5 id="DNS缓存"><a href="#DNS缓存" class="headerlink" title="DNS缓存"></a>DNS缓存</h5>当某DNS服务器接受某DNS回答时，能将映射缓存到本地存储器中，即使它不是主机名的权威服务器，它也能提供IP地址，但缓存不是永久的<h4 id="DNS记录和报文"><a href="#DNS记录和报文" class="headerlink" title="DNS记录和报文"></a>DNS记录和报文</h4><h5 id="资源记录"><a href="#资源记录" class="headerlink" title="资源记录"></a>资源记录</h5>(Name , Value , Type , TTL)<br>TTL是该记录的生存时间，TTL维护权威记录就是无限大，而维护缓存记录就是有限值<br>Name和Value的值取决于Type：</li><li>“<strong>Type=A</strong>“，则Name是主机名，Value是该主机名对应的IP地址，一条A类型的资源记录提供了标准的主机名到IP地址的映射</li><li>“<strong>Type=NS</strong>“，则Name是个域，Value是个知道如何获得该域中主机IP地址的权威DNS服务器的主机名</li><li>“<strong>Type=CNAME</strong>“，则Value是个别名为Name的主机对应的规范主机名</li><li>“<strong>Type=MX</strong>“，Value是个别名为Name的邮件服务器的规范主机名</li></ul><h5 id="dns报文格式"><a href="#dns报文格式" class="headerlink" title="dns报文格式"></a>dns报文格式</h5><img src="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/dns.png" class><h1 id="P2P应用"><a href="#P2P应用" class="headerlink" title="P2P应用"></a>P2P应用</h1><h4 id="BitTorrent"><a href="#BitTorrent" class="headerlink" title="BitTorrent"></a>BitTorrent</h4><p>参与一个特定的文件分发的所有对等方的集合被称为一个<strong>洪流</strong>。在一个洪流中的对等方彼此下载等长度的<strong>文件块</strong>，典型的块长度为256KB。<br>每个洪流都以一个基础设施节点：<strong>追踪器</strong>，每个对等方加入洪流时，向追踪器注册自己，并且周期性地通知追踪器它仍在该洪流中。<br>一个新的对等方加入该洪流时，追踪器随机地从参与对等方地集合中选择对等方的一个子集<br><strong>最稀缺优先</strong>：解决<strong>某对等方应该从它的另据请求哪些块，应当向哪些向它请求的邻居发送块</strong>的问题。思路：</p><ul><li>针对它没有的块在它的邻居中最稀缺的块，并首先请求那些最稀缺的块。</li><li>对换算法：对等方能够趋向于找到彼此的协调的速率上载。(具体实现机制略)</li></ul><h1 id="视频流和内容分发网"><a href="#视频流和内容分发网" class="headerlink" title="视频流和内容分发网"></a>视频流和内容分发网</h1><h2 id="因特网视频"><a href="#因特网视频" class="headerlink" title="因特网视频"></a>因特网视频</h2><p>流视频的最为重要的性能度量：平均端到端的吞吐量</p><h2 id="HTTP和DASH"><a href="#HTTP和DASH" class="headerlink" title="HTTP和DASH"></a>HTTP和DASH</h2><p><strong>DASH</strong>：经HTTP的动态适应流<br>视频编码为几个不同的版本，每个版本具有不同的比特率，对应于不同的质量水平。客户动态地请求来自不同版本且长度为几秒的视频段数据块。当可用带宽较高时，客户自然的选择来自高速率版本的块；较低时同理。</p><p>DASH允许用户使用不同的以太网接入速率流式播放具有不同编码速率的视频。</p><p>使用DASH后，每个视频版本存储在HTTP服务器中，每个版本都有不同的URL。<br>HTTP服务器有<strong>告示文件</strong>，为每个版本提供了一个URL及其比特率<br>客户首先请求该告示文件并得知各种各样的版本。然后客户通过在HTTP GET请求报文中对每块指定一个URL和一个字节范围，一次选择一块。在下载块的同时，客户也测量接收带宽并运行一个<strong>速率决定算法</strong>来选择下次请求的块</p><h2 id="内容分发网CDN"><a href="#内容分发网CDN" class="headerlink" title="内容分发网CDN"></a>内容分发网CDN</h2><p>CDN管理分布在多个地理位置上的服务器，在它的服务器中存储视频的副本，并且所有试图将每个用户请求定向到一个将提供最好的用户体验的CDN位置<br>CDN可以是</p><ul><li>专用CDN，由内容提供商自己所拥有</li><li>第三方CDN，代表多个内容提供商分发内容</li></ul><p>CDN采用两种不同的服务器安置原则：</p><ul><li>深入：通过在遍及全球的接入ISP中部署服务器集群来深入到ISP的接入网中</li><li>邀请做客：通过在少量关键位置建造大集群来邀请到ISP做客，这些CDN通常将它们的集群放置在因特网交换点(IXP)。</li></ul><p>CDN没有将视频推入它们的集群中，而是采取<strong>拉策略</strong>：如果客户向一个未存储该视频的集群请求某视频，则该集群检索该视频，向客户流式传输视频的同时在本地存储一个副本。类似因特网缓存，当某集群存储器变满时，它删除不经常请求的视频</p><h3 id="CDN操作"><a href="#CDN操作" class="headerlink" title="CDN操作"></a>CDN操作</h3><p>用户浏览器指令检索一个特定的视频，CDN必须截获该请求，以便能够：</p><ul><li>确定此时适合用于该客户的CDN服务器集群</li><li>将客户的请求重定向到该集群的某台服务器.</li></ul><img src="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/%E6%88%AA%E8%8E%B7%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91.png" class><h3 id="集群选择策略"><a href="#集群选择策略" class="headerlink" title="集群选择策略"></a>集群选择策略</h3><ul><li>地理上最为临近：这种简单的策略忽略了时延和可用带宽随因特网路径时间而变化，总是为特定的客户指派相同的集群</li><li>实时测量：CDN能苟对其集群和客户之间的时延和丢包性能执行周期性的实时测量。</li></ul><h1 id="套接字编程"><a href="#套接字编程" class="headerlink" title="套接字编程"></a>套接字编程</h1><p>网络应用程序有两类：</p><ul><li>由协议标准中所定义的操作的实现：定义其操作的这些规则周知，客户程序和服务器程序必须遵守该RFC所规定的规则</li><li>专用的网络应用程序：这些代码并没有实现一个开放的协议，其他独立的开发者将不能开发出和该应用程序交互的代码</li></ul><p>使用python：</p><h2 id="UDP套接字"><a href="#UDP套接字" class="headerlink" title="UDP套接字"></a>UDP套接字</h2><img src="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/UDP.png" class><h3 id="UDPClient-py"><a href="#UDPClient-py" class="headerlink" title="UDPClient.py"></a>UDPClient.py</h3><figure class="highlight awk"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>导包<br>from socket import *<br><span class="hljs-regexp">//</span>设置变量<br>serverName=<span class="hljs-string">&#x27;hostname&#x27;</span><br>serverPort=<span class="hljs-number">12000</span><br><span class="hljs-regexp">//</span>创建客户套接字，AF_INET：使用IPv4，SOCK_DGRAM：使用UDP协议<br>clientSocket=socket(<span class="hljs-string">&#x27;Input lowercase sentence:&#x27;</span>)<br>message=raw_input(<span class="hljs-string">&#x27;Input lowercase sentence:&#x27;</span>)<br><span class="hljs-regexp">//</span>将报文由字符串类型转换为字节类型，方法 sendto () 为报文附上目的地址( serverName , serverPort ) 并且向进程的套接字 clientSocket 发送结果分组 <br>clientSocket,sendto(message.encode(),(serverName,serverPort))<br><span class="hljs-regexp">//</span>分组的数据放到modifiedMessage中，源地址放到serverAddress中<br>modifiedMessage,serverAddress=clientSocket.recvfrom(<span class="hljs-number">2048</span>)<br><span class="hljs-regexp">//</span>向屏幕打印<br>print(modifiedMessage.decode())<br><span class="hljs-regexp">//</span>关闭套接字，然后关闭进程<br>clientSocket.close()<br><br></code></pre></td></tr></table></figure><p>当创建套接字时,我们并没有指定客户套接字的端口号;相反,我们让操作系统为我们做这件事.</p><h3 id="UDPserver-py"><a href="#UDPserver-py" class="headerlink" title="UDPserver.py"></a>UDPserver.py</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>导包<br>from socket import *<br><span class="hljs-regexp">//</span>同上<br>serverPort=<span class="hljs-number">12000</span><br>serverSocket=socket(AF_INET,SOCK_DGRAM)<br><span class="hljs-regexp">//</span>将端口号<span class="hljs-number">12000</span>与该服务器的套接字绑定<br>serverSocket.bind(<span class="hljs-string">&#x27;&#x27;</span>,serverPort)<br>print(<span class="hljs-string">&quot;The server is ready to receive&quot;</span>)<br><span class="hljs-keyword">while</span> true:<br>    <span class="hljs-regexp">//</span>保存变量<br>    message,clientAddress=serverSocket.recvfrom(<span class="hljs-number">2048</span>)<br>    <span class="hljs-regexp">//</span>小写转大写<br>    modifiedMessage=message.decode.upper()<br>    <span class="hljs-regexp">//</span>将客户的地址附到大写的报文上，并将所得的分组发送到服务器的套接字中<br>    serverSocket.sendto(modifiedMessage.encode(),clientAddress)<br></code></pre></td></tr></table></figure><p>将端口号与套接字绑定：当任何人向位于该服务器的IP地址的端口12000发送一个分组，该分组将导向该套接字</p><h2 id="TCP套接字"><a href="#TCP套接字" class="headerlink" title="TCP套接字"></a>TCP套接字</h2><p>欢迎套接字和连接套接字<br>客户套接字和服务器连接套接字直接通过一根管道连接<br><img src="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/TCP.png" class></p><img src="/2022/05/02/%E5%BA%94%E7%94%A8%E5%B1%82/TCP1.png" class><h3 id="TCPClient-py"><a href="#TCPClient-py" class="headerlink" title="TCPClient.py"></a>TCPClient.py</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">//导包</span><br>from socket import *<br><span class="hljs-comment">//设置变量</span><br>serverName=&#x27;servername&#x27;<br>serverPort=12000<br><span class="hljs-comment">//创建客户套接字</span><br>clientSocket=socket(AF_INET,SOCK_STREAM)<br><span class="hljs-comment">//创建TCP连接</span><br>clientSocket.connect((serverName,serverPort))<br><span class="hljs-comment">//获得句子</span><br>sentence=raw_input(&#x27;<span class="hljs-keyword">input</span> lowercase sentence)<br><span class="hljs-comment">//发送句子,encode方法转字节类型</span><br>clientSocket.send(sentence.<span class="hljs-keyword">encode</span>())<br><span class="hljs-comment">//字符到达服务器时，它们被放置在字符串modifiedSentence中</span><br>modifiedSentence=clientSocket.recv(1024)<br><span class="hljs-keyword">print</span>(&#x27;From Server:&#x27;,modifiedSentence.<span class="hljs-keyword">decode</span>())<br><span class="hljs-comment">//关闭套接字</span><br>clientSocket.<span class="hljs-keyword">close</span>()<br></code></pre></td></tr></table></figure><h3 id="TCPServer-py"><a href="#TCPServer-py" class="headerlink" title="TCPServer.py"></a>TCPServer.py</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk">from socket import *<br>serverPort=<span class="hljs-number">12000</span><br><span class="hljs-regexp">//</span>创建服务端套接字<br>serverSocket=socket(AF_INET,SOCK_STREAM)<br><span class="hljs-regexp">//</span>服务器端口与与该套接字关联<br>serverSocket.bind((<span class="hljs-string">&#x27;&#x27;</span>,serverPort))<br><span class="hljs-regexp">//</span>等待某客户敲门<br>serverSocket.listen(<span class="hljs-number">1</span>)<br>print(<span class="hljs-string">&#x27;The server is ready to receive&#x27;</span>)<br><span class="hljs-keyword">while</span> True:<br>    <span class="hljs-regexp">//</span>创建一个新的套接字，由这个特定的客户专用<br>    connectionSocket,addr=serverSocket.accept()<br>    <span class="hljs-regexp">//</span>将二进制解码成字符串<br>    sentence=connectionSocket.recv(<span class="hljs-number">1024</span>).decode()<br>    <span class="hljs-regexp">//</span>转换大小写<br>    capitalizedSentence=sentence.upper()<br>    <span class="hljs-regexp">//</span>将字符串编码省二进制并且发送给客户端<br>    connectionSocket.send(capitalizedSentence.encode())<br>    <span class="hljs-regexp">//</span>关闭套接字<br>    connectionSocket.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022.5.02~2022.5.08</title>
    <link href="/2022/05/02/2022-5-02-2022-5-08/"/>
    <url>/2022/05/02/2022-5-02-2022-5-08/</url>
    
    <content type="html"><![CDATA[<h4 id="力扣150-逆波兰表达式求值"><a href="#力扣150-逆波兰表达式求值" class="headerlink" title="力扣150. 逆波兰表达式求值"></a><a href="https://leetcode-cn.com/problems/evaluate-reverse-polish-notation/">力扣150</a>. 逆波兰表达式求值</h4><p>心得：创建栈的时候直接创建int型，不要创建string型。用stoi()可以将字符串转化为整形。</p><h4 id="力扣239-滑动窗口的最大值"><a href="#力扣239-滑动窗口的最大值" class="headerlink" title="力扣239.滑动窗口的最大值"></a><a href="https://leetcode-cn.com/problems/sliding-window-maximum/">力扣239</a>.滑动窗口的最大值</h4><p>主要思想：队列没有必要维护窗口里的所有元素，只需要维护<strong>有可能成为窗口里最大值的元素</strong>就可以了，同时保证队列里的元素数值是<strong>由大到小</strong>的。<br>使用单调队列：<br>每次添加元素，都要确保队列入口处的元素要小于该元素。<br>每次删除元素，都要确保队列出口处元素等于该元素，否则不弹出元素<br>这样就能保证每次队列最前端的元素就是该队列元素的最大值<br>每次将que.front()添加到result中即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyQueue</span> &#123; <span class="hljs-comment">//单调队列（从大到小）</span><br><span class="hljs-keyword">public</span>:<br>    deque&lt;<span class="hljs-type">int</span>&gt; que; <span class="hljs-comment">// 使用deque来实现单调队列</span><br>    <span class="hljs-comment">// 每次弹出的时候，比较当前要弹出的数值是否等于队列出口元素的数值，如果相等则弹出。</span><br>    <span class="hljs-comment">// 同时pop之前判断队列当前是否为空。</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!que.<span class="hljs-built_in">empty</span>() &amp;&amp; value == que.<span class="hljs-built_in">front</span>()) &#123;<br>            que.<span class="hljs-built_in">pop_front</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 如果push的数值大于入口元素的数值，那么就将队列后端的数值弹出，直到push的数值小于等于队列入口元素的数值为止。</span><br>    <span class="hljs-comment">// 这样就保持了队列里的数值是单调从大到小的了。</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span> (!que.<span class="hljs-built_in">empty</span>() &amp;&amp; value &gt; que.<span class="hljs-built_in">back</span>()) &#123;<br>            que.<span class="hljs-built_in">pop_back</span>();<br>        &#125;<br>        que.<span class="hljs-built_in">push_back</span>(value);<br><br>    &#125;<br>    <span class="hljs-comment">// 查询当前队列里的最大值 直接返回队列前端也就是front就可以了。</span><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">front</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> que.<span class="hljs-built_in">front</span>();<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="力扣347-前k个高频元素"><a href="#力扣347-前k个高频元素" class="headerlink" title="力扣347.前k个高频元素"></a><a href="https://leetcode-cn.com/problems/top-k-frequent-elements/">力扣347</a>.前k个高频元素</h4><p>使用到了优先队列<br>priority_queue&lt;数据类型，容器类型，functional&gt;<br>容器类型只能选择vector、map，不能使用list。<br>当需要使用自定义数据类型时才需要传入三个参数，默认为大顶堆<br>此题需要使用小顶堆，只有当弹出的元素是最小的时候，才能保留k个最大的元素<br>此外，还需要重写()，当传入pirority_queue的第三个参数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">mycomparison</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&amp;lhs,<span class="hljs-type">const</span> pair &lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&amp;rhs)</span></span>&#123;<br>            <span class="hljs-keyword">return</span> lhs.second&gt;rhs.second;<br>        &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="力扣513-找树左下角的值"><a href="#力扣513-找树左下角的值" class="headerlink" title="力扣513.找树左下角的值"></a><a href="https://leetcode-cn.com/problems/find-bottom-left-tree-value/submissions/">力扣513</a>.找树左下角的值</h4><p>层序遍历的话，如何判断是最后一层呢？通过迭代result的值就可以了，最后一个result的值一定是最后一层左下角的值了</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xl"><span class="hljs-keyword">while</span>(!que.empty())&#123;<br>           int size=que.size();<br>           <span class="hljs-function"><span class="hljs-title">result</span>=que.front()-&gt;</span>val;<br>           <span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br>               TreeNode* cur=que.front();<br>               que.pop();<br>               <span class="hljs-function"><span class="hljs-title">if</span>(cur-&gt;</span><span class="hljs-function"><span class="hljs-title">left</span>) que.push(cur-&gt;</span>left);<br>               <span class="hljs-function"><span class="hljs-title">if</span>(cur-&gt;</span><span class="hljs-function"><span class="hljs-title">right</span>) que.push(cur-&gt;</span>right);<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><p>递归法的话，求深度使用<strong>前序遍历</strong>，但是不能一直递归到最左边，因为不一定是最下层<br>需要一个类里面定义个最大深度，只有最左边的，最大深度的节点，才是树左下角的节点。每次递归是判断是不是叶子节点，如果是，再判断是不是深度最大的，不断更新最大深度</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">int <span class="hljs-attr">maxlen=</span>INT_MIN;<br>int maxLeftValue;<br>void traversal(TreeNode* <span class="hljs-keyword">node</span><span class="hljs-title">,int</span> leftLen)&#123;<br>    if(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;left</span>==NULL&amp;&amp;<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;right</span>==NULL)&#123;<br>        if(leftLen&gt;maxlen)&#123;<br>            <span class="hljs-attr">maxlen=</span>leftLen;<br>            <span class="hljs-attr">maxLeftValue=</span><span class="hljs-keyword">node</span><span class="hljs-title">-&gt;val</span>;<br>        &#125;<br>        return;<br>    &#125;<br>    if(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;left</span>)&#123;<br>        leftLen++;<br>        traversal(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;left</span>,leftLen);<br>        leftLen--; //回溯<br>    &#125;<br>    if(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;right</span>)&#123;<br>        leftLen++;<br>        traversal(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;right</span>,leftLen);<br>        leftLen--;//回溯<br>    &#125;<br>    return ;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么另外，判断某递归函数返回值是void还是其他，如果是遍历整棵树，返回值是void；遍历某一条路线，必须有返回值</p><h4 id="力扣112-路径总和"><a href="#力扣112-路径总和" class="headerlink" title="力扣112.路径总和"></a><a href="https://leetcode-cn.com/problems/path-sum/submissions/">力扣112</a>.路径总和</h4><p>是否需要返回值，由三点：（搬运）</p><ul><li>如果需要搜索整棵二叉树且<strong>不用处理递归返回值</strong>，递归函数就不要返回值。</li><li>如果需要搜索整棵二叉树且<strong>需要处理递归返回值</strong>，递归函数就需要返回值。 </li><li>如果要搜索其中一条符合条件的路径，那么递归一定需要返回值，因为遇到符合条件的路径了就要及时返回。（本题的情况）</li></ul><p>在算总和方面，不要正向加，而是反向减targetSum，使targetSum&#x3D;0并且没有左右叶子就是要找的路径<br>递归函数：</p><figure class="highlight plaintext"><figcaption><span>traversal(TreeNode* cur, int count) &#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bool">    if (!cur-&gt;left &amp;&amp; !cur-&gt;right &amp;&amp; count == 0) return true; // 遇到叶子节点，并且计数为0<br>    if (!cur-&gt;left &amp;&amp; !cur-&gt;right) return false; // 遇到叶子节点直接返回<br><br>    if (cur-&gt;left) &#123; // 左<br>        count -= cur-&gt;left-&gt;val; // 递归，处理节点;<br>        if (traversal(cur-&gt;left, count)) return true;<br>        count += cur-&gt;left-&gt;val; // 回溯，撤销处理结果<br>    &#125;<br>    if (cur-&gt;right) &#123; // 右<br>        count -= cur-&gt;right-&gt;val; // 递归，处理节点;<br>        if (traversal(cur-&gt;right, count)) return true;<br>        count += cur-&gt;right-&gt;val; // 回溯，撤销处理结果<br>    &#125;<br>    return false;<br>&#125;<br></code></pre></td></tr></table></figure><p>特别特别记住，主函数调用时，还要减去根节点的值</p><p><strong>迭代法</strong>要使用pair&lt; TreeNode*,int&gt;，first记录节点，second记录到目前节点的总和</p><h4 id="力扣113-路径之和II"><a href="#力扣113-路径之和II" class="headerlink" title="力扣113.路径之和II"></a><a href="https://leetcode-cn.com/problems/path-sum-ii/submissions/">力扣113</a>.路径之和II</h4><p>类里面定义一个result用于存储结果，vec存储每一条路径<br>因为此题是遍历整个二叉树，递归函数不能有返回值</p><ul><li>递归终止条件：叶子节点并且targetSum＝0，将vec存入result中</li><li>单层递归逻辑：如果有左右节点，vec加入左右节点，targetSum减去左右节点的值，然后调用递归函数，然后再回溯<br>如果不是空树，先将根节点的值push_back进vec里面，调用traversal时也要减去根节点的值<h4 id="力扣106-从中序与后序遍历构造二叉树"><a href="#力扣106-从中序与后序遍历构造二叉树" class="headerlink" title="力扣106.从中序与后序遍历构造二叉树"></a><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/submissions/">力扣106</a>.从中序与后序遍历构造二叉树</h4>心得：</li><li>首先要熟悉理论基础，用中序和后序遍历构造二叉树</li><li>第一步先构造根节点，选用后序遍历的最后一个</li><li>第二步分割中序遍历数组，我们从中序遍历数组中找到后序遍历的最后一个元素，以它为分界线分割（注意要去除它本身）leftInorder和rightInorder，此时中序遍历数组长度应该-1，后序我们人为resize，因为后序的最后一个元素将是下一层递归的根节点，后序遍历数组长度-1</li><li>第三步分割后序遍历数组，因为每次遍历中序和后序数组长度应该一致，我们利用中序数组长度切割后序遍历数组。</li><li>第四步分别root-&gt;left&#x3D;traversal(leftInorder,leftPostorder)（右边同理）</li><li>最后返回root</li></ul><p>注意的是，每次切割遵循左闭右开</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//切割中序遍历数组</span><br><span class="hljs-type">int</span> delimiterIndex=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(delimiterIndex=<span class="hljs-number">0</span>;delimiterIndex&lt;inorder.<span class="hljs-built_in">size</span>();delimiterIndex++)&#123;<br>    <span class="hljs-keyword">if</span>(inorder[delimiterIndex]==rootValue) <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-comment">//切割后序遍历数组</span><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">leftInorder</span><span class="hljs-params">(inorder.begin(),inorder.begin()+delimiterIndex)</span></span>;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rightInorder</span><span class="hljs-params">(inorder.begin()+delimiterIndex+<span class="hljs-number">1</span>,inorder.end())</span></span>;<br><br>postorder.<span class="hljs-built_in">resize</span>(postorder.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>);<br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">leftPostorder</span><span class="hljs-params">(postorder.begin(),postorder.begin()+leftInorder.size())</span></span>;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">rightPostorder</span><span class="hljs-params">(postorder.begin()+leftInorder.size(),postorder.end())</span></span>;<br><br>root-&gt;left=<span class="hljs-built_in">traversal</span>(leftInorder,leftPostorder);<br>root-&gt;right=<span class="hljs-built_in">traversal</span>(rightInorder,rightPostorder);<br></code></pre></td></tr></table></figure><p>根据前序和中序构建也同理</p><h4 id="力扣654-最大二叉树"><a href="#力扣654-最大二叉树" class="headerlink" title="力扣654.最大二叉树"></a><a href="https://leetcode-cn.com/problems/maximum-binary-tree/">力扣654</a>.最大二叉树</h4><p>心得：</p><ul><li>首先是使用递归的方法</li><li>我们找出数组中的最大的元素，然后将该值赋给该层递归的根节点，然后分割数组，左右的数组分别进入下一层递归</li><li>maxValueIndex值要大于0，才能让root-&gt;left进入下一层递归，否则，root-&gt;left就是空的，maxValueIndex &lt; nums.size()-1同理，必须保证有元素。</li></ul><h4 id="递归求深度高度这块一直不太清楚"><a href="#递归求深度高度这块一直不太清楚" class="headerlink" title="递归求深度高度这块一直不太清楚"></a>递归求深度高度这块一直不太清楚</h4><p>首先，</p><ul><li>深度：从<strong>根节点</strong>到<strong>该节点</strong>最长简单路径的个数（但是力扣上以节点个数为准）</li><li>高度：从<strong>该节点</strong>到<strong>叶子节点</strong>最长简单路径的个数（但是力扣上以节点个数）为准</li></ul><p>求深度，用前序遍历，求高度，用后序遍历<br>因为求深度可以从上往下去查，用前序（中左右）；求高度得从下往上去查，用后序（左右中）<br>但是求二叉树的最大深度（也就是根节点的最大高度），我们可以使用后序。</p><p>如求高度：<a href="https://leetcode-cn.com/problems/balanced-binary-tree/submissions/">力扣110</a>.平衡二叉树</p><h4 id="力扣617-合并二叉树"><a href="#力扣617-合并二叉树" class="headerlink" title="力扣617.合并二叉树"></a><a href="https://leetcode-cn.com/problems/merge-two-binary-trees/submissions/">力扣617</a>.合并二叉树</h4><p>自己做的时候是想创建两个队列，不管是不是空就放进去，空的话就放一个NULL进去，然后这样做的画很麻烦。<br>作者创建一个队列，</p><ul><li>如果两个节点都不空，将两个数的各自的节点同时放进去</li><li>如果root1节点空，但是root2节点不空，就赋值过去</li><li>如果root1节点不空，但是root2节点空，那就什么都不需要管就好了，最终返回也是返回root1</li></ul><p>此题用递归法比较简单。<br>递归：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs coq">TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) &#123;<br>        <span class="hljs-keyword">if</span>(root1==NULL) <span class="hljs-keyword">return</span> root2;<br>        <span class="hljs-keyword">if</span>(root2==NULL) <span class="hljs-keyword">return</span> root1;<br>        <br>        root1-&gt;val+=root2-&gt;val;<br>        root1-&gt;<span class="hljs-built_in">left</span>=mergeTrees(root1-&gt;<span class="hljs-built_in">left</span>,root2-&gt;<span class="hljs-built_in">left</span>);<br>        root1-&gt;<span class="hljs-built_in">right</span>=mergeTrees(root1-&gt;<span class="hljs-built_in">right</span>,root2-&gt;<span class="hljs-built_in">right</span>);<br><br>        <span class="hljs-keyword">return</span> root1;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="力扣700-二叉搜索树中的搜索"><a href="#力扣700-二叉搜索树中的搜索" class="headerlink" title="力扣700.二叉搜索树中的搜索"></a><a href="https://leetcode-cn.com/problems/search-in-a-binary-search-tree/">力扣700</a>.二叉搜索树中的搜索</h4><p>二叉搜索树可以使用更简单的迭代方法，不适用辅助队列和辅助栈</p><h2 id="代码随想录"><a href="#代码随想录" class="headerlink" title="代码随想录"></a>代码随想录</h2><h4 id="力扣236-二叉树的最近公共祖先"><a href="#力扣236-二叉树的最近公共祖先" class="headerlink" title="力扣236.二叉树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">力扣236</a>.二叉树的最近公共祖先</h4><p>如果递归函数有返回值，如何判断搜索一条边还是一棵树：<br>搜索一条边：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">if</span> (递归函数(root-&gt;<span class="hljs-built_in">left</span>)) <span class="hljs-keyword">return</span> ;<br><br><span class="hljs-keyword">if</span> (递归函数(root-&gt;<span class="hljs-built_in">right</span>)) <span class="hljs-keyword">return</span> ;<br></code></pre></td></tr></table></figure><p>搜索整棵树：</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-built_in">left</span> = 递归函数(root-&gt;<span class="hljs-built_in">left</span>);<br><span class="hljs-built_in">right</span> = 递归函数(root-&gt;<span class="hljs-built_in">right</span>);<br><span class="hljs-built_in">left</span>与<span class="hljs-built_in">right</span>的逻辑处理;<br></code></pre></td></tr></table></figure><p>如果是搜索一条边，递归函数有返回值时，需要立刻返回；<br>如果时搜索整棵树，需要用left和right接住变量值，再处理逻辑，也是后序遍历中处理中间节点的逻辑(也是回溯)</p><p>判断p和q的最近公共祖先：如果根节点左子树有p(q)，并且右子树有q(p)，则该节点是公共祖先。我们从下往上找，就能找到最近公共祖先。从下往上找，就需要后序遍历(回溯)<br>用left和right接住处理结果，当左右都不空，返回该节点；左空右不空，返回右节点(左节点同理)</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coq">TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) &#123;<br>       <span class="hljs-keyword">if</span>(q==root|<span class="hljs-type">|p</span>==root|<span class="hljs-type">|root</span>==NULL) <span class="hljs-keyword">return</span> root;<br>       TreeNode* <span class="hljs-built_in">left</span>=lowestCommonAncestor(root-&gt;<span class="hljs-built_in">left</span>,p,q);<br>       TreeNode* <span class="hljs-built_in">right</span>=lowestCommonAncestor(root-&gt;<span class="hljs-built_in">right</span>,p,q);<br>       <span class="hljs-keyword">if</span>(<span class="hljs-built_in">left</span>!=NULL&amp;&amp;<span class="hljs-built_in">right</span>!=NULL) <span class="hljs-keyword">return</span> root;<br>       <span class="hljs-keyword">if</span>(<span class="hljs-built_in">left</span>!=NULL&amp;&amp;<span class="hljs-built_in">right</span>==NULL) <span class="hljs-keyword">return</span> <span class="hljs-built_in">left</span>;<br>       <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">left</span>==NULL&amp;&amp;<span class="hljs-built_in">right</span>!=NULL) <span class="hljs-keyword">return</span> <span class="hljs-built_in">right</span>;<br>       <span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-keyword">return</span> NULL;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="力扣235-二叉搜索树的最近公共祖先"><a href="#力扣235-二叉搜索树的最近公共祖先" class="headerlink" title="力扣235.二叉搜索树的最近公共祖先"></a><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/submissions/">力扣235</a>.二叉搜索树的最近公共祖先</h4><p>利用二叉搜索树的性质，当节点的值大于p和q，那么就向左边搜索；反之就向右边搜索。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">TreeNode* traversal(TreeNode* <span class="hljs-keyword">node</span><span class="hljs-title">,TreeNode</span>* p,TreeNode* q)&#123;<br>        if(<span class="hljs-keyword">node</span><span class="hljs-title">==NULL</span>) return <span class="hljs-keyword">node</span><span class="hljs-title">;</span><br><span class="hljs-title">        if</span>(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;val</span>&gt;p-&gt;val&amp;&amp;<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;val</span>&gt;q-&gt;val)&#123;<br>            TreeNode *<span class="hljs-attr">left=</span>traversal(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;left</span>,p,q);<br>            if(left!=NULL) return left;<br>        &#125;<br>        if(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;val</span><span class="hljs-tag">&lt;p-&gt;</span>val&amp;&amp;<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;val</span><span class="hljs-tag">&lt;q-&gt;</span>val)&#123;<br>            TreeNode* <span class="hljs-attr">right=</span>traversal(<span class="hljs-keyword">node</span><span class="hljs-title">-&gt;right</span>,p,q);<br>            if(right!=NULL) return right;<br>        &#125;<br>        return <span class="hljs-keyword">node</span><span class="hljs-title">;</span><br><span class="hljs-title">    &#125;</span><br></code></pre></td></tr></table></figure><p>使用迭代法要定义两个节点，一个是当前的节点，另一个是当前节点的父节点<br>注意二叉搜索树的遍历方式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros">TreeNode* insertIntoBST(TreeNode* root, int val) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-attribute">root</span>==NULL)&#123;<br>            TreeNode* <span class="hljs-attribute">cur</span>=new TreeNode(val);<br>            return cur;<br>        &#125;<br>        TreeNode* <span class="hljs-attribute">parent</span>=root;<br>        TreeNode* <span class="hljs-attribute">cur</span>=root;<br>        <span class="hljs-keyword">while</span>(cur!=<span class="hljs-literal">NULL</span>)&#123;<br>            <span class="hljs-attribute">parent</span>=cur;<br>            <span class="hljs-keyword">if</span>(cur-&gt;val&gt;val) <span class="hljs-attribute">cur</span>=cur-&gt;left;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cur-&gt;val&lt;val) <span class="hljs-attribute">cur</span>=cur-&gt;right;<br>        &#125;<br>        TreeNode *<span class="hljs-attribute">node</span>=new TreeNode(val);<br>        <span class="hljs-keyword">if</span>(val&lt;parent-&gt;val)&#123;<br>            parent-&gt;<span class="hljs-attribute">left</span>=node;<br>        &#125;<span class="hljs-keyword">else</span> parent-&gt;<span class="hljs-attribute">right</span>=node;<br>        return root;<br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="力扣450-删除二叉树的节点"><a href="#力扣450-删除二叉树的节点" class="headerlink" title="力扣450.删除二叉树的节点"></a><a href="https://leetcode-cn.com/problems/delete-node-in-a-bst/">力扣450</a>.删除二叉树的节点</h4><p>递归法删除要考虑五种情况：</p><ul><li>没找到要删除的节点，直接返回<figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">if(root<span class="hljs-operator">=</span><span class="hljs-operator">=</span>NULL) return root<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure></li><li>当左右节点都是空(该节点为叶子节点)，直接删除，返回NULL<figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">if</span>(root-&gt;left==<span class="hljs-keyword">NULL</span><span class="hljs-variable">&amp;&amp;root</span>-&gt;right==<span class="hljs-keyword">NULL</span>)&#123;<br>                <span class="hljs-keyword">delete</span> root;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">NULL</span>;<br>            &#125;<br></code></pre></td></tr></table></figure></li><li>当左节点为空，右节点不空，删除节点，右节点补位<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root-&gt;<span class="hljs-built_in">left</span>==NULL&amp;&amp;root-&gt;<span class="hljs-built_in">right</span>!=NULL)&#123;<br>                TreeNode* retNode=root-&gt;<span class="hljs-built_in">right</span>;<br>                delete root;<br>                <span class="hljs-keyword">return</span> retNode;<br>            &#125;<br></code></pre></td></tr></table></figure></li><li>当右节点为空，左节点不空，删除节点，左节点补位<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root-&gt;<span class="hljs-built_in">right</span>==NULL&amp;&amp;root-&gt;<span class="hljs-built_in">left</span>!=NULL)&#123;<br>                TreeNode* retNode=root-&gt;<span class="hljs-built_in">left</span>;<br>                delete root;<br>                <span class="hljs-keyword">return</span> retNode;<br>            &#125;<br></code></pre></td></tr></table></figure></li><li>左右节点都不空，找到该节点右子树的最左边节点，将要删除的节点的左子树移到最左边节点，作为其左子树，然后删除节点，右子树补位<figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-keyword">else</span>&#123;<br>                TreeNode* cur=root-&gt;<span class="hljs-built_in">right</span>;<br>                while(cur-&gt;<span class="hljs-built_in">left</span>!=NULL)&#123;<br>                    cur=cur-&gt;<span class="hljs-built_in">left</span>;<br>                &#125;<br>                cur-&gt;<span class="hljs-built_in">left</span>=root-&gt;<span class="hljs-built_in">left</span>;<br>                TreeNode* tmp=root;<br>                root=root-&gt;<span class="hljs-built_in">right</span>;<br>                delete tmp;<br>                <span class="hljs-keyword">return</span> root;<br>            &#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="力扣39-组合总和"><a href="#力扣39-组合总和" class="headerlink" title="力扣39.组合总和"></a><a href="https://leetcode-cn.com/problems/combination-sum/submissions/">力扣39</a>.组合总和</h4><p>这道题元素可以重复取</p><h4 id="力扣40-组合总和II"><a href="#力扣40-组合总和II" class="headerlink" title="力扣40.组合总和II"></a><a href="https://leetcode-cn.com/problems/combination-sum-ii/">力扣40</a>.组合总和II</h4><p>这道题和上题的区别是：</p><ul><li>这道题上的每个数字在每个组合只能使用一次(每次回溯的时候i需要＋1，元素不能重复取)</li><li>本题的candidates中的元素是有重复的，而上题的元素是无重复的</li></ul><p><strong>难点：集合有重复元素，但是不能有重复的组合</strong><br>回溯结构都可以用树状结构表示<br>去重有两种意义，第一种是同一层不能重，即组合不能重复取<br>第二种是同一支不能重，即元素不能重复取<br>那么本题的意思就是组合不能重复取,<strong>树层的去重，要先对数组进行排序</strong></p><p>本题首先要对给的数组进行排序，然后在单层逻辑上增添</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">if(i&gt;startIndex&amp;&amp;candidates<span class="hljs-comment">[i]</span>==candidates<span class="hljs-comment">[i-1]</span>) continue;<br></code></pre></td></tr></table></figure><p>避免组合重复</p><h4 id="力扣216-组合总和III"><a href="#力扣216-组合总和III" class="headerlink" title="力扣216.组合总和III"></a><a href="https://leetcode.cn/problems/combination-sum-iii/">力扣216</a>.组合总和III</h4><p>本题与上面两题的区别是多了数组的大小，相对而言感觉还是组合总和II更难一点</p>]]></content>
    
    
    <categories>
      
      <category>刷题记录</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>QT入门</title>
    <link href="/2022/04/18/QT/"/>
    <url>/2022/04/18/QT/</url>
    
    <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="第一个QT程序"><a href="#第一个QT程序" class="headerlink" title="第一个QT程序"></a>第一个QT程序</h2><p>文件说明：</p><ul><li>.pro：项目文件，包含项目相关信息</li><li>.pro.user：包含与用户有关的项目信息</li><li>.h：头文件</li><li>***.cpp：源文件</li><li>main.cpp：主函数</li><li>.ui：设计师设计界面对应的界面文件</li></ul><h4 id="大致结构如下"><a href="#大致结构如下" class="headerlink" title="大致结构如下"></a>大致结构如下</h4><p><strong>myWidget.h</strong>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MYWIDGET_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MYWIDGET_H</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QWidget&gt;</span><span class="hljs-comment">//包含头文件 QWidget窗口类</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">myWidget</span> : <span class="hljs-keyword">public</span> QWidget<br>&#123;<br>    Q_OBJECT<span class="hljs-comment">//Q_Obgect宏，允许类中使用信号和槽的机制</span><br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">myWidget</span>(QWidget *parent = <span class="hljs-literal">nullptr</span>);<span class="hljs-comment">//构造函数</span><br>    ~<span class="hljs-built_in">myWidget</span>();<br>&#125;;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">// MYWIDGET_H</span></span><br></code></pre></td></tr></table></figure><p><strong>myWidget.cpp</strong>:</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mywidget.h&quot;</span><br>#<span class="hljs-keyword">include</span>&lt;QPushButton&gt;<br>myWidget::my<span class="hljs-constructor">Widget(QWidget <span class="hljs-operator">*</span><span class="hljs-params">parent</span>)</span><br>    : <span class="hljs-constructor">QWidget(<span class="hljs-params">parent</span>)</span><br>&#123;<br>    <span class="hljs-comment">//创建一个按钮</span><br>    QPushButton *btn=<span class="hljs-keyword">new</span> QPushButton;<br>    btn-&gt;show<span class="hljs-literal">()</span>;<span class="hljs-comment">//show以顶层方式弹出窗口控件</span><br>    <span class="hljs-comment">//让btn对象，依赖在myWidget窗口中</span><br>    btn-&gt;set<span class="hljs-constructor">Parent(<span class="hljs-params">this</span>)</span>;<br><br>    <span class="hljs-comment">//显示文本</span><br>    btn-&gt;set<span class="hljs-constructor">Text(<span class="hljs-string">&quot;第一个按钮&quot;</span>)</span>;<br>    <span class="hljs-comment">//使用有参构造</span><br>     QPushButton *btn2=<span class="hljs-keyword">new</span> <span class="hljs-constructor">QPushButton(<span class="hljs-string">&quot;第二个按钮&quot;</span>,<span class="hljs-params">this</span>)</span>;<br>myWidget::~my<span class="hljs-constructor">Widget()</span><br>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>其中创建了一个按钮<br>改变窗口和按钮属性的函数：</p><p>btn-&gt;setText() 显示文本<br>btn-&gt;move(a,b)  移动按钮位置<br>btn-&gt;resize()   改变按钮的大小<br>btn-&gt;setParent(this) 将按钮设置到对象树中</p><p>resize()   改变窗口的大小<br>setWindowTitle()   改变窗口的名字<br>setFixedSize()     设置窗口的固定大小</p><p><strong>main.cpp</strong>:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mywidget.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;QApplication&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//a为应用程序对象，有且仅有一个</span><br>    <span class="hljs-function">QApplication <span class="hljs-title">a</span><span class="hljs-params">(argc, argv)</span></span>;<br>    <span class="hljs-comment">//窗口对象，QWidget为父类</span><br>    myWidget w;<br>    <span class="hljs-comment">//窗口对象，默认不会显示，必须调用show方法显示窗口</span><br>    w.<span class="hljs-built_in">show</span>();<br>    <span class="hljs-comment">//让应用程序对象进入消息循环</span><br>    <span class="hljs-comment">//让代码阻塞到这行</span><br>    <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">exec</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p>命名规范：<br>类型 首字母大写，单词和单词之间首字母大写、<br>函数名 变量名 首字母小写，单词和单词之间首字母大写</p><h2 id="对象树"><a href="#对象树" class="headerlink" title="对象树"></a>对象树</h2><img src="/2022/04/18/QT/QT%E5%AF%B9%E8%B1%A1%E6%A0%91.png" class><p>当创建的对象在堆区的时候，如果指定的父亲是QObject派生下来的类或者QObject子类派生下来的类，可以不用管理释放的操作，将对象放入到对象树中<br>一定程度上优化了内存回收机制<br>构造时由上往下，析构时由下往上</p><h2 id="信号和槽"><a href="#信号和槽" class="headerlink" title="信号和槽"></a>信号和槽</h2><p><strong>connect</strong>(信号的发送者，发送的具体信号，信号的接收者，信号的处理（槽）)、<br>信号槽的优点：松散耦合，信号发送端和接受端本身是没有关联的，通过connect连接将两端耦合在一起</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">//需求 点击按钮 关闭窗口</span><br>       <span class="hljs-comment">//参数1：信号的发送者  参数2：发送的信号 参数3：信号的接收者 参数4：处理的槽函数</span><br>        connect(myBtn,<span class="hljs-variable">&amp;</span>QPushButton::clicked,this,<span class="hljs-variable">&amp;</span>myWidget::close)<span class="hljs-punctuation">;</span><br><br></code></pre></td></tr></table></figure><h3 id="自定义信号和槽"><a href="#自定义信号和槽" class="headerlink" title="自定义信号和槽"></a>自定义信号和槽</h3><h4 id="自定义信号"><a href="#自定义信号" class="headerlink" title="自定义信号"></a>自定义信号</h4><p><strong>信号</strong>：在类的signals里面写，返回值是void，不需要实现，可以有参数，可以重载<br><strong>槽函数</strong>：在public slots中写，返回值void，需要声明，需要实现，可以有参数，可以重载<br>用emit触发信号<br>先连接，然后再调用触发信号的函数</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scss"><br> ······&#123;<br>    <span class="hljs-comment">//老师放学，学生回家的连接   </span><br>    <span class="hljs-built_in">connect</span>(zt,&amp;Teacher::overClass,st,&amp;Student::goHome);<br>    <span class="hljs-comment">//调用下课</span><br>    <span class="hljs-built_in">ClassisOver</span>();<br>&#125;<br>    void Widget::ClassisOver()&#123;<br>    <span class="hljs-comment">//下课后 调用老师下课的信号</span><br>    emit zt-&gt;<span class="hljs-built_in">overClass</span>();<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="自定义信号和槽函数重载后"><a href="#自定义信号和槽函数重载后" class="headerlink" title="自定义信号和槽函数重载后"></a>自定义信号和槽函数重载后</h5><p>需要利用函数指针指向函数的地址</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-comment">//自定义信号和槽函数的重载</span><br>   void (Teacher::*teacherSignal)(QString)=<span class="hljs-variable">&amp;</span>Teacher::overC<span class="hljs-attr">lass</span><span class="hljs-punctuation">;</span><br>   void (Student::*studentSlot)(QString)=<span class="hljs-variable">&amp;</span>Student::goH<span class="hljs-attr">ome</span><span class="hljs-punctuation">;</span><br>   <span class="hljs-comment">//连接带参数的信号和槽</span><br>   connect(zt,teacherSignal,st,studentSlot)<span class="hljs-punctuation">;</span><br><br>   <span class="hljs-comment">//调用下课</span><br>   ClassisOver()<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><p>QString 转化为char <em>：<br>先用ToUtf8()转化为QByteArray，再用Data()专户为char</em> </p><h4 id="使用按钮"><a href="#使用按钮" class="headerlink" title="使用按钮"></a>使用按钮</h4><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lisp">QPushButton *btn= new QPushButton(<span class="hljs-string">&quot;下课&quot;</span>,this)<span class="hljs-comment">;</span><br>this-&gt;resize(<span class="hljs-number">600</span>,<span class="hljs-number">400</span>)<span class="hljs-comment">;</span><br>connect(<span class="hljs-name">btn</span>,<span class="hljs-symbol">&amp;QPushButton</span>:<span class="hljs-symbol">:clicked</span>,this,<span class="hljs-symbol">&amp;Widget</span>:<span class="hljs-symbol">:ClassisOver</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="信号连接信号"><a href="#信号连接信号" class="headerlink" title="信号连接信号"></a>信号连接信号</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">QPushButton *btn2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">QPushButton</span>(<span class="hljs-string">&quot;第二个按钮&quot;</span>,this);<br>    this-&gt;<span class="hljs-title function_ invoke__">resize</span>(<span class="hljs-number">800</span>,<span class="hljs-number">400</span>);<br>    <span class="hljs-keyword">void</span>(<span class="hljs-title class_">Teacher</span>::*teacherSignal2)(<span class="hljs-keyword">void</span>)=&amp;<span class="hljs-title class_">Teacher</span>::overClass;<br>    <span class="hljs-keyword">void</span>(<span class="hljs-title class_">Student</span>::*studentSignal2)(<span class="hljs-keyword">void</span>)=&amp;<span class="hljs-title class_">Student</span>::goHome;<br>    <span class="hljs-title function_ invoke__">connect</span>(zt,teacherSignal2,st,studentSignal2);<br>    <span class="hljs-title function_ invoke__">connect</span>(btn2,&amp;<span class="hljs-title class_">QPushButton</span>::clicked,zt,teacherSignal2);<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码中的信号和槽函数调用void版本的函数，而不能调用QString类型的函数，因为clicked函数的参数是bool，有一个参数，而void没有参数，1&gt;0，所以可以调用void而不能调用QString</p><h4 id="断开信号：disconnect"><a href="#断开信号：disconnect" class="headerlink" title="断开信号：disconnect"></a>断开信号：disconnect</h4><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>1、信号可以连接信号<br>2、一个信号可以连接多个槽函数<br>3、多个信号可以连接同一个槽函数<br>4、信号和槽函数的参数类型必须一一对应<br>5、信号的参数个数可以多于槽函数的参数个数</p><h1 id="窗口部件"><a href="#窗口部件" class="headerlink" title="窗口部件"></a>窗口部件</h1><h2 id="基础窗口部件QWidget"><a href="#基础窗口部件QWidget" class="headerlink" title="基础窗口部件QWidget"></a>基础窗口部件QWidget</h2><p>QWidget类关系图：</p><img src="/2022/04/18/QT/QWidget.png" class><h4 id="窗口与子部件"><a href="#窗口与子部件" class="headerlink" title="窗口与子部件"></a>窗口与子部件</h4><p>QMainWindow和大量的QDialog子类是最一般的窗口类型。<br>窗口就是没有副部件的部件，又称<strong>顶级部件</strong>。与其相对的是非窗口部件，又称为<strong>子部件</strong><br>QWidget提供了绘制自己和处理用户输入事件的基本功能，Qt提供的所有界面元素不是QWidget的子类就是与QWidget的子类相关联。要设计自己的窗口部件，可以继承自QWidget或者是它的子类等</p><h4 id="窗口类型"><a href="#窗口类型" class="headerlink" title="窗口类型"></a>窗口类型</h4><p>QWidget构造函数有两个参数：QWidget * parent&#x3D;0 和QT::WindowFlags f&#x3D;0<br>前者表示父窗口部件，默认值为0，表明没有父窗口；后面的参数是Qt::windowFlag类型的，是一个枚举类型，分为窗口类型（定义窗口的类型，f&#x3D;0表明使用Qt::widget一项，这种类型的部件如果有父窗口，那么它就是子部件，否则就是独立的窗口）和窗口标志</p><p>还有Dialog(对话框类型)，SplashScreen(欢迎窗口类型)，FramelessWindowHint(无边框窗口)，WindowStaysOnTopHint(使该窗口停留在所有其他窗口上面)</p><p>其他函数：setWindowState：设置窗口的状态；如：WindowMaximized(最大化)、WindowMinimized(最小化)、WindowFullScreen(全屏显示)，默认为WindowNoState</p><h3 id="窗口几何布局"><a href="#窗口几何布局" class="headerlink" title="窗口几何布局"></a>窗口几何布局</h3><p>函数分为两类：</p><ul><li>包含框架的：x()、y()、frameGeometry()、pos()和move()</li><li>不包含框架的：geometry()、width()、height()、rect()和size()</li></ul><h3 id="调试程序"><a href="#调试程序" class="headerlink" title="调试程序"></a>调试程序</h3><p>常用qDebug()函数，将调试信息直接输出到控制台</p><h2 id="对话框QDialog"><a href="#对话框QDialog" class="headerlink" title="对话框QDialog"></a>对话框QDialog</h2><h3 id="模态和非模态对话框"><a href="#模态和非模态对话框" class="headerlink" title="模态和非模态对话框"></a>模态和非模态对话框</h3><p>模态对话框：没有关闭它之前，不能再和同一个应用程序的其他窗口进行交互<br>非模态对话框：既可以与它交互，也可以与同一程序中的其他窗口交互</p><p>想让一个对话框成为模态对话框，调用它的exec()函数<br>成为非模态对话框：使用new操作创建，调用show()函数</p><p>使用show()创建模态对话框</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">QDialog<span class="hljs-operator"> * </span>dialog=<span class="hljs-keyword">new</span> <span class="hljs-constructor">QDialog(<span class="hljs-params">this</span>)</span>;<br>dialog-&gt;set<span class="hljs-constructor">Model(<span class="hljs-params">true</span>)</span>;<br>dialog-&gt;show<span class="hljs-literal">()</span>;<br><br></code></pre></td></tr></table></figure><p>其他函数setWindowModality(参数):</p><ul><li>Qt::NonModel 不阻塞任何窗口</li><li>Qt::WindowModel 阻塞它的父窗口和所有祖先窗口以及它们的子窗口</li><li>Qt::ApplicationModel 阻塞整个应用程序的所有窗口</li></ul><h3 id="多窗口切换"><a href="#多窗口切换" class="headerlink" title="多窗口切换"></a>多窗口切换</h3><h4 id="信号和槽-1"><a href="#信号和槽-1" class="headerlink" title="信号和槽"></a>信号和槽</h4><p>第一种：直接在设计器中进行，在ui界面按下F4进入，然后拖到鼠标右键进行操作。这种方法更适合在设计器中的部件见进行</p><p>第二种：在设计器中直接进入相关的信号和槽，它用的就是自动关联，这样也会自动添加该槽的声明，我们只需更改其实现内容就行</p><h3 id="标准对话框"><a href="#标准对话框" class="headerlink" title="标准对话框"></a>标准对话框</h3><h4 id="颜色对话框"><a href="#颜色对话框" class="headerlink" title="颜色对话框"></a>颜色对话框</h4><p>头文件：QColorDialog<br>槽函数：click()</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"> void MyWidget::on<span class="hljs-constructor">_pushButton_clicked()</span><br>&#123;<br>    QColor color=QColorDialog::get<span class="hljs-constructor">Color(Qt::<span class="hljs-params">red</span>,<span class="hljs-params">this</span>,<span class="hljs-params">tr</span>(<span class="hljs-string">&quot;颜色对话框&quot;</span>)</span>);<br>    q<span class="hljs-constructor">Debug()</span>&lt;&lt;<span class="hljs-string">&quot;color: &quot;</span>&lt;&lt;color;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="文件对话框"><a href="#文件对话框" class="headerlink" title="文件对话框"></a>文件对话框</h4><p>头文件：QFileName<br>槽函数：click()<br>getOpenFileName(4参数):</p><ul><li>指定父窗口</li><li>设置对话框标题   如：tr(“文件对话框”)</li><li>指定默认打开的目标路径</li><li>设置文件类型过滤器  如：tr(“图片文件(*png  *jpg)”)<br>用QString 变量接住返回值</li></ul><p>如果设置多个不同类别的文件类型过滤器，不同类别用;;隔开<br>**选用多个文件，使用getOpenFileName()函数，参数与上一样</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//文件对话框</span><br>void MyWidget::on<span class="hljs-constructor">_pushButton_4_clicked()</span><br>&#123;<br>   QString fileNames=QFileDialog::get<span class="hljs-constructor">OpenFileName(<span class="hljs-params">this</span>,<span class="hljs-params">tr</span>(<span class="hljs-string">&quot;请选择文件&quot;</span>)</span>,<span class="hljs-string">&quot;E:&quot;</span>,tr(<span class="hljs-string">&quot;图片文件(*png *jpg);;文本文件(*txt)&quot;</span>));<br>    q<span class="hljs-constructor">Debug()</span>&lt;&lt;<span class="hljs-string">&quot;fileName&quot;</span>&lt;&lt;fileNames;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="字体对话框"><a href="#字体对话框" class="headerlink" title="字体对话框"></a>字体对话框</h4><p>头文件：QFontDialog</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">void MyWidget::on<span class="hljs-constructor">_pushButton_2_clicked()</span><br>&#123;<br>    <span class="hljs-comment">//ok用于标记是否单机了OK按钮。然后获得所选的字体</span><br>    <span class="hljs-built_in">bool</span> ok;<br>    QFont font=QFontDialog::get<span class="hljs-constructor">Font(&amp;<span class="hljs-params">ok</span>,<span class="hljs-params">this</span>)</span>;<br><br><br>    <span class="hljs-comment">//如果单击ok按钮，那么让&quot;字体对话框&quot;使用新字体</span><br>    <span class="hljs-keyword">if</span>(ok) ui-&gt;pushButton_2-&gt;set<span class="hljs-constructor">Font(<span class="hljs-params">font</span>)</span>;<br>    <span class="hljs-keyword">else</span> q<span class="hljs-constructor">Debug()</span>&lt;&lt;tr(<span class="hljs-string">&quot;没有选择字体!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="输入对话框"><a href="#输入对话框" class="headerlink" title="输入对话框"></a>输入对话框</h4><p>头文件: QInputDialog</p><ul><li>getText():指定父窗口、设置窗口标题、设置对话框中的标签的显示文本、设置输入的字符串的显示模式、设置输入框中的默认字符串、设置获取按钮信息的bool变量 <figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//获取字符串</span><br>   QString <span class="hljs-built_in">string</span> =QInputDialog::get<span class="hljs-constructor">Text(<span class="hljs-params">this</span>,<span class="hljs-params">tr</span>(<span class="hljs-string">&quot;输入字符串对话框&quot;</span>)</span>,tr(<span class="hljs-string">&quot;请输入用户名:&quot;</span>),QLineEdit::Normal,tr(<span class="hljs-string">&quot;admin&quot;</span>),&amp;ok);<br>   <span class="hljs-keyword">if</span>(ok) q<span class="hljs-constructor">Debug()</span>&lt;&lt;<span class="hljs-string">&quot;string:&quot;</span>&lt;&lt;<span class="hljs-built_in">string</span>;<br></code></pre></td></tr></table></figure></li><li>getInt()：指定父窗口、设置窗口标题、设置对话框中的标签的显示文本、默认大小、最小值、最大值、使用箭头按钮数值每次变化大小、布尔值<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//获取整数</span><br>    <span class="hljs-built_in">int</span> value=QInputDialog::get<span class="hljs-constructor">Int(<span class="hljs-params">this</span>,<span class="hljs-params">tr</span>(<span class="hljs-string">&quot;输入整数对话框&quot;</span>)</span>,tr(<span class="hljs-string">&quot;请输入-1000到1000之间的数值&quot;</span>),<span class="hljs-number">100</span>,-<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">10</span>,&amp;ok);<br>    <span class="hljs-keyword">if</span>(ok) q<span class="hljs-constructor">Debug()</span>&lt;&lt;<span class="hljs-string">&quot;value:&quot;</span>&lt;&lt;value;<br></code></pre></td></tr></table></figure></li><li>getDouble():指定父窗口、设置窗口标题、设置对话框中的标签的显示文本、默认值、最小值、最大值、小数位数、布尔值<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//获取浮点数</span><br> double value2=QInputDialog::get<span class="hljs-constructor">Double(<span class="hljs-params">this</span>,<span class="hljs-params">tr</span>(<span class="hljs-string">&quot;输入浮点数对话框&quot;</span>)</span>,tr(<span class="hljs-string">&quot;请输入-1000到1000之间的数值&quot;</span>),<span class="hljs-number">0.00</span>,-<span class="hljs-number">1000</span>,<span class="hljs-number">1000</span>,<span class="hljs-number">2</span>,&amp;ok);<br> <span class="hljs-keyword">if</span>(ok) q<span class="hljs-constructor">Debug()</span>&lt;&lt;<span class="hljs-string">&quot;value2:&quot;</span>&lt;&lt;value2;<br></code></pre></td></tr></table></figure></li><li>getItem():0：默认显示列表的第0个条目，true：条目是否可以被更改，其他同上<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">QStringList items;<br>items&lt;&lt;<span class="hljs-string">tr(&quot;条目一&quot;)&lt;&lt;tr</span>(<span class="hljs-string">&quot;条目二&quot;</span>);<br>QString item=QInputDialog::getItem(this,<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;输入条目对话框&quot;</span>),<span class="hljs-built_in">tr</span>(<span class="hljs-string">&quot;请选择一个条目&quot;</span>),items,0,<span class="hljs-literal">true</span>,&amp;ok);<br><span class="hljs-keyword">if</span>(ok) qDebug()&lt;&lt;<span class="hljs-string">&quot;item:&quot;</span>&lt;&lt;<span class="hljs-string">item;</span><br></code></pre></td></tr></table></figure><h4 id="消息对话框"><a href="#消息对话框" class="headerlink" title="消息对话框"></a>消息对话框</h4>头文件：QMessageBox<br>参数：父窗口、标题栏、显示信息和拥有的按钮<br>about()无返回值，因为它默认只有一个按钮<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">void</span> <span class="hljs-title class_">MyWidget</span>::<span class="hljs-title function_ invoke__">on_pushButton_3_clicked</span>()<br>&#123;<br>    <span class="hljs-comment">//问题对话框</span><br>    <span class="hljs-keyword">int</span> ret1=<span class="hljs-title class_">QMessageBox</span>::<span class="hljs-title function_ invoke__">question</span>(this,<span class="hljs-title function_ invoke__">tr</span>(<span class="hljs-string">&quot;问题对话框&quot;</span>),<span class="hljs-title function_ invoke__">tr</span>(<span class="hljs-string">&quot;你了解QT吗?&quot;</span>),<span class="hljs-title class_">QMessageBox</span>::Yes,<span class="hljs-title class_">QMessageBox</span>::No);<br>    <span class="hljs-keyword">if</span>(ret1==<span class="hljs-title class_">QMessageBox</span>::Yes)<span class="hljs-title function_ invoke__">qDebug</span>()&lt;&lt;<span class="hljs-title function_ invoke__">tr</span>(<span class="hljs-string">&quot;问题！&quot;</span>);<br><br>    <span class="hljs-comment">//提示对话框</span><br>    <span class="hljs-keyword">int</span> ret2=<span class="hljs-title class_">QMessageBox</span>::<span class="hljs-title function_ invoke__">information</span>(this,<span class="hljs-title function_ invoke__">tr</span>(<span class="hljs-string">&quot;提示对话框&quot;</span>),<span class="hljs-title function_ invoke__">tr</span>(<span class="hljs-string">&quot;这是Qt书籍！&quot;</span>),<span class="hljs-title class_">QMessageBox</span>::Ok);<br>    <span class="hljs-keyword">if</span>(ret2==<span class="hljs-title class_">QMessageBox</span>::Ok)<span class="hljs-title function_ invoke__">qDebug</span>()&lt;&lt;<span class="hljs-title function_ invoke__">tr</span>(<span class="hljs-string">&quot;提示!&quot;</span>);<br><br>    <span class="hljs-comment">// 警告对话框</span><br>    <span class="hljs-keyword">int</span> ret3=<span class="hljs-title class_">QMessageBox</span>::<span class="hljs-title function_ invoke__">warning</span>(this,<span class="hljs-title function_ invoke__">tr</span>(<span class="hljs-string">&quot;警告对话框&quot;</span>),<span class="hljs-title function_ invoke__">tr</span>(<span class="hljs-string">&quot;不能提前结束!&quot;</span>),<span class="hljs-title class_">QMessageBox</span>::Abort);<br>    <span class="hljs-keyword">if</span>(ret3==<span class="hljs-title class_">QMessageBox</span>::Abort)<span class="hljs-title function_ invoke__">qDebug</span>()&lt;&lt;<span class="hljs-title function_ invoke__">tr</span>(<span class="hljs-string">&quot;警告！&quot;</span>);<br><br>    <span class="hljs-comment">//错误对话框</span><br>    <span class="hljs-keyword">int</span> ret4=<span class="hljs-title class_">QMessageBox</span>::<span class="hljs-title function_ invoke__">critical</span>(this,<span class="hljs-title function_ invoke__">tr</span>(<span class="hljs-string">&quot;严重错误对话框&quot;</span>),<span class="hljs-title function_ invoke__">tr</span>(<span class="hljs-string">&quot;发现一个严重错误，现在要关闭所有文件！&quot;</span>),<span class="hljs-title class_">QMessageBox</span>::YesAll);<br>    <span class="hljs-keyword">if</span>(ret4==<span class="hljs-title class_">QMessageBox</span>::YesAll) <span class="hljs-title function_ invoke__">qDebug</span>()&lt;&lt;<span class="hljs-title function_ invoke__">tr</span>(<span class="hljs-string">&quot;错误&quot;</span>);<br><br>    <span class="hljs-comment">//关于对话框</span><br>    <span class="hljs-title class_">QMessageBox</span>::<span class="hljs-title function_ invoke__">about</span>(this,<span class="hljs-title function_ invoke__">tr</span>(<span class="hljs-string">&quot;关于对话框&quot;</span>),<span class="hljs-title function_ invoke__">tr</span>(<span class="hljs-string">&quot;123456&quot;</span>));<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="进度对话框"><a href="#进度对话框" class="headerlink" title="进度对话框"></a>进度对话框</h4>头文件：QProgressDialog、<br>构造函数参数：对话框的标签内容、取消按钮的显示文本、最小值、最大值和父窗口<br>然后设置为模态对话框并显示<br>for循环模拟文件复制过程，setValue()函数进度向前推进<br>QCoreApplication类函数progressEvents()为了避免长时间操作使用户界面冻结<br>QProgressDialog类的wasCanceled()判断用户是否单击了”取消”按钮<figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs scss">void MyWidget::on_pushButton_6_clicked()<br>&#123;<br>    QProgressDialog <span class="hljs-built_in">dialog</span>(tr(&quot;文件复制进度&quot;),<span class="hljs-selector-tag">tr</span>(&quot;取消&quot;),<span class="hljs-number">0</span>,<span class="hljs-number">50000</span>,this);<br>    dialog<span class="hljs-selector-class">.setWindowTitle</span>(tr(&quot;进度对话框&quot;));<br>    dialog<span class="hljs-selector-class">.setWindowModality</span>(Qt::WindowModal);<br>    dialog<span class="hljs-selector-class">.show</span>();<br>    <span class="hljs-built_in">for</span>(int i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">50000</span>;i++)&#123;<br>        dialog<span class="hljs-selector-class">.setValue</span>(i);<br>        QCoreApplication::processEvents();<br>        <span class="hljs-built_in">if</span>(dialog.wasCanceled()) break;<br>    &#125;<br>    dialog<span class="hljs-selector-class">.setValue</span>(<span class="hljs-number">50000</span>);<br>    <span class="hljs-built_in">qDebug</span>()&lt;&lt;<span class="hljs-selector-tag">tr</span>(&quot;复制结束!&quot;);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="错误信息对话框"><a href="#错误信息对话框" class="headerlink" title="错误信息对话框"></a>错误信息对话框</h4>头文件：QErrorMessage<figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">void</span> <span class="hljs-variable">MyWidget</span>::<span class="hljs-function"><span class="hljs-title">on_pushButton_7_clicked</span>()</span><br>&#123;<br>    <span class="hljs-variable">QErrorMessage</span> *<span class="hljs-variable">dialog</span>=<span class="hljs-variable">new</span> <span class="hljs-function"><span class="hljs-title">QErrorMessage</span>(<span class="hljs-variable">this</span>);</span><br><span class="hljs-function">    <span class="hljs-variable">dialog</span>-&gt;<span class="hljs-title">setWindowTitle</span>(<span class="hljs-title">tr</span>(<span class="hljs-string">&quot;错误信息对话框&quot;</span>));</span><br><span class="hljs-function">    <span class="hljs-variable">dialog</span>-&gt;<span class="hljs-title"><span class="hljs-built_in">showMessage</span></span>(<span class="hljs-title">tr</span>(<span class="hljs-string">&quot;这里是出错信息!&quot;</span>));</span><br><span class="hljs-function"></span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="向导对话框"><a href="#向导对话框" class="headerlink" title="向导对话框"></a>向导对话框</h4>头文件：QWizard<br>首先要在.h文件中声明函数，然后再cpp文件实现：<figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">QWizardPage</span> * <span class="hljs-variable">MyWidget</span>::<span class="hljs-function"><span class="hljs-title">createPage1</span>()&#123;</span><br><span class="hljs-function">    <span class="hljs-variable">QWizardPage</span> *<span class="hljs-variable">page</span>=<span class="hljs-variable">new</span> <span class="hljs-variable">QWizardPage</span>;</span><br><span class="hljs-function">    <span class="hljs-variable">page</span>-&gt;<span class="hljs-title">setTitle</span>(<span class="hljs-title">tr</span>(<span class="hljs-string">&quot;介绍&quot;</span>));</span><br><span class="hljs-function">    <span class="hljs-variable">return</span> <span class="hljs-variable">page</span>;</span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function"><span class="hljs-variable">QWizardPage</span> *<span class="hljs-variable">MyWidget</span>::<span class="hljs-title">createPage2</span>()&#123;</span><br><span class="hljs-function">    <span class="hljs-variable">QWizardPage</span> *<span class="hljs-variable">page</span>=<span class="hljs-variable">new</span> <span class="hljs-variable">QWizardPage</span>;</span><br><span class="hljs-function">    <span class="hljs-variable">page</span>-&gt;<span class="hljs-title">setTitle</span>(<span class="hljs-title">tr</span>(<span class="hljs-string">&quot;用户选择信息&quot;</span>));</span><br><span class="hljs-function">    <span class="hljs-variable">return</span> <span class="hljs-variable">page</span>;</span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function"><span class="hljs-variable">QWizardPage</span> *<span class="hljs-variable">MyWidget</span>::<span class="hljs-title">createPage3</span>()&#123;</span><br><span class="hljs-function">    <span class="hljs-variable">QWizardPage</span> *<span class="hljs-variable">page</span>=<span class="hljs-variable">new</span> <span class="hljs-variable">QWizardPage</span>;</span><br><span class="hljs-function">    <span class="hljs-variable">page</span>-&gt;<span class="hljs-title">setTitle</span>(<span class="hljs-title">tr</span>(<span class="hljs-string">&quot;结束&quot;</span>));</span><br><span class="hljs-function">    <span class="hljs-variable">return</span> <span class="hljs-variable">page</span>;</span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function"><span class="hljs-variable">void</span> <span class="hljs-variable">MyWidget</span>::<span class="hljs-title">on_pushButton_8_clicked</span>()</span><br>&#123;<br>    <span class="hljs-variable">QWizard</span> <span class="hljs-function"><span class="hljs-title">wizard</span>(<span class="hljs-variable">this</span>);</span><br><span class="hljs-function">    <span class="hljs-variable"><span class="hljs-class">wizard</span>.setWindowTitle</span>(<span class="hljs-title">tr</span>(<span class="hljs-string">&quot;向导对话框&quot;</span>));</span><br><span class="hljs-function">    <span class="hljs-variable"><span class="hljs-class">wizard</span>.addPage</span>(<span class="hljs-title">createPage1</span>());</span><br><span class="hljs-function">    <span class="hljs-variable"><span class="hljs-class">wizard</span>.addPage</span>(<span class="hljs-title">createPage2</span>());</span><br><span class="hljs-function">    <span class="hljs-variable"><span class="hljs-class">wizard</span>.addPage</span>(<span class="hljs-title">createPage3</span>());</span><br><span class="hljs-function">    <span class="hljs-variable"><span class="hljs-class">wizard</span>.exec</span>();</span><br><span class="hljs-function">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>如果需要添加图片和自定义按钮或者设置向导页面顺序，需要深入QWizard类和QWizardPage类</strong></p><h3 id="其他窗口部件"><a href="#其他窗口部件" class="headerlink" title="其他窗口部件"></a>其他窗口部件</h3><h4 id="QFrame类族"><a href="#QFrame类族" class="headerlink" title="QFrame类族"></a>QFrame类族</h4>]]></content>
    
    
    <categories>
      
      <category>QT</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十章-泛型算法</title>
    <link href="/2022/04/16/%E7%AC%AC%E5%8D%81%E7%AB%A0-%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/"/>
    <url>/2022/04/16/%E7%AC%AC%E5%8D%81%E7%AB%A0-%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>大多数算法定义在头文件algorithm中，标准库还在numeric中定义了一组数值泛型算法<br>这些算法并不直接操作容器，而是遍历由两个迭代器指定的一个元素范围来进行操作。<br>如标准库算法find：</p><figure class="highlight scss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs scss">auto result <span class="hljs-built_in">find</span>(vec.cbegin(),vec<span class="hljs-selector-class">.cend</span>(),val);<br></code></pre></td></tr></table></figure><h4 id="迭代器令算法不依赖于容器，但算法依赖于元素类型的操作"><a href="#迭代器令算法不依赖于容器，但算法依赖于元素类型的操作" class="headerlink" title="迭代器令算法不依赖于容器，但算法依赖于元素类型的操作"></a>迭代器令算法不依赖于容器，但算法依赖于元素类型的操作</h4><h1 id="初识泛型算法"><a href="#初识泛型算法" class="headerlink" title="初识泛型算法"></a>初识泛型算法</h1><h2 id="只读算法"><a href="#只读算法" class="headerlink" title="只读算法"></a>只读算法</h2><p><strong>accumulate</strong></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">int sum=accumulate(<span class="hljs-name">vec</span>.cbegin(),vec.cend(),<span class="hljs-number">0</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="算法和元素类型"><a href="#算法和元素类型" class="headerlink" title="算法和元素类型"></a>算法和元素类型</h3><p>序列中的元素类型必须与第三个参数匹配，或者能够转换为第三个参数的类型。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">string num=accumulate(<span class="hljs-name">vec</span>.cbegin(),vec.cend(),<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>错误，因为””传入一个和const char* 的对象，const char*并没有定义+运算符</p><h3 id="操作两个序列的算法-equals"><a href="#操作两个序列的算法-equals" class="headerlink" title="操作两个序列的算法 equals"></a>操作两个序列的算法 equals</h3><p>equals确定两个序列是否保存相同的值<br>接受第三个参数： 表示第二个序列的首元素</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">equals(<span class="hljs-name">roster1</span>.cbegin(),roster1.cend(),rsoter2.cbegin)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>rsoter2中的元素数目应至少与roster1一样多</strong></p><h2 id="写容器元素的算法"><a href="#写容器元素的算法" class="headerlink" title="写容器元素的算法"></a>写容器元素的算法</h2><p><strong>序列原大小应不小于算法写入的元素数目</strong>，算法不会执行容器操作，因此它们自身不可能改变容器的大小fill(vec,cbegin(),vec.cend)<br>fill：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">fill(<span class="hljs-name">vec</span>.cbegin(),vec,cbegin()+vec,size()/2,<span class="hljs-number">10</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="算法不检查写操作"><a href="#算法不检查写操作" class="headerlink" title="算法不检查写操作"></a>算法不检查写操作</h3><p>fill_n：接受单迭代器，一个计数值和一个值，可以将定值赋值给从迭代器开始的元素到指定个数的元素。</p><h3 id="back-inserter-插入迭代器"><a href="#back-inserter-插入迭代器" class="headerlink" title="back_inserter 插入迭代器"></a>back_inserter 插入迭代器</h3><p>头文件：iterator<br>back_inserter接受一个指向容器的引用，返回一个与该容器绑定的插入迭代器。当我们调用此迭代器赋值时，赋值运算符会调用push_back将一个具有给定值的元素添加到容器中</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-keyword">vec</span>;<br>fill_n(back_inserter(<span class="hljs-keyword">vec</span>),<span class="hljs-number">10</span>,<span class="hljs-number">0</span>);<span class="hljs-regexp">//</span>添加<span class="hljs-number">10</span>个<span class="hljs-number">0</span>元素到<span class="hljs-keyword">vec</span>中<br></code></pre></td></tr></table></figure><h3 id="拷贝算法-copy"><a href="#拷贝算法-copy" class="headerlink" title="拷贝算法 copy"></a>拷贝算法 copy</h3><p>第三个参数表示目的序列的起始位置<br>copy返回的是目的位置迭代器的值<br><strong>replace</strong>：<br>接受四个参数：两个表示范围，后两个一个是要搜索的值，另一个是新值。将所有等于第一个值的元素替换为第二个值<br><strong>replace_copy</strong>：<br>接受5个参数：前两个表示范围，第三个迭代器参数，指出调整后序列的位置，后两个同上。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">replace<span class="hljs-constructor">_copy(<span class="hljs-params">list</span>.<span class="hljs-params">cbegin</span>()</span>,<span class="hljs-built_in">list</span>.cend<span class="hljs-literal">()</span>,back<span class="hljs-constructor">_inserter(<span class="hljs-params">ivec</span>)</span>,<span class="hljs-number">0</span>,<span class="hljs-number">42</span>);<br></code></pre></td></tr></table></figure><p>调用后，list并未改变，ivec包含list的一份拷贝，但是list中0全换为42</p><h2 id="重排容器元素的算法"><a href="#重排容器元素的算法" class="headerlink" title="重排容器元素的算法"></a>重排容器元素的算法</h2><h4 id="消除重复单词"><a href="#消除重复单词" class="headerlink" title="消除重复单词"></a>消除重复单词</h4><p>unique重排vector</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">void elimDups(vector&lt;<span class="hljs-built_in">string</span>&gt;,&amp;<span class="hljs-built_in">words</span>)&#123;<br>    sort(<span class="hljs-built_in">words</span>.begin(),<span class="hljs-built_in">words</span>.<span class="hljs-keyword">end</span>());<br>    auto end_unique=unique(<span class="hljs-built_in">words</span>.begin(),<span class="hljs-built_in">words</span>.<span class="hljs-keyword">end</span>());<br><br>    <span class="hljs-built_in">words</span>.erase(end_unique,<span class="hljs-built_in">words</span>.<span class="hljs-keyword">end</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>unique不删除元素，而是覆盖相邻的重复元素，使不重复的元素出现在序列开始部分，在使用erase进行删除</p><h1 id="定制操作："><a href="#定制操作：" class="headerlink" title="定制操作："></a>定制操作：</h1><h2 id="向算法传递函数"><a href="#向算法传递函数" class="headerlink" title="向算法传递函数"></a>向算法传递函数</h2><h4 id="谓词："><a href="#谓词：" class="headerlink" title="谓词："></a>谓词：</h4><p>可调用的表达式，返回结果是能用做条件的值。<br>分为两类，一元谓词和二元谓词</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第九章-顺序容器</title>
    <link href="/2022/04/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/"/>
    <url>/2022/04/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序容器概述"><a href="#顺序容器概述" class="headerlink" title="顺序容器概述"></a>顺序容器概述</h1><p>vector<br>deque<br>list<br>forward_list<br>array<br>string</p><h1 id="容器库概览"><a href="#容器库概览" class="headerlink" title="容器库概览"></a>容器库概览</h1><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>元素范围：[begin，end)：表示范围自begin开始，于end之前结束。begin于end必须指向<br>相同的容器，end可以与end指向相同的容器，但是不能指向begin之前的位置。 </p><p>begin与end都返回该元素类型的迭代器(iterator)，cbegin与cend返回const_iterator<br>end指向<strong>最后元素的下一位</strong></p><h2 id="容器类型成员"><a href="#容器类型成员" class="headerlink" title="容器类型成员"></a>容器类型成员</h2><img src="/2022/04/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/p1.jpg" class><img src="/2022/04/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/p2.jpg" class><p>除以上，大多数容器还提供<strong>反向迭代器</strong>。<br><strong>类型别名</strong>：如果不了解容器中元素类型但是需要，使用容器的value_type。如果需要元素类型的一个<strong>引用</strong>，可以使用reference或const_reference。</p><h2 id="begin和end成员"><a href="#begin和end成员" class="headerlink" title="begin和end成员"></a>begin和end成员</h2><p>当不需要写访问时，应使用cbegin与cend。</p><h2 id="容器定义与初始化"><a href="#容器定义与初始化" class="headerlink" title="容器定义与初始化"></a>容器定义与初始化</h2><img src="/2022/04/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/p3.jpg" class><h3 id="将一个容器初始化为另一个容器的拷贝"><a href="#将一个容器初始化为另一个容器的拷贝" class="headerlink" title="将一个容器初始化为另一个容器的拷贝"></a>将一个容器初始化为另一个容器的拷贝</h3><p>为了创建一个容器为另一个容器的拷贝，两个容器的类型及其元素类型必须匹配<br>当传递迭代器参数来拷贝一个范围时，就不要求容器类型是相同的了。<br>新容器和原容器中的元素类型也可以不同，只要可以转换（如const char*转换为string）</p><p>可以使用两个迭代器类型表示范围，也可以使用迭代器，容器中某元素表示范围</p><h3 id="与顺序容器大小相关的构造函数"><a href="#与顺序容器大小相关的构造函数" class="headerlink" title="与顺序容器大小相关的构造函数"></a>与顺序容器大小相关的构造函数</h3><p>只有顺序容器的构造函数才接受大小参数，关联容器并不支持</p><h3 id="标准库array具有固定大小"><a href="#标准库array具有固定大小" class="headerlink" title="标准库array具有固定大小"></a>标准库array具有固定大小</h3><p>使用array类型，必须指定元素类型和大小：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">array<span class="hljs-keyword">&lt;<span class="hljs-built_in">int</span>,10&gt;</span></span><span class="hljs-comment">//保存10个int值</span><br></code></pre></td></tr></table></figure><p>不能对内置数组进行拷贝或对象赋值操作，但是array对象可以，但是array对象要求元素类型和大小也相同。</p><h2 id="赋值和swap"><a href="#赋值和swap" class="headerlink" title="赋值和swap"></a>赋值和swap</h2><img src="/2022/04/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/p4.jpg" class><p>上表可用于所有容器<br>如果两容器大小不同，赋值后两者大小都与右边容器大小相同</p><h3 id="使用assign（仅顺序容器）"><a href="#使用assign（仅顺序容器）" class="headerlink" title="使用assign（仅顺序容器）"></a>使用assign（仅顺序容器）</h3><p>assign操作用参数所指定的元素（的拷贝）替换左边容器中的所有元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">list&lt;string&gt;names;<br>vector&lt;<span class="hljs-type">const</span> <span class="hljs-type">char</span>*&gt;oldstyle;<br>names=oldstyle  <span class="hljs-comment">//error:容器类型不匹配</span><br>names.<span class="hljs-built_in">assign</span>(oldstyle.<span class="hljs-built_in">cbegin</span>(),oldstyle.<span class="hljs-built_in">cend</span>());<br></code></pre></td></tr></table></figure><p>由于旧元素被替代，传递给assign的迭代器不能指向调用assign的容器。</p><h3 id="使用swap"><a href="#使用swap" class="headerlink" title="使用swap"></a>使用swap</h3><p>除array外，交换两个容器内容的操作会很快，元素本身并未交换，swap只是交换了容器的内部数据结构。<br>除array外，swap不对任何元素进行拷贝，删除或插入操作，因此可以保证在常数时间内完成</p><p>与其他容器不同，swap两个array对象会真正交换他们的元素，时间与array中元素数目成正比。</p><h2 id="容器大小操作"><a href="#容器大小操作" class="headerlink" title="容器大小操作"></a>容器大小操作</h2><p>除forward_list以外，每个容器都支持三个与大小有关的操作：size,empty和max_size，forward_list不支持size。</p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><ul><li>如果两个容器，大小相同，所有元素两两相等，容器相等，否则不等</li><li>大小不同，较小容器每个元素都等于较大容器对应元素，则较小容器小于较大容器</li><li>两个容器都不为对方的子序列，则比较结果取决于第一个不相等的元素的比较结果<br>自定义类的对象要使用元素的关系运算符。</li></ul><h1 id="顺序容器操作"><a href="#顺序容器操作" class="headerlink" title="顺序容器操作"></a>顺序容器操作</h1><h2 id="向容器中添加元素"><a href="#向容器中添加元素" class="headerlink" title="向容器中添加元素"></a>向容器中添加元素</h2><p>除array外：</p><img src="/2022/04/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/p5.jpg" class><h3 id="使用push-back"><a href="#使用push-back" class="headerlink" title="使用push_back"></a>使用push_back</h3><p>除array和forward_list都支持</p><h3 id="使用push-front"><a href="#使用push-front" class="headerlink" title="使用push_front"></a>使用push_front</h3><p>list、forward_list和deque容器支持<br>vector、deque在首位之外插入元素会很耗时。</p><h3 id="在容器的特定位置添加元素"><a href="#在容器的特定位置添加元素" class="headerlink" title="在容器的特定位置添加元素"></a>在容器的特定位置添加元素</h3><p>vector、deque、list和string都支持insert。<br>insert第一个参数为迭代器，第二个参数为元素，将此元素插入到迭代器元素之前。</p><h3 id="插入范围内元素"><a href="#插入范围内元素" class="headerlink" title="插入范围内元素"></a>插入范围内元素</h3><p>insert可以添加第三个参数，表示将第二个元素插入的个数。此时，返回指向第一个新加入元素的迭代器。<br>但是不能传入一对迭代器</p><h3 id="使用emplace操作"><a href="#使用emplace操作" class="headerlink" title="使用emplace操作"></a>使用emplace操作</h3><p>emplace_front、emplace、emplace_back：<br>当使用insert等时，我们将元素的对象传递，对象被拷贝到容器中。而调用emplace时，将参数传递给元素类型的构造函数，emplace成员使用这些参数在容器管理的内存空间中直接构造元素。<br>如使用emplace_back会在容器管理的内存空间中直接创建对象，而push_back会创建一个局部临时对象，并将其压入容器中</p><h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><p>直接方法：调用front和back；<br>间接方法：解引用begin和end返回的迭代器来获得元素的引用</p><h3 id="访问成员函数返回的是引用"><a href="#访问成员函数返回的是引用" class="headerlink" title="访问成员函数返回的是引用"></a>访问成员函数返回的是引用</h3><p>front、back、下标、at等返回的都是引用，如果是const对象，返回const引用</p><h3 id="下标操作和安全的随机访问"><a href="#下标操作和安全的随机访问" class="headerlink" title="下标操作和安全的随机访问"></a>下标操作和安全的随机访问</h3><p>注意下标越界问题</p><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><h3 id="pop-front和pop-back成员函数"><a href="#pop-front和pop-back成员函数" class="headerlink" title="pop_front和pop_back成员函数"></a>pop_front和pop_back成员函数</h3><p>vector和string不支持此操作<br>这些操作返回void，如果需要弹出元素的值，就必须在执行弹出操作之前保存它</p><h3 id="从容器内部删除一个元素"><a href="#从容器内部删除一个元素" class="headerlink" title="从容器内部删除一个元素"></a>从容器内部删除一个元素</h3><p>如：删除所有奇数</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">list</span>&lt;int&gt; lst = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>auto <span class="hljs-literal">it</span>=lst.begin();<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">it</span>!=lst.end())&#123;<br>    <span class="hljs-keyword">if</span>(*<span class="hljs-literal">it</span>%<span class="hljs-number">2</span>)<br>        <span class="hljs-literal">it</span>=lst.erase(<span class="hljs-literal">it</span>);<br>    <span class="hljs-keyword">else</span> ++<span class="hljs-literal">it</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除多个元素"><a href="#删除多个元素" class="headerlink" title="删除多个元素"></a>删除多个元素</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">ele<span class="hljs-name">m1</span>=slist.erase<span class="hljs-comment">(elem1,elem2)</span> <span class="hljs-comment">//调用后elem1==elem2</span><br></code></pre></td></tr></table></figure><p>删除所有元素，可以使用clear()，也可以使用迭代器表示范围</p><h2 id="特殊的forward-list操作"><a href="#特殊的forward-list操作" class="headerlink" title="特殊的forward_list操作"></a>特殊的forward_list操作</h2><p>在一个forward_list中添加或删除元素的操作都会改变前驱节点的之后的元素，所以不能使用insert，emplace和erase。但是有insert_after，emplace_after，erase_after。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">forward_list&lt;<span class="hljs-built_in">int</span>&gt; flst=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>auto prev=flst.before<span class="hljs-constructor">_begin()</span>;       <span class="hljs-comment">//表示flst中的&quot;首前元素&quot;</span><br>auto curr=flst.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>;                 <span class="hljs-comment">//表示flst中的第一个元素</span><br><span class="hljs-keyword">while</span>(curr!=flst.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>)&#123;<br>    <span class="hljs-keyword">if</span>(*curr%<span class="hljs-number">2</span>)<br>        curr=flst.erase<span class="hljs-constructor">_after(<span class="hljs-params">prev</span>)</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        prev=curr;<br>        ++curr;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="改变容器大小"><a href="#改变容器大小" class="headerlink" title="改变容器大小"></a>改变容器大小</h2><p>array不支持<br>resize改变容器大小。<br>当前大小&gt;要求的大小：容器后部的元素被删除；<br>当前大小&lt;要求的大小：新元素添加到容器后部。</p><h2 id="容器操作可能使迭代器失效"><a href="#容器操作可能使迭代器失效" class="headerlink" title="容器操作可能使迭代器失效"></a>容器操作可能使迭代器失效</h2><p><strong>P315</strong></p><h3 id="编写改变容器的循环程序"><a href="#编写改变容器的循环程序" class="headerlink" title="编写改变容器的循环程序"></a>编写改变容器的循环程序</h3><p>调用insert或erase，更新迭代会很容易，这些操作都会返回迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">vector&lt;<span class="hljs-built_in">int</span>&gt;vi=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>auto <span class="hljs-built_in">iter</span>=vi.begin();<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">iter</span>!=vi.end())&#123;<br>    <span class="hljs-keyword">if</span>(*<span class="hljs-built_in">iter</span>%<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-built_in">iter</span>=vi.insert(<span class="hljs-built_in">iter</span>,*<span class="hljs-built_in">iter</span>);//复制当前元素<br>        <span class="hljs-built_in">iter</span>+=<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">iter</span>=vi.erase(<span class="hljs-built_in">iter</span>);//删除偶数元素<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="不要保存end返回的迭代器"><a href="#不要保存end返回的迭代器" class="headerlink" title="不要保存end返回的迭代器"></a>不要保存end返回的迭代器</h3><p>添加或删除vector或string中的元素时，end返回的迭代器总是会失效，必须每次重新调用end。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十五章-面向对象程序设计</title>
    <link href="/2022/04/07/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/04/07/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="定义基类和派生类"><a href="#定义基类和派生类" class="headerlink" title="定义基类和派生类"></a>定义基类和派生类</h1><p>基类：<br>Quote<br>派生类：<br>Disc_quote 继承Quote<br>Bulk_quote 继承Disc_quote</p><h2 id="定义派生类"><a href="#定义派生类" class="headerlink" title="定义派生类"></a>定义派生类</h2><h3 id="派生类构函数"><a href="#派生类构函数" class="headerlink" title="派生类构函数"></a>派生类构函数</h3><p>派生类构造函数通过初始化列表将实参传递给基类构造函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">Bulk_quote(<span class="hljs-params">const</span> <span class="hljs-params">std</span>::<span class="hljs-params">string</span> &amp; <span class="hljs-params">book</span>,<span class="hljs-params">double</span> <span class="hljs-params">p</span>,<span class="hljs-params">std</span>::<span class="hljs-params">size_t</span> <span class="hljs-params">qty</span>,<span class="hljs-params">double</span> <span class="hljs-params">disc</span>)</span><br>:<span class="hljs-constructor">Qutoe(<span class="hljs-params">book</span>,<span class="hljs-params">p</span>)</span>,min<span class="hljs-constructor">_qty(<span class="hljs-params">qty</span>)</span>,discount(disc)&#123;&#125;<br></code></pre></td></tr></table></figure><p>除非特别指出，否则派生类的基类部分会像数据成员一样执行默认初始化。如果想<strong>使用其他的基类构造函数</strong>，我们需要以<strong>类名加圆括号内的实参列表</strong>的形式为构造函数提供初始值</p><h3 id="继承与静态成员"><a href="#继承与静态成员" class="headerlink" title="继承与静态成员"></a>继承与静态成员</h3><p><strong>static</strong>关键字：整个继承体系中只存在该成员的唯一定义。假设某成员是可访问的，我们既能通过基类使用它也能通过派生类使用它。</p><h3 id="防止继承的发生"><a href="#防止继承的发生" class="headerlink" title="防止继承的发生"></a>防止继承的发生</h3><p><strong>final</strong>：断子绝孙</p><h2 id="类型转换与继承"><a href="#类型转换与继承" class="headerlink" title="类型转换与继承"></a>类型转换与继承</h2><p>我们可以将基类的指针或引用绑定到派生类对象中。例如，我们可以用Quote&amp;指向一个Bulk_qupte对象，也可以把一个Bulk_quote对象的地址赋给一个Quote*</p><h3 id="静态类型与动态类型"><a href="#静态类型与动态类型" class="headerlink" title="静态类型与动态类型"></a>静态类型与动态类型</h3><p>表达式的<strong>静态类型</strong>在编译时总是已知的，它是变量声明时的类型或表达式生成的类型<br><strong>动态类型</strong>时变量或表达式表示的内存中的对象的类型，知道运行时才可知</p><p>如果表达式既不是引用也不是指针，则它的动态类型与静态类型一致。</p><p>编译器在编译时无法确定某个特定类型转换在运行时是否安全，因为编译器只能通过<strong>检查指针或引用的静态类型</strong>来推断该转换是否合法。<br>如果在基类中含有一个或多个虚函数，我们可以使用<strong>dynamic_cast</strong>请求一个类型转换<br>如果已知某个基类向派生类的转换是否是安全的，我们可以使用<strong>static_cast</strong>强制覆盖掉编译器的检查工作</p><h3 id="······在对象之间不存在类型转换"><a href="#······在对象之间不存在类型转换" class="headerlink" title="······在对象之间不存在类型转换"></a>······在对象之间不存在类型转换</h3><p>当我们给基类的构造函数传递一个基类派生类对象时，实际运行的构造函数时基类的中定义的那个，显然该基类构造函数只能处理基类自己的成员。</p><p>类似的，如果我们将一个派生类对象赋值给一个基类对象，实际运行的赋值运算符也是基类中定义的那个，该运算符只能处理基类自己的成员。也就是说，属于派生类而不属于基类的成员被<strong>切掉</strong>了。</p><h1 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h1><h3 id="派生类的虚函数"><a href="#派生类的虚函数" class="headerlink" title="派生类的虚函数"></a>派生类的虚函数</h3><p>一个派生类的函数如果覆盖了某个继承而来的虚函数，则它的形参类型必须与它被覆盖的基类函数<strong>完全一致</strong>。同样，派生类中虚函数的返回类型也必须与基类函数匹配，该规则存在一个<strong>例外</strong>：</p><p>类的虚函数返回<strong>类本身的指针或引用时</strong>：如D由B派生得到，基类的虚函数返回B*而派生类对应的函数可以返回D*，不过这样的返回类型要求从D到B的类型转换是可访问的。</p><h3 id="final和override说明符"><a href="#final和override说明符" class="headerlink" title="final和override说明符"></a>final和override说明符</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">struct</span> B&#123;<br>    <span class="hljs-function">vitural <span class="hljs-keyword">void</span> <span class="hljs-title">f1</span>(<span class="hljs-params"><span class="hljs-built_in">int</span></span>)<span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-function">vitural <span class="hljs-keyword">void</span> <span class="hljs-title">f2</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f3</span>()</span>;<br>&#125;;<br><span class="hljs-keyword">struct</span> D1:B&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f1</span>(<span class="hljs-params"><span class="hljs-built_in">int</span></span>) <span class="hljs-keyword">const</span> <span class="hljs-keyword">override</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f2</span>(<span class="hljs-params"><span class="hljs-built_in">int</span></span>) <span class="hljs-keyword">override</span></span>;   <span class="hljs-comment">//错误，B没有形如f2(int)的函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f3</span>() <span class="hljs-keyword">override</span>      <span class="hljs-comment">//错误：f3不是虚函数</span></span><br><span class="hljs-function">    <span class="hljs-keyword">void</span> <span class="hljs-title">f4</span>() <span class="hljs-keyword">override</span>    <span class="hljs-comment">//错误，B没有名为f4的函数</span></span><br><span class="hljs-function">&#125;</span>;<br></code></pre></td></tr></table></figure><h3 id="回避虚函数的机制"><a href="#回避虚函数的机制" class="headerlink" title="回避虚函数的机制"></a>回避虚函数的机制</h3><p>使用<strong>作用域运算符</strong>可以实现对虚函数的调用不要进行动态绑定，而是强迫其执行虚函数的某个版本。<br>回避虚函数的默认机制：当一个派生类的虚函数调用覆盖掉的基类的虚函数版本。在此情况下，基类的版本通常完成继承层次中所有类型都要做的共同任务，而派生类中定义的版本需要执行一些与派生类本身密切相关的操作。</p><h1 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h1><h3 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h3><p>我们通过在函数体的位置（在生命语句的分号之前）书写&#x3D;0就可以将一个虚函数说明为<strong>纯虚函数</strong>，其中，&#x3D;0只能出现在类的内部的虚函数声明语句处</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Disc_quote:<span class="hljs-symbol">public</span></span> <span class="hljs-symbol">Quote</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        ··········<br>        <span class="hljs-built_in">double</span> bet_price(std::size_t) <span class="hljs-keyword">const</span>=<span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们也可以给纯虚函数提供定义，不过函数体在类的外部，<strong>我们不能在类的内部为一个&#x3D;0的函数提供函数体</strong>。</p><h3 id="含有纯虚函数的类是抽象基类"><a href="#含有纯虚函数的类是抽象基类" class="headerlink" title="含有纯虚函数的类是抽象基类"></a>含有纯虚函数的类是抽象基类</h3><p>（含有或者未经覆盖直接继承），我们不能直接创建一个抽象基类的对象。</p><h1 id="访问控制与继承"><a href="#访问控制与继承" class="headerlink" title="访问控制与继承"></a>访问控制与继承</h1><h3 id="受保护的成员"><a href="#受保护的成员" class="headerlink" title="受保护的成员"></a>受保护的成员</h3><p><strong>protected</strong>：希望与它的派生类分享但是不想被其他公共访问使用的成员。</p><h3 id="派生类向基类转换的可访问性"><a href="#派生类向基类转换的可访问性" class="headerlink" title="派生类向基类转换的可访问性"></a>派生类向基类转换的可访问性</h3><p>假定D继承自B：</p><ul><li>只有当D公有地继承B时，用户代码才能使用派生类向基类的转换；如果D继承B的方式是受保护的或者是私有的则用户代码不能使用该转换</li><li>不论D以什么方式继承B，D的成员函数和友元都能使用派生类向基类的转换；派生类向其基类的类型转换对于派生类的成员和友元来说永远是可访问的</li><li>如果D继承B的方式是公有地或者受保护的，则D的派生类的成员和友元可以使用D向B的类型转换；反之，如果D继承B的方式是私有的，则不能使用</li></ul><h3 id="改变个别成员的可访问性"><a href="#改变个别成员的可访问性" class="headerlink" title="改变个别成员的可访问性"></a>改变个别成员的可访问性</h3><p>改变派生类继承的某个名字的访问级别，如：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">std::<span class="hljs-type">size_t</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;<span class="hljs-keyword">return</span> n;&#125;<br><span class="hljs-keyword">protected</span>:<br>    std::<span class="hljs-type">size_t</span> n;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> : <span class="hljs-keyword">private</span> Base&#123;<br>    <span class="hljs-keyword">using</span> Base::size;<br>    <span class="hljs-keyword">using</span> Base::n;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>通过在类的内部使用using声明语句，我们可以将该类的直接或间接基类中的任何可访问成员标记出来。using声明语句中的名字的访问权限由该using声明语句之前的访问运算符来决定。</p><h1 id="继承中的类作用域"><a href="#继承中的类作用域" class="headerlink" title="继承中的类作用域"></a>继承中的类作用域</h1><p>派生类的作用域位于基类的作用域之内。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Bulk_quote bulk<span class="hljs-comment">;</span><br>cout&lt;&lt;bulk.ison()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>名字ison的解析：<br>在Bulk_quote查找-&gt;在disc_quote中查找-&gt;在Qutoe中查找。</p><h3 id="在编译时按名字查找"><a href="#在编译时按名字查找" class="headerlink" title="在编译时按名字查找"></a>在编译时按名字查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dise_quote</span> :<span class="hljs-keyword">public</span> Quote&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">std::pair&lt;<span class="hljs-type">size_t</span>,<span class="hljs-type">double</span>&gt; <span class="hljs-title">discount_policy</span> <span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;<span class="hljs-keyword">return</span> &#123;quantity,discount&#125;;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们只能通过Disc_qutoe及其派生类的对象、引用或指针使用discount_policy：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">Bulk_quote bulk;<br>Bulk_quote *bulkp=&amp;bulk;    <span class="hljs-regexp">//</span>静态类型与动态类型一致<br>Quote *itemp=&amp;bulk;         <span class="hljs-regexp">//</span>静态类型与动态类型不一致<br>bulkp-&gt;discount_policy();   <span class="hljs-regexp">//</span>正确：bulkp的类型时Bulk_quote*<br>itemp-&gt;discount_policy();  <span class="hljs-regexp">//</span>错误：itemp的类型时Quote*<br></code></pre></td></tr></table></figure><h3 id="名字冲突与继承"><a href="#名字冲突与继承" class="headerlink" title="名字冲突与继承"></a>名字冲突与继承</h3><p>派生类的成员将隐藏同名的基类成员</p><h3 id="通过作用域运算符来使用隐藏的成员"><a href="#通过作用域运算符来使用隐藏的成员" class="headerlink" title="通过作用域运算符来使用隐藏的成员"></a>通过作用域运算符来使用隐藏的成员</h3><p><strong>tip</strong>：除了覆盖继承而来的虚函数之外，派生类最好不要重用定义在基类中的名字</p><p>调用p-&gt;men()执行一下4步：</p><ol><li>首先确定p的静态类型，因为调用的时成员，所以类型是类类型。</li><li>在p的静态类型对应的类中查找men，如果找不到，依次在直接基类中不断查找至继承链的顶端。如果找不到就报错。</li><li>一旦找到了men，进行常规类型检查，以确定对于当前找到的men，本次调用是否合法</li><li>假设调用合法，编译器根据是否是虚函数而产生不同的代码</li><li><ul><li>如果men是虚函数且我们是通过引用或指针进行的调用，则编译器产生的代码将在运行时确定运行该虚函数的哪个版本，依据是对象的动态类型</li><li>反之，如果men不是虚函数或者我们是通过对象（非引用或指针）进行的调用，则编译器将产生一个常规函数的调用。</li></ul></li></ol><h3 id="一如往常，名字查找先于类型检查"><a href="#一如往常，名字查找先于类型检查" class="headerlink" title="一如往常，名字查找先于类型检查"></a>一如往常，名字查找先于类型检查</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">struct Base&#123;<br>    int <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br>&#125;;<br>struct Derived : Base&#123;<br>    int <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(int)</span></span>;<br>&#125;;<br>Derived d;<br>d.<span class="hljs-keyword">fun</span>();<br></code></pre></td></tr></table></figure><p>上述代码错误，因为Derived中的fun将Base中的fun覆盖，而d调用时没有提供参数，所以错误。</p><h3 id="通过基类调用隐藏的虚函数"><a href="#通过基类调用隐藏的虚函数" class="headerlink" title="通过基类调用隐藏的虚函数"></a>通过基类调用隐藏的虚函数</h3><h3 id="覆盖重载的函数"><a href="#覆盖重载的函数" class="headerlink" title="覆盖重载的函数"></a>覆盖重载的函数</h3><p>有时一个类仅需重载集合中的一些而非全部函数，一种好的解决方法是为重载的成员提供一条using声明语句，这样我们就无需覆盖基类的每一个重载版本了。<br>using语句指定一个名字而不指定形参列表。</p><h1 id="构造函数与拷贝控制"><a href="#构造函数与拷贝控制" class="headerlink" title="构造函数与拷贝控制"></a>构造函数与拷贝控制</h1><h2 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Quote</span>&#123;<br>    <span class="hljs-keyword">public</span>: <br>        vitural ~Quote ()=<span class="hljs-literal">default</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="虚析构函数将阻止合成移动操作"><a href="#虚析构函数将阻止合成移动操作" class="headerlink" title="虚析构函数将阻止合成移动操作"></a>虚析构函数将阻止合成移动操作</h3><h2 id="合成拷贝控制与继承"><a href="#合成拷贝控制与继承" class="headerlink" title="合成拷贝控制与继承"></a>合成拷贝控制与继承</h2><p>对于派生类的析构函数来说，不仅要销毁自己的成员，还要销毁派生类的直接基类，该直接基类要销毁它自己的直接基类，以此类推到继承链的顶端。</p><h3 id="派生类中删除的拷贝控制与基类的关系"><a href="#派生类中删除的拷贝控制与基类的关系" class="headerlink" title="派生类中删除的拷贝控制与基类的关系"></a>派生类中删除的拷贝控制与基类的关系</h3>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第八章 IO库</title>
    <link href="/2022/04/07/%E7%AC%AC%E5%85%AB%E7%AB%A0-IO%E5%BA%93/"/>
    <url>/2022/04/07/%E7%AC%AC%E5%85%AB%E7%AB%A0-IO%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="IO类"><a href="#IO类" class="headerlink" title="IO类"></a>IO类</h1><p>iostream:读写流的基本类型<br>fstream：读写命名文件类型<br>sstream：读写内存string对象的类型</p><img src="/2022/04/07/%E7%AC%AC%E5%85%AB%E7%AB%A0-IO%E5%BA%93/IO%E7%B1%BB.jpg" class><h2 id="IO对象无拷贝或赋值"><a href="#IO对象无拷贝或赋值" class="headerlink" title="IO对象无拷贝或赋值"></a>IO对象无拷贝或赋值</h2><p>不能拷贝IO对象，也不能将形参或返回类型设置为流类型，进行IO操作的函数通常以引用方式传递和返回流，传递和返回的引用不能是const的</p><h2 id="条件状态"><a href="#条件状态" class="headerlink" title="条件状态"></a>条件状态</h2><p>确定一个流对象状态最简单的方法是将它当作一个条件来使用</p><figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">(cin&gt;&gt;word)</span></span><br></code></pre></td></tr></table></figure><h1 id="文件输入与输出"><a href="#文件输入与输出" class="headerlink" title="文件输入与输出"></a>文件输入与输出</h1><h2 id="fstream代替iosstream-amp"><a href="#fstream代替iosstream-amp" class="headerlink" title="fstream代替iosstream&amp;"></a>fstream代替iosstream&amp;</h2><p>如果有一个函数接受一个ostream&amp;的参数，我们可以给它传递一个ofstream对象，istream同理</p><h2 id="open和close"><a href="#open和close" class="headerlink" title="open和close"></a>open和close</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">ofstream <span class="hljs-keyword">out</span>;<br><span class="hljs-keyword">out</span>.<span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;xxx.txt&quot;</span>);<br></code></pre></td></tr></table></figure><p>进行open是否成功的检验</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">if</span>(out);<br></code></pre></td></tr></table></figure><h2 id="以out模式打开文件会丢弃已有数据"><a href="#以out模式打开文件会丢弃已有数据" class="headerlink" title="以out模式打开文件会丢弃已有数据"></a>以out模式打开文件会丢弃已有数据</h2><p>保留被ofstream打开的文件中已有数据的唯一方式是显式指定app或in模式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x,sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-function">ifstream <span class="hljs-title">srcFile</span><span class="hljs-params">(<span class="hljs-string">&quot;in.txt&quot;</span>, ios::in)</span></span>; <span class="hljs-comment">//以文本模式打开in.txt备读</span><br>    <span class="hljs-keyword">if</span> (!srcFile) &#123; <span class="hljs-comment">//打开失败</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;error opening source file.&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function">ofstream <span class="hljs-title">destFile</span><span class="hljs-params">(<span class="hljs-string">&quot;out.txt&quot;</span>, ios::out)</span></span>; <span class="hljs-comment">//以文本模式打开out.txt备写</span><br>    <span class="hljs-keyword">if</span> (!destFile) &#123;<br>        srcFile.<span class="hljs-built_in">close</span>(); <span class="hljs-comment">//程序结束前不能忘记关闭以前打开过的文件</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;error opening destination file.&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">//可以像用cin那样用ifstream对象</span><br>    <span class="hljs-keyword">while</span> (srcFile &gt;&gt; x) &#123;<br>        sum += x;<br>        <span class="hljs-comment">//可以像 cout 那样使用 ofstream 对象</span><br>        destFile &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;sum：&quot;</span> &lt;&lt; sum &lt;&lt; endl;<br>    destFile.<span class="hljs-built_in">close</span>();<br>    srcFile.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="string流"><a href="#string流" class="headerlink" title="string流"></a>string流</h1><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">PersonInfo</span>&#123;<br>    string name;<br>    vector&lt;string&gt; phones;<br>&#125;<br><br>string line,<span class="hljs-type">word</span>;<span class="hljs-comment">//分别保存来自输入的一行和单词</span><br>vector&lt;PersonInfo&gt; people;<span class="hljs-comment">//保存来自输入的所有记录</span><br><br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">getline</span>(is.line))&#123;<br>    PersonInfo info;<span class="hljs-comment">//创建一个保存此记录数据的对象</span><br>    <span class="hljs-function">isstringstream <span class="hljs-title">record</span><span class="hljs-params">(line)</span></span>;<span class="hljs-comment">//将记录绑定到刚读入的行</span><br>        record&gt;&gt;info.name;<span class="hljs-comment">//读取名字</span><br>    <span class="hljs-keyword">while</span>(record&gt;&gt;<span class="hljs-type">word</span>)<span class="hljs-comment">//读取电话号码</span><br>        info.phones.<span class="hljs-built_in">push_back</span>(<span class="hljs-type">word</span>);<span class="hljs-comment">//保持它们</span><br>    people.<span class="hljs-built_in">push_back</span>(info);<span class="hljs-comment">//将此记录追加到people末尾</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">for</span>(const auto &amp;entry :people)&#123;<span class="hljs-regexp">//</span>对people的每一项<br>    osstringstream formatted,badNums;<span class="hljs-regexp">//</span>每个循环步创建的对象<br>    <span class="hljs-keyword">for</span>(const auto &amp;nums : entry.phones)&#123;<span class="hljs-regexp">//</span>对每个数<br>        <span class="hljs-keyword">if</span>(!valid(nums))&#123;<br>            badNums&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;nums;<span class="hljs-regexp">//</span>将数以字符串的形式存入badNums<br>        &#125;<span class="hljs-keyword">else</span><br>            formatted &lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;format(nums);<span class="hljs-regexp">//</span>将格式化的字符串“写入”formatted<br>    &#125;<br>    <span class="hljs-keyword">if</span>(banNums.str().empty())<span class="hljs-regexp">//</span>没有错误的数<br>        os&lt;&lt;entry.name&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;formatted.str()&lt;&lt;endl;<span class="hljs-regexp">//</span>打印名字和格式化的数<br>    <span class="hljs-keyword">else</span> <span class="hljs-regexp">//</span>否则，打印名字和错误的数<br>        cerr&lt;&lt;<span class="hljs-string">&quot;input error:&quot;</span>&lt;&lt;entry.name&lt;&lt;<span class="hljs-string">&quot;invalid number(s) &quot;</span>&lt;&lt;badNums.str()&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>valid和format，分别完成电话号码的验证和改变格式的功能。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前七章-C++基础</title>
    <link href="/2022/04/05/%E5%89%8D%E4%B8%83%E7%AB%A0-C++%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/04/05/%E5%89%8D%E4%B8%83%E7%AB%A0-C++%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h2><h4 id="初始化和对const的引用"><a href="#初始化和对const的引用" class="headerlink" title="初始化和对const的引用"></a>初始化和对const的引用</h4><p>初始化常量引用时，可以用任意表达式作为初始值，只要该表达式能转换成引用的类型即可。<strong>引用类型都要和与之绑定的对象的类型一致，此处属于两种例外之一</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">double</span> dval =<span class="hljs-number">3.14</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> &amp;ri=dval;<br></code></pre></td></tr></table></figure><p>此处正确，编译器把上述代码变成如下形式，此时，ri绑定了一个临时量对象。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> temp= dval;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> &amp;ri=temp;<br></code></pre></td></tr></table></figure><p>同样的指针也类似,<strong>允许指向常量的指针指向非常量对象</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">double <span class="hljs-attribute">dval</span>=3.14;<br>const double <span class="hljs-number">*c</span><span class="hljs-attribute">ptr</span>=&amp;dval;<br></code></pre></td></tr></table></figure><h4 id="顶层const"><a href="#顶层const" class="headerlink" title="顶层const"></a>顶层const</h4><p>表示指针本身是个常量，<strong>底层const</strong>表示<br><strong>顶层const</strong>可以表示任意对象是常量，<strong>底层const</strong>与指针和引用等复合类型的基本类型部分有关。<br>对于拷贝操作来说，顶层const基本不受影响，而对于底层const，拷入和拷出的对象必须是相同的底层const，或者非常量可以转化成常量，而常量不能转化成非常量。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">const int <span class="hljs-attribute">i</span>=0;<br>int &amp;<span class="hljs-attribute">r</span>=i;<br></code></pre></td></tr></table></figure><p>上述代码是错误的，普通的int&amp;类型不能绑定到int常量上。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>虚幻4入门</title>
    <link href="/2022/03/22/%E8%99%9A%E5%B9%BB4%E5%85%A5%E9%97%A8/"/>
    <url>/2022/03/22/%E8%99%9A%E5%B9%BB4%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="虚幻4工程文件夹的结构"><a href="#虚幻4工程文件夹的结构" class="headerlink" title="虚幻4工程文件夹的结构"></a>虚幻4工程文件夹的结构</h3><div class="code-wrapper"><pre><code class="hljs">Config ：包含项目设置，键盘输入之类的配置文件Content ：存放引擎或游戏内容，包括地图、贴图、模型、材质、蓝图等Intermediate 包含了在编译引擎或游戏时生成的临时文件Saved 包含了自动保存内容，配置（*.ini）文件以及日志文件.uproject 项目启动程序，开启项目</code></pre></div><img src="/2022/03/22/%E8%99%9A%E5%B9%BB4%E5%85%A5%E9%97%A8/%E9%A1%B9%E7%9B%AE%E7%BB%84%E6%88%90.png" class>]]></content>
    
    
    <categories>
      
      <category>虚幻4</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
