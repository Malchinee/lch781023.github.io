<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>IOC本质分析探究</title>
    <link href="/2022/03/25/IOC%E6%9C%AC%E8%B4%A8%E5%88%86%E6%9E%90%E6%8E%A2%E7%A9%B6/"/>
    <url>/2022/03/25/IOC%E6%9C%AC%E8%B4%A8%E5%88%86%E6%9E%90%E6%8E%A2%E7%A9%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="IOC本质分析探究"><a href="#IOC本质分析探究" class="headerlink" title="IOC本质分析探究"></a>IOC本质分析探究</h1><h3 id="IOC本质"><a href="#IOC本质" class="headerlink" title="IOC本质"></a>IOC本质</h3><p><strong>控制反转IOC</strong>是一种设计思想。没有IOC的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系<strong>完全硬编码在程序中</strong>，对象的创建由程序自己控制，控制反转后将对象的创建转移给第三方。</p><h3 id="理论推导"><a href="#理论推导" class="headerlink" title="理论推导"></a>理论推导</h3><p>我们有4个类：<br>1、userDao接口</p><figure class="highlight aspectj"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">userDao</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2、userDaoImpl实现类</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">package dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">userDaoImpl</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">userDao</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> getUser()&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;默认获取用户数据&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>3、userService业务接口</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">package</span> service;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">userService</span> </span>&#123;<br>     <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getUser</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>4、userServiceImpl业务实现类</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> service;<br><br><span class="hljs-keyword">import</span> dao.userDao;<br><span class="hljs-keyword">import</span> dao.userDaoImpl;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">userServiceImpl</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">userService</span></span></span>&#123;<br>    <span class="hljs-keyword">private</span> userDao userDao=<span class="hljs-keyword">new</span> <span class="hljs-type">userDaoImpl</span>() ;<br><br>    <span class="hljs-keyword">public</span> void getUser()&#123;<br>        userDao.getUser();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="/2022/03/25/IOC%E6%9C%AC%E8%B4%A8%E5%88%86%E6%9E%90%E6%8E%A2%E7%A9%B6/contest.png" class><p>main方法：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">import</span> service.<span class="hljs-property">userServiceImpl</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">myTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        userServiceImpl userService=<span class="hljs-keyword">new</span> <span class="hljs-title function_">userServiceImpl</span>();<br>        userService.<span class="hljs-title function_">getUser</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行项目，得到结果：</p><img src="/2022/03/25/IOC%E6%9C%AC%E8%B4%A8%E5%88%86%E6%9E%90%E6%8E%A2%E7%A9%B6/result1.png" class><p><strong>若新的需求：增加mysql的实现</strong>，此时代码又需要修改：<br>添加userDaoMysql类：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">package dao;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-symbol">userDaoImpl</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">userDao</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> getUser()&#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;默认获取用户数据&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>并且改变userServiceImpl类：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">userServiceImpl</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">userService</span></span></span>&#123;<br>    <span class="hljs-keyword">private</span> userDao userDao=<span class="hljs-keyword">new</span> <span class="hljs-type">userDaoMysql</span>() ;<br><br>    <span class="hljs-keyword">public</span> void getUser()&#123;<br>        userDao.getUser();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时的运行结果为：</p><img src="/2022/03/25/IOC%E6%9C%AC%E8%B4%A8%E5%88%86%E6%9E%90%E6%8E%A2%E7%A9%B6/result2.png" class><p><strong>如果又有新的需求，userServiceImp类又需要修改。但是实际改变可能需要几十个类，如此下去工程量很大</strong></p><p>上述是通过程序创建对象，<strong>利用set进行动态值的注入</strong>，用户实际上调用的是业务层，dao层不需要接触</p><img src="/2022/03/25/IOC%E6%9C%AC%E8%B4%A8%E5%88%86%E6%9E%90%E6%8E%A2%E7%A9%B6/set%E6%B3%A8%E5%85%A5.png" class><img src="/2022/03/25/IOC%E6%9C%AC%E8%B4%A8%E5%88%86%E6%9E%90%E6%8E%A2%E7%A9%B6/123456789.png" class><p><strong>在之前的代码中，用户需求可能会影响我们原来的代码，我们需要根据用户的需求去修改源代码</strong>，如果代码量大，修改代码的成本会十分昂贵。<strong>我们使用set接口实现</strong>，现在控制权在用户手上，程序<strong>由主动变成被动接受对象</strong></p><p>这种思想从本质上解决问题，程序员不需要管理对象的创建了，系统耦合性大大降低，可以专注于业务的实现，这就是IOC的原型</p><img src="/2022/03/25/IOC%E6%9C%AC%E8%B4%A8%E5%88%86%E6%9E%90%E6%8E%A2%E7%A9%B6/789456.png" class><p>IOC是spring框架的核心内容，使用多种方式完美实现IOC，可以使用xml配置，也可以使用注解</p><p>spring容器在初始化时先读取配置文件，根据配置文件或元数据创建与组织对象存入容器中，程序使用时再从IOC容器中取出需要的对象</p><img src="/2022/03/25/IOC%E6%9C%AC%E8%B4%A8%E5%88%86%E6%9E%90%E6%8E%A2%E7%A9%B6/qwe.png" class><p>采用xml方式配置bean的时候，bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的</p><p><strong>控制反转是一种通过描述（xml或注解）并通过第三方去生产或获取特定对象的方式。在spring中实现控制反转的是IOC容器，其实现方法是依赖注入</strong></p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>虚幻4入门</title>
    <link href="/2022/03/22/%E8%99%9A%E5%B9%BB4%E5%85%A5%E9%97%A8/"/>
    <url>/2022/03/22/%E8%99%9A%E5%B9%BB4%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="虚幻4工程文件夹的结构"><a href="#虚幻4工程文件夹的结构" class="headerlink" title="虚幻4工程文件夹的结构"></a>虚幻4工程文件夹的结构</h3><div class="code-wrapper"><pre><code class="hljs">Config ：包含项目设置，键盘输入之类的配置文件Content ：存放引擎或游戏内容，包括地图、贴图、模型、材质、蓝图等Intermediate 包含了在编译引擎或游戏时生成的临时文件Saved 包含了自动保存内容，配置（*.ini）文件以及日志文件.uproject 项目启动程序，开启项目</code></pre></div><img src="/2022/03/22/%E8%99%9A%E5%B9%BB4%E5%85%A5%E9%97%A8/%E9%A1%B9%E7%9B%AE%E7%BB%84%E6%88%90.png" class>]]></content>
    
    
    <categories>
      
      <category>虚幻4</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring入门</title>
    <link href="/2022/03/07/Spring/"/>
    <url>/2022/03/07/Spring/</url>
    
    <content type="html"><![CDATA[<h1 id="Spring-入门"><a href="#Spring-入门" class="headerlink" title="Spring 入门"></a>Spring 入门</h1><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><div class="code-wrapper"><pre><code class="hljs">1、开源免费框架2、轻量级、非入侵式3、控制反转（IOC），面向切面编程（AOP）4、支持事务的处理，对框架整合的支持！</code></pre></div><h3 id="Spring-组成"><a href="#Spring-组成" class="headerlink" title="Spring 组成"></a>Spring 组成</h3><img src="/2022/03/07/Spring/Spring%E7%BB%84%E6%88%90.png" class><img src="/2022/03/07/Spring/java%E8%B7%AF%E7%BA%BF.png" class><h4 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h4><div class="code-wrapper"><pre><code class="hljs">一个快速开发的脚手架基于SpringBoot可以快速开发单个微服务约定大于配置</code></pre></div><h4 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h4><div class="code-wrapper"><pre><code class="hljs">SpringClud基于SpringBoot实现</code></pre></div>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
