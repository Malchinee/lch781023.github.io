<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第十五章-面向对象程序设计</title>
    <link href="/2022/04/07/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/04/07/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第八章 IO库</title>
    <link href="/2022/04/07/%E7%AC%AC%E5%85%AB%E7%AB%A0-IO%E5%BA%93/"/>
    <url>/2022/04/07/%E7%AC%AC%E5%85%AB%E7%AB%A0-IO%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="IO类"><a href="#IO类" class="headerlink" title="IO类"></a>IO类</h1><p>iostream:读写流的基本类型<br>fstream：读写命名文件类型<br>sstream：读写内存string对象的类型</p><img src="/2022/04/07/%E7%AC%AC%E5%85%AB%E7%AB%A0-IO%E5%BA%93/IO%E7%B1%BB.jpg" class><h2 id="IO对象无拷贝或赋值"><a href="#IO对象无拷贝或赋值" class="headerlink" title="IO对象无拷贝或赋值"></a>IO对象无拷贝或赋值</h2><p>不能拷贝IO对象，也不能将形参或返回类型设置为流类型，进行IO操作的函数通常以引用方式传递和返回流，传递和返回的引用不能是const的</p><h2 id="条件状态"><a href="#条件状态" class="headerlink" title="条件状态"></a>条件状态</h2><p>确定一个流对象状态最简单的方法是将它当作一个条件来使用</p><figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">(cin&gt;&gt;word)</span></span><br></code></pre></td></tr></table></figure><h1 id="文件输入与输出"><a href="#文件输入与输出" class="headerlink" title="文件输入与输出"></a>文件输入与输出</h1><h2 id="fstream代替iosstream-amp"><a href="#fstream代替iosstream-amp" class="headerlink" title="fstream代替iosstream&amp;"></a>fstream代替iosstream&amp;</h2><p>如果有一个函数接受一个ostream&amp;的参数，我们可以给它传递一个ofstream对象，istream同理</p><h2 id="open和close"><a href="#open和close" class="headerlink" title="open和close"></a>open和close</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">ofstream <span class="hljs-keyword">out</span>;<br><span class="hljs-keyword">out</span>.<span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;xxx.txt&quot;</span>);<br></code></pre></td></tr></table></figure><p>进行open是否成功的检验</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">if</span>(out);<br></code></pre></td></tr></table></figure><h2 id="以out模式打开文件会丢弃已有数据"><a href="#以out模式打开文件会丢弃已有数据" class="headerlink" title="以out模式打开文件会丢弃已有数据"></a>以out模式打开文件会丢弃已有数据</h2><p>保留被ofstream打开的文件中已有数据的唯一方式是显式指定app或in模式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x,sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-function">ifstream <span class="hljs-title">srcFile</span><span class="hljs-params">(<span class="hljs-string">&quot;in.txt&quot;</span>, ios::in)</span></span>; <span class="hljs-comment">//以文本模式打开in.txt备读</span><br>    <span class="hljs-keyword">if</span> (!srcFile) &#123; <span class="hljs-comment">//打开失败</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;error opening source file.&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function">ofstream <span class="hljs-title">destFile</span><span class="hljs-params">(<span class="hljs-string">&quot;out.txt&quot;</span>, ios::out)</span></span>; <span class="hljs-comment">//以文本模式打开out.txt备写</span><br>    <span class="hljs-keyword">if</span> (!destFile) &#123;<br>        srcFile.<span class="hljs-built_in">close</span>(); <span class="hljs-comment">//程序结束前不能忘记关闭以前打开过的文件</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;error opening destination file.&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">//可以像用cin那样用ifstream对象</span><br>    <span class="hljs-keyword">while</span> (srcFile &gt;&gt; x) &#123;<br>        sum += x;<br>        <span class="hljs-comment">//可以像 cout 那样使用 ofstream 对象</span><br>        destFile &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;sum：&quot;</span> &lt;&lt; sum &lt;&lt; endl;<br>    destFile.<span class="hljs-built_in">close</span>();<br>    srcFile.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="string流"><a href="#string流" class="headerlink" title="string流"></a>string流</h1><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">PersonInfo</span>&#123;<br>    string name;<br>    vector&lt;string&gt; phones;<br>&#125;<br><br>string line,<span class="hljs-type">word</span>;<span class="hljs-comment">//分别保存来自输入的一行和单词</span><br>vector&lt;PersonInfo&gt; people;<span class="hljs-comment">//保存来自输入的所有记录</span><br><br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">getline</span>(is.line))&#123;<br>    PersonInfo info;<span class="hljs-comment">//创建一个保存此记录数据的对象</span><br>    <span class="hljs-function">isstringstream <span class="hljs-title">record</span><span class="hljs-params">(line)</span></span>;<span class="hljs-comment">//将记录绑定到刚读入的行</span><br>        record&gt;&gt;info.name;<span class="hljs-comment">//读取名字</span><br>    <span class="hljs-keyword">while</span>(record&gt;&gt;<span class="hljs-type">word</span>)<span class="hljs-comment">//读取电话号码</span><br>        info.phones.<span class="hljs-built_in">push_back</span>(<span class="hljs-type">word</span>);<span class="hljs-comment">//保持它们</span><br>    people.<span class="hljs-built_in">push_back</span>(info);<span class="hljs-comment">//将此记录追加到people末尾</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">for</span>(const auto &amp;entry :people)&#123;<span class="hljs-regexp">//</span>对people的每一项<br>    osstringstream formatted,badNums;<span class="hljs-regexp">//</span>每个循环步创建的对象<br>    <span class="hljs-keyword">for</span>(const auto &amp;nums : entry.phones)&#123;<span class="hljs-regexp">//</span>对每个数<br>        <span class="hljs-keyword">if</span>(!valid(nums))&#123;<br>            badNums&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;nums;<span class="hljs-regexp">//</span>将数以字符串的形式存入badNums<br>        &#125;<span class="hljs-keyword">else</span><br>            formatted &lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;format(nums);<span class="hljs-regexp">//</span>将格式化的字符串“写入”formatted<br>    &#125;<br>    <span class="hljs-keyword">if</span>(banNums.str().empty())<span class="hljs-regexp">//</span>没有错误的数<br>        os&lt;&lt;entry.name&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;formatted.str()&lt;&lt;endl;<span class="hljs-regexp">//</span>打印名字和格式化的数<br>    <span class="hljs-keyword">else</span> <span class="hljs-regexp">//</span>否则，打印名字和错误的数<br>        cerr&lt;&lt;<span class="hljs-string">&quot;input error:&quot;</span>&lt;&lt;entry.name&lt;&lt;<span class="hljs-string">&quot;invalid number(s) &quot;</span>&lt;&lt;badNums.str()&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>valid和format，分别完成电话号码的验证和改变格式的功能。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前七章-C++基础</title>
    <link href="/2022/04/05/%E5%89%8D%E4%B8%83%E7%AB%A0-C++%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/04/05/%E5%89%8D%E4%B8%83%E7%AB%A0-C++%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h2><h4 id="初始化和对const的引用"><a href="#初始化和对const的引用" class="headerlink" title="初始化和对const的引用"></a>初始化和对const的引用</h4><p>初始化常量引用时，可以用任意表达式作为初始值，只要该表达式能转换成引用的类型即可。<strong>引用类型都要和与之绑定的对象的类型一致，此处属于两种例外之一</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">double</span> dval =<span class="hljs-number">3.14</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> &amp;ri=dval;<br></code></pre></td></tr></table></figure><p>此处正确，编译器把上述代码变成如下形式，此时，ri绑定了一个临时量对象。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> temp= dval;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> &amp;ri=temp;<br></code></pre></td></tr></table></figure><p>同样的指针也类似,<strong>允许指向常量的指针指向非常量对象</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">double <span class="hljs-attribute">dval</span>=3.14;<br>const double <span class="hljs-number">*c</span><span class="hljs-attribute">ptr</span>=&amp;dval;<br></code></pre></td></tr></table></figure><h4 id="顶层const"><a href="#顶层const" class="headerlink" title="顶层const"></a>顶层const</h4><p>表示指针本身是个常量，<strong>底层const</strong>表示<br><strong>顶层const</strong>可以表示任意对象是常量，<strong>底层const</strong>与指针和引用等复合类型的基本类型部分有关。<br>对于拷贝操作来说，顶层const基本不受影响，而对于底层const，拷入和拷出的对象必须是相同的底层const，或者非常量可以转化成常量，而常量不能转化成非常量。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">const int <span class="hljs-attribute">i</span>=0;<br>int &amp;<span class="hljs-attribute">r</span>=i;<br></code></pre></td></tr></table></figure><p>上述代码是错误的，普通的int&amp;类型不能绑定到int常量上。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>虚幻4入门</title>
    <link href="/2022/03/22/%E8%99%9A%E5%B9%BB4%E5%85%A5%E9%97%A8/"/>
    <url>/2022/03/22/%E8%99%9A%E5%B9%BB4%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="虚幻4工程文件夹的结构"><a href="#虚幻4工程文件夹的结构" class="headerlink" title="虚幻4工程文件夹的结构"></a>虚幻4工程文件夹的结构</h3><div class="code-wrapper"><pre><code class="hljs">Config ：包含项目设置，键盘输入之类的配置文件Content ：存放引擎或游戏内容，包括地图、贴图、模型、材质、蓝图等Intermediate 包含了在编译引擎或游戏时生成的临时文件Saved 包含了自动保存内容，配置（*.ini）文件以及日志文件.uproject 项目启动程序，开启项目</code></pre></div><img src="/2022/03/22/%E8%99%9A%E5%B9%BB4%E5%85%A5%E9%97%A8/%E9%A1%B9%E7%9B%AE%E7%BB%84%E6%88%90.png" class>]]></content>
    
    
    <categories>
      
      <category>虚幻4</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
