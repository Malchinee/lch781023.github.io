<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>第十章-泛型算法</title>
    <link href="/2022/04/16/%E7%AC%AC%E5%8D%81%E7%AB%A0-%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/"/>
    <url>/2022/04/16/%E7%AC%AC%E5%8D%81%E7%AB%A0-%E6%B3%9B%E5%9E%8B%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>大多数算法定义在头文件algorithm中，标准库还在numeric中定义了一组数值泛型算法<br>这些算法并不直接操作容器，而是遍历由两个迭代器指定的一个元素范围来进行操作。<br>如标准库算法find：</p><figure class="highlight scss"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs scss">auto result <span class="hljs-built_in">find</span>(vec.cbegin(),vec<span class="hljs-selector-class">.cend</span>(),val);<br></code></pre></td></tr></table></figure><h4 id="迭代器令算法不依赖于容器，但算法依赖于元素类型的操作"><a href="#迭代器令算法不依赖于容器，但算法依赖于元素类型的操作" class="headerlink" title="迭代器令算法不依赖于容器，但算法依赖于元素类型的操作"></a>迭代器令算法不依赖于容器，但算法依赖于元素类型的操作</h4><h1 id="初识泛型算法"><a href="#初识泛型算法" class="headerlink" title="初识泛型算法"></a>初识泛型算法</h1><h2 id="只读算法"><a href="#只读算法" class="headerlink" title="只读算法"></a>只读算法</h2><p><strong>accumulate</strong></p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">int sum=accumulate(<span class="hljs-name">vec</span>.cbegin(),vec.cend(),<span class="hljs-number">0</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="算法和元素类型"><a href="#算法和元素类型" class="headerlink" title="算法和元素类型"></a>算法和元素类型</h3><p>序列中的元素类型必须与第三个参数匹配，或者能够转换为第三个参数的类型。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">string num=accumulate(<span class="hljs-name">vec</span>.cbegin(),vec.cend(),<span class="hljs-string">&quot;&quot;</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>错误，因为””传入一个和const char* 的对象，const char*并没有定义+运算符</p><h3 id="操作两个序列的算法-equals"><a href="#操作两个序列的算法-equals" class="headerlink" title="操作两个序列的算法 equals"></a>操作两个序列的算法 equals</h3><p>equals确定两个序列是否保存相同的值<br>接受第三个参数： 表示第二个序列的首元素</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">equals(<span class="hljs-name">roster1</span>.cbegin(),roster1.cend(),rsoter2.cbegin)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p><strong>rsoter2中的元素数目应至少与roster1一样多</strong></p><h2 id="写容器元素的算法"><a href="#写容器元素的算法" class="headerlink" title="写容器元素的算法"></a>写容器元素的算法</h2><p><strong>序列原大小应不小于算法写入的元素数目</strong>，算法不会执行容器操作，因此它们自身不可能改变容器的大小fill(vec,cbegin(),vec.cend)<br>fill：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">fill(<span class="hljs-name">vec</span>.cbegin(),vec,cbegin()+vec,size()/2,<span class="hljs-number">10</span>)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="算法不检查写操作"><a href="#算法不检查写操作" class="headerlink" title="算法不检查写操作"></a>算法不检查写操作</h3><p>fill_n：接受单迭代器，一个计数值和一个值，可以将定值赋值给从迭代器开始的元素到指定个数的元素。</p><h3 id="back-inserter-插入迭代器"><a href="#back-inserter-插入迭代器" class="headerlink" title="back_inserter 插入迭代器"></a>back_inserter 插入迭代器</h3><p>头文件：iterator<br>back_inserter接受一个指向容器的引用，返回一个与该容器绑定的插入迭代器。当我们调用此迭代器赋值时，赋值运算符会调用push_back将一个具有给定值的元素添加到容器中</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs perl">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-keyword">vec</span>;<br>fill_n(back_inserter(<span class="hljs-keyword">vec</span>),<span class="hljs-number">10</span>,<span class="hljs-number">0</span>);<span class="hljs-regexp">//</span>添加<span class="hljs-number">10</span>个<span class="hljs-number">0</span>元素到<span class="hljs-keyword">vec</span>中<br></code></pre></td></tr></table></figure><h3 id="拷贝算法-copy"><a href="#拷贝算法-copy" class="headerlink" title="拷贝算法 copy"></a>拷贝算法 copy</h3><p>第三个参数表示目的序列的起始位置<br>copy返回的是目的位置迭代器的值<br><strong>replace</strong>：<br>接受四个参数：两个表示范围，后两个一个是要搜索的值，另一个是新值。将所有等于第一个值的元素替换为第二个值<br><strong>replace_copy</strong>：<br>接受5个参数：前两个表示范围，第三个迭代器参数，指出调整后序列的位置，后两个同上。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">replace<span class="hljs-constructor">_copy(<span class="hljs-params">list</span>.<span class="hljs-params">cbegin</span>()</span>,<span class="hljs-built_in">list</span>.cend<span class="hljs-literal">()</span>,back<span class="hljs-constructor">_inserter(<span class="hljs-params">ivec</span>)</span>,<span class="hljs-number">0</span>,<span class="hljs-number">42</span>);<br></code></pre></td></tr></table></figure><p>调用后，list并未改变，ivec包含list的一份拷贝，但是list中0全换为42</p><h2 id="重排容器元素的算法"><a href="#重排容器元素的算法" class="headerlink" title="重排容器元素的算法"></a>重排容器元素的算法</h2><h4 id="消除重复单词"><a href="#消除重复单词" class="headerlink" title="消除重复单词"></a>消除重复单词</h4><p>unique重排vector</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs applescript">void elimDups(vector&lt;<span class="hljs-built_in">string</span>&gt;,&amp;<span class="hljs-built_in">words</span>)&#123;<br>    sort(<span class="hljs-built_in">words</span>.begin(),<span class="hljs-built_in">words</span>.<span class="hljs-keyword">end</span>());<br>    auto end_unique=unique(<span class="hljs-built_in">words</span>.begin(),<span class="hljs-built_in">words</span>.<span class="hljs-keyword">end</span>());<br><br>    <span class="hljs-built_in">words</span>.erase(end_unique,<span class="hljs-built_in">words</span>.<span class="hljs-keyword">end</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>unique不删除元素，而是覆盖相邻的重复元素，使不重复的元素出现在序列开始部分，在使用erase进行删除</p><h1 id="定制操作："><a href="#定制操作：" class="headerlink" title="定制操作："></a>定制操作：</h1><h2 id="向算法传递函数"><a href="#向算法传递函数" class="headerlink" title="向算法传递函数"></a>向算法传递函数</h2><h4 id="谓词："><a href="#谓词：" class="headerlink" title="谓词："></a>谓词：</h4><p>可调用的表达式，返回结果是能用做条件的值。<br>分为两类，一元谓词和二元谓词</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第九章-顺序容器</title>
    <link href="/2022/04/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/"/>
    <url>/2022/04/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="顺序容器概述"><a href="#顺序容器概述" class="headerlink" title="顺序容器概述"></a>顺序容器概述</h1><p>vector<br>deque<br>list<br>forward_list<br>array<br>string</p><h1 id="容器库概览"><a href="#容器库概览" class="headerlink" title="容器库概览"></a>容器库概览</h1><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>元素范围：[begin，end)：表示范围自begin开始，于end之前结束。begin于end必须指向<br>相同的容器，end可以与end指向相同的容器，但是不能指向begin之前的位置。 </p><p>begin与end都返回该元素类型的迭代器(iterator)，cbegin与cend返回const_iterator<br>end指向<strong>最后元素的下一位</strong></p><h2 id="容器类型成员"><a href="#容器类型成员" class="headerlink" title="容器类型成员"></a>容器类型成员</h2><img src="/2022/04/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/p1.jpg" class><img src="/2022/04/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/p2.jpg" class><p>除以上，大多数容器还提供<strong>反向迭代器</strong>。<br><strong>类型别名</strong>：如果不了解容器中元素类型但是需要，使用容器的value_type。如果需要元素类型的一个<strong>引用</strong>，可以使用reference或const_reference。</p><h2 id="begin和end成员"><a href="#begin和end成员" class="headerlink" title="begin和end成员"></a>begin和end成员</h2><p>当不需要写访问时，应使用cbegin与cend。</p><h2 id="容器定义与初始化"><a href="#容器定义与初始化" class="headerlink" title="容器定义与初始化"></a>容器定义与初始化</h2><img src="/2022/04/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/p3.jpg" class><h3 id="将一个容器初始化为另一个容器的拷贝"><a href="#将一个容器初始化为另一个容器的拷贝" class="headerlink" title="将一个容器初始化为另一个容器的拷贝"></a>将一个容器初始化为另一个容器的拷贝</h3><p>为了创建一个容器为另一个容器的拷贝，两个容器的类型及其元素类型必须匹配<br>当传递迭代器参数来拷贝一个范围时，就不要求容器类型是相同的了。<br>新容器和原容器中的元素类型也可以不同，只要可以转换（如const char*转换为string）</p><p>可以使用两个迭代器类型表示范围，也可以使用迭代器，容器中某元素表示范围</p><h3 id="与顺序容器大小相关的构造函数"><a href="#与顺序容器大小相关的构造函数" class="headerlink" title="与顺序容器大小相关的构造函数"></a>与顺序容器大小相关的构造函数</h3><p>只有顺序容器的构造函数才接受大小参数，关联容器并不支持</p><h3 id="标准库array具有固定大小"><a href="#标准库array具有固定大小" class="headerlink" title="标准库array具有固定大小"></a>标准库array具有固定大小</h3><p>使用array类型，必须指定元素类型和大小：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">array<span class="hljs-keyword">&lt;<span class="hljs-built_in">int</span>,10&gt;</span></span><span class="hljs-comment">//保存10个int值</span><br></code></pre></td></tr></table></figure><p>不能对内置数组进行拷贝或对象赋值操作，但是array对象可以，但是array对象要求元素类型和大小也相同。</p><h2 id="赋值和swap"><a href="#赋值和swap" class="headerlink" title="赋值和swap"></a>赋值和swap</h2><img src="/2022/04/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/p4.jpg" class><p>上表可用于所有容器<br>如果两容器大小不同，赋值后两者大小都与右边容器大小相同</p><h3 id="使用assign（仅顺序容器）"><a href="#使用assign（仅顺序容器）" class="headerlink" title="使用assign（仅顺序容器）"></a>使用assign（仅顺序容器）</h3><p>assign操作用参数所指定的元素（的拷贝）替换左边容器中的所有元素。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">list&lt;string&gt;names;<br>vector&lt;<span class="hljs-type">const</span> <span class="hljs-type">char</span>*&gt;oldstyle;<br>names=oldstyle  <span class="hljs-comment">//error:容器类型不匹配</span><br>names.<span class="hljs-built_in">assign</span>(oldstyle.<span class="hljs-built_in">cbegin</span>(),oldstyle.<span class="hljs-built_in">cend</span>());<br></code></pre></td></tr></table></figure><p>由于旧元素被替代，传递给assign的迭代器不能指向调用assign的容器。</p><h3 id="使用swap"><a href="#使用swap" class="headerlink" title="使用swap"></a>使用swap</h3><p>除array外，交换两个容器内容的操作会很快，元素本身并未交换，swap只是交换了容器的内部数据结构。<br>除array外，swap不对任何元素进行拷贝，删除或插入操作，因此可以保证在常数时间内完成</p><p>与其他容器不同，swap两个array对象会真正交换他们的元素，时间与array中元素数目成正比。</p><h2 id="容器大小操作"><a href="#容器大小操作" class="headerlink" title="容器大小操作"></a>容器大小操作</h2><p>除forward_list以外，每个容器都支持三个与大小有关的操作：size,empty和max_size，forward_list不支持size。</p><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><ul><li>如果两个容器，大小相同，所有元素两两相等，容器相等，否则不等</li><li>大小不同，较小容器每个元素都等于较大容器对应元素，则较小容器小于较大容器</li><li>两个容器都不为对方的子序列，则比较结果取决于第一个不相等的元素的比较结果<br>自定义类的对象要使用元素的关系运算符。</li></ul><h1 id="顺序容器操作"><a href="#顺序容器操作" class="headerlink" title="顺序容器操作"></a>顺序容器操作</h1><h2 id="向容器中添加元素"><a href="#向容器中添加元素" class="headerlink" title="向容器中添加元素"></a>向容器中添加元素</h2><p>除array外：</p><img src="/2022/04/13/%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8/p5.jpg" class><h3 id="使用push-back"><a href="#使用push-back" class="headerlink" title="使用push_back"></a>使用push_back</h3><p>除array和forward_list都支持</p><h3 id="使用push-front"><a href="#使用push-front" class="headerlink" title="使用push_front"></a>使用push_front</h3><p>list、forward_list和deque容器支持<br>vector、deque在首位之外插入元素会很耗时。</p><h3 id="在容器的特定位置添加元素"><a href="#在容器的特定位置添加元素" class="headerlink" title="在容器的特定位置添加元素"></a>在容器的特定位置添加元素</h3><p>vector、deque、list和string都支持insert。<br>insert第一个参数为迭代器，第二个参数为元素，将此元素插入到迭代器元素之前。</p><h3 id="插入范围内元素"><a href="#插入范围内元素" class="headerlink" title="插入范围内元素"></a>插入范围内元素</h3><p>insert可以添加第三个参数，表示将第二个元素插入的个数。此时，返回指向第一个新加入元素的迭代器。<br>但是不能传入一对迭代器</p><h3 id="使用emplace操作"><a href="#使用emplace操作" class="headerlink" title="使用emplace操作"></a>使用emplace操作</h3><p>emplace_front、emplace、emplace_back：<br>当使用insert等时，我们将元素的对象传递，对象被拷贝到容器中。而调用emplace时，将参数传递给元素类型的构造函数，emplace成员使用这些参数在容器管理的内存空间中直接构造元素。<br>如使用emplace_back会在容器管理的内存空间中直接创建对象，而push_back会创建一个局部临时对象，并将其压入容器中</p><h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><p>直接方法：调用front和back；<br>间接方法：解引用begin和end返回的迭代器来获得元素的引用</p><h3 id="访问成员函数返回的是引用"><a href="#访问成员函数返回的是引用" class="headerlink" title="访问成员函数返回的是引用"></a>访问成员函数返回的是引用</h3><p>front、back、下标、at等返回的都是引用，如果是const对象，返回const引用</p><h3 id="下标操作和安全的随机访问"><a href="#下标操作和安全的随机访问" class="headerlink" title="下标操作和安全的随机访问"></a>下标操作和安全的随机访问</h3><p>注意下标越界问题</p><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><h3 id="pop-front和pop-back成员函数"><a href="#pop-front和pop-back成员函数" class="headerlink" title="pop_front和pop_back成员函数"></a>pop_front和pop_back成员函数</h3><p>vector和string不支持此操作<br>这些操作返回void，如果需要弹出元素的值，就必须在执行弹出操作之前保存它</p><h3 id="从容器内部删除一个元素"><a href="#从容器内部删除一个元素" class="headerlink" title="从容器内部删除一个元素"></a>从容器内部删除一个元素</h3><p>如：删除所有奇数</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-keyword">list</span>&lt;int&gt; lst = &#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>auto <span class="hljs-literal">it</span>=lst.begin();<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">it</span>!=lst.end())&#123;<br>    <span class="hljs-keyword">if</span>(*<span class="hljs-literal">it</span>%<span class="hljs-number">2</span>)<br>        <span class="hljs-literal">it</span>=lst.erase(<span class="hljs-literal">it</span>);<br>    <span class="hljs-keyword">else</span> ++<span class="hljs-literal">it</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="删除多个元素"><a href="#删除多个元素" class="headerlink" title="删除多个元素"></a>删除多个元素</h3><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">ele<span class="hljs-name">m1</span>=slist.erase<span class="hljs-comment">(elem1,elem2)</span> <span class="hljs-comment">//调用后elem1==elem2</span><br></code></pre></td></tr></table></figure><p>删除所有元素，可以使用clear()，也可以使用迭代器表示范围</p><h2 id="特殊的forward-list操作"><a href="#特殊的forward-list操作" class="headerlink" title="特殊的forward_list操作"></a>特殊的forward_list操作</h2><p>在一个forward_list中添加或删除元素的操作都会改变前驱节点的之后的元素，所以不能使用insert，emplace和erase。但是有insert_after，emplace_after，erase_after。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">forward_list&lt;<span class="hljs-built_in">int</span>&gt; flst=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>auto prev=flst.before<span class="hljs-constructor">_begin()</span>;       <span class="hljs-comment">//表示flst中的&quot;首前元素&quot;</span><br>auto curr=flst.<span class="hljs-keyword">begin</span><span class="hljs-literal">()</span>;                 <span class="hljs-comment">//表示flst中的第一个元素</span><br><span class="hljs-keyword">while</span>(curr!=flst.<span class="hljs-keyword">end</span><span class="hljs-literal">()</span>)&#123;<br>    <span class="hljs-keyword">if</span>(*curr%<span class="hljs-number">2</span>)<br>        curr=flst.erase<span class="hljs-constructor">_after(<span class="hljs-params">prev</span>)</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        prev=curr;<br>        ++curr;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="改变容器大小"><a href="#改变容器大小" class="headerlink" title="改变容器大小"></a>改变容器大小</h2><p>array不支持<br>resize改变容器大小。<br>当前大小&gt;要求的大小：容器后部的元素被删除；<br>当前大小&lt;要求的大小：新元素添加到容器后部。</p><h2 id="容器操作可能使迭代器失效"><a href="#容器操作可能使迭代器失效" class="headerlink" title="容器操作可能使迭代器失效"></a>容器操作可能使迭代器失效</h2><p><strong>P315</strong></p><h3 id="编写改变容器的循环程序"><a href="#编写改变容器的循环程序" class="headerlink" title="编写改变容器的循环程序"></a>编写改变容器的循环程序</h3><p>调用insert或erase，更新迭代会很容易，这些操作都会返回迭代器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">vector&lt;<span class="hljs-built_in">int</span>&gt;vi=&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>&#125;;<br>auto <span class="hljs-built_in">iter</span>=vi.begin();<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">iter</span>!=vi.end())&#123;<br>    <span class="hljs-keyword">if</span>(*<span class="hljs-built_in">iter</span>%<span class="hljs-number">2</span>)&#123;<br>        <span class="hljs-built_in">iter</span>=vi.insert(<span class="hljs-built_in">iter</span>,*<span class="hljs-built_in">iter</span>);//复制当前元素<br>        <span class="hljs-built_in">iter</span>+=<span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">iter</span>=vi.erase(<span class="hljs-built_in">iter</span>);//删除偶数元素<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="不要保存end返回的迭代器"><a href="#不要保存end返回的迭代器" class="headerlink" title="不要保存end返回的迭代器"></a>不要保存end返回的迭代器</h3><p>添加或删除vector或string中的元素时，end返回的迭代器总是会失效，必须每次重新调用end。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第十五章-面向对象程序设计</title>
    <link href="/2022/04/07/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/04/07/%E7%AC%AC%E5%8D%81%E4%BA%94%E7%AB%A0-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="定义基类和派生类"><a href="#定义基类和派生类" class="headerlink" title="定义基类和派生类"></a>定义基类和派生类</h1><p>基类：<br>Quote<br>派生类：<br>Disc_quote 继承Quote<br>Bulk_quote 继承Disc_quote</p><h2 id="定义派生类"><a href="#定义派生类" class="headerlink" title="定义派生类"></a>定义派生类</h2><h3 id="派生类构函数"><a href="#派生类构函数" class="headerlink" title="派生类构函数"></a>派生类构函数</h3><p>派生类构造函数通过初始化列表将实参传递给基类构造函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">Bulk_quote(<span class="hljs-params">const</span> <span class="hljs-params">std</span>::<span class="hljs-params">string</span> &amp; <span class="hljs-params">book</span>,<span class="hljs-params">double</span> <span class="hljs-params">p</span>,<span class="hljs-params">std</span>::<span class="hljs-params">size_t</span> <span class="hljs-params">qty</span>,<span class="hljs-params">double</span> <span class="hljs-params">disc</span>)</span><br>:<span class="hljs-constructor">Qutoe(<span class="hljs-params">book</span>,<span class="hljs-params">p</span>)</span>,min<span class="hljs-constructor">_qty(<span class="hljs-params">qty</span>)</span>,discount(disc)&#123;&#125;<br></code></pre></td></tr></table></figure><p>除非特别指出，否则派生类的基类部分会像数据成员一样执行默认初始化。如果想<strong>使用其他的基类构造函数</strong>，我们需要以<strong>类名加圆括号内的实参列表</strong>的形式为构造函数提供初始值</p><h3 id="继承与静态成员"><a href="#继承与静态成员" class="headerlink" title="继承与静态成员"></a>继承与静态成员</h3><p><strong>static</strong>关键字：整个继承体系中只存在该成员的唯一定义。假设某成员是可访问的，我们既能通过基类使用它也能通过派生类使用它。</p><h3 id="防止继承的发生"><a href="#防止继承的发生" class="headerlink" title="防止继承的发生"></a>防止继承的发生</h3><p><strong>final</strong>：断子绝孙</p><h2 id="类型转换与继承"><a href="#类型转换与继承" class="headerlink" title="类型转换与继承"></a>类型转换与继承</h2><p>我们可以将基类的指针或引用绑定到派生类对象中。例如，我们可以用Quote&amp;指向一个Bulk_qupte对象，也可以把一个Bulk_quote对象的地址赋给一个Quote*</p><h3 id="静态类型与动态类型"><a href="#静态类型与动态类型" class="headerlink" title="静态类型与动态类型"></a>静态类型与动态类型</h3><p>表达式的<strong>静态类型</strong>在编译时总是已知的，它是变量声明时的类型或表达式生成的类型<br><strong>动态类型</strong>时变量或表达式表示的内存中的对象的类型，知道运行时才可知</p><p>如果表达式既不是引用也不是指针，则它的动态类型与静态类型一致。</p><p>编译器在编译时无法确定某个特定类型转换在运行时是否安全，因为编译器只能通过<strong>检查指针或引用的静态类型</strong>来推断该转换是否合法。<br>如果在基类中含有一个或多个虚函数，我们可以使用<strong>dynamic_cast</strong>请求一个类型转换<br>如果已知某个基类向派生类的转换是否是安全的，我们可以使用<strong>static_cast</strong>强制覆盖掉编译器的检查工作</p><h3 id="······在对象之间不存在类型转换"><a href="#······在对象之间不存在类型转换" class="headerlink" title="······在对象之间不存在类型转换"></a>······在对象之间不存在类型转换</h3><p>当我们给基类的构造函数传递一个基类派生类对象时，实际运行的构造函数时基类的中定义的那个，显然该基类构造函数只能处理基类自己的成员。</p><p>类似的，如果我们将一个派生类对象赋值给一个基类对象，实际运行的赋值运算符也是基类中定义的那个，该运算符只能处理基类自己的成员。也就是说，属于派生类而不属于基类的成员被<strong>切掉</strong>了。</p><h1 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h1><h3 id="派生类的虚函数"><a href="#派生类的虚函数" class="headerlink" title="派生类的虚函数"></a>派生类的虚函数</h3><p>一个派生类的函数如果覆盖了某个继承而来的虚函数，则它的形参类型必须与它被覆盖的基类函数<strong>完全一致</strong>。同样，派生类中虚函数的返回类型也必须与基类函数匹配，该规则存在一个<strong>例外</strong>：</p><p>类的虚函数返回<strong>类本身的指针或引用时</strong>：如D由B派生得到，基类的虚函数返回B*而派生类对应的函数可以返回D*，不过这样的返回类型要求从D到B的类型转换是可访问的。</p><h3 id="final和override说明符"><a href="#final和override说明符" class="headerlink" title="final和override说明符"></a>final和override说明符</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">struct</span> B&#123;<br>    <span class="hljs-function">vitural <span class="hljs-keyword">void</span> <span class="hljs-title">f1</span>(<span class="hljs-params"><span class="hljs-built_in">int</span></span>)<span class="hljs-keyword">const</span></span>;<br>    <span class="hljs-function">vitural <span class="hljs-keyword">void</span> <span class="hljs-title">f2</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f3</span>()</span>;<br>&#125;;<br><span class="hljs-keyword">struct</span> D1:B&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f1</span>(<span class="hljs-params"><span class="hljs-built_in">int</span></span>) <span class="hljs-keyword">const</span> <span class="hljs-keyword">override</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f2</span>(<span class="hljs-params"><span class="hljs-built_in">int</span></span>) <span class="hljs-keyword">override</span></span>;   <span class="hljs-comment">//错误，B没有形如f2(int)的函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">f3</span>() <span class="hljs-keyword">override</span>      <span class="hljs-comment">//错误：f3不是虚函数</span></span><br><span class="hljs-function">    <span class="hljs-keyword">void</span> <span class="hljs-title">f4</span>() <span class="hljs-keyword">override</span>    <span class="hljs-comment">//错误，B没有名为f4的函数</span></span><br><span class="hljs-function">&#125;</span>;<br></code></pre></td></tr></table></figure><h3 id="回避虚函数的机制"><a href="#回避虚函数的机制" class="headerlink" title="回避虚函数的机制"></a>回避虚函数的机制</h3><p>使用<strong>作用域运算符</strong>可以实现对虚函数的调用不要进行动态绑定，而是强迫其执行虚函数的某个版本。<br>回避虚函数的默认机制：当一个派生类的虚函数调用覆盖掉的基类的虚函数版本。在此情况下，基类的版本通常完成继承层次中所有类型都要做的共同任务，而派生类中定义的版本需要执行一些与派生类本身密切相关的操作。</p><h1 id="抽象基类"><a href="#抽象基类" class="headerlink" title="抽象基类"></a>抽象基类</h1><h3 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h3><p>我们通过在函数体的位置（在生命语句的分号之前）书写&#x3D;0就可以将一个虚函数说明为<strong>纯虚函数</strong>，其中，&#x3D;0只能出现在类的内部的虚函数声明语句处</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">Disc_quote:<span class="hljs-symbol">public</span></span> <span class="hljs-symbol">Quote</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        ··········<br>        <span class="hljs-built_in">double</span> bet_price(std::size_t) <span class="hljs-keyword">const</span>=<span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们也可以给纯虚函数提供定义，不过函数体在类的外部，<strong>我们不能在类的内部为一个&#x3D;0的函数提供函数体</strong>。</p><h3 id="含有纯虚函数的类是抽象基类"><a href="#含有纯虚函数的类是抽象基类" class="headerlink" title="含有纯虚函数的类是抽象基类"></a>含有纯虚函数的类是抽象基类</h3><p>（含有或者未经覆盖直接继承），我们不能直接创建一个抽象基类的对象。</p><h1 id="访问控制与继承"><a href="#访问控制与继承" class="headerlink" title="访问控制与继承"></a>访问控制与继承</h1><h3 id="受保护的成员"><a href="#受保护的成员" class="headerlink" title="受保护的成员"></a>受保护的成员</h3><p><strong>protected</strong>：希望与它的派生类分享但是不想被其他公共访问使用的成员。</p><h3 id="派生类向基类转换的可访问性"><a href="#派生类向基类转换的可访问性" class="headerlink" title="派生类向基类转换的可访问性"></a>派生类向基类转换的可访问性</h3><p>假定D继承自B：</p><ul><li>只有当D公有地继承B时，用户代码才能使用派生类向基类的转换；如果D继承B的方式是受保护的或者是私有的则用户代码不能使用该转换</li><li>不论D以什么方式继承B，D的成员函数和友元都能使用派生类向基类的转换；派生类向其基类的类型转换对于派生类的成员和友元来说永远是可访问的</li><li>如果D继承B的方式是公有地或者受保护的，则D的派生类的成员和友元可以使用D向B的类型转换；反之，如果D继承B的方式是私有的，则不能使用</li></ul><h3 id="改变个别成员的可访问性"><a href="#改变个别成员的可访问性" class="headerlink" title="改变个别成员的可访问性"></a>改变个别成员的可访问性</h3><p>改变派生类继承的某个名字的访问级别，如：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">std::<span class="hljs-type">size_t</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;<span class="hljs-keyword">return</span> n;&#125;<br><span class="hljs-keyword">protected</span>:<br>    std::<span class="hljs-type">size_t</span> n;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Derived</span> : <span class="hljs-keyword">private</span> Base&#123;<br>    <span class="hljs-keyword">using</span> Base::size;<br>    <span class="hljs-keyword">using</span> Base::n;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>通过在类的内部使用using声明语句，我们可以将该类的直接或间接基类中的任何可访问成员标记出来。using声明语句中的名字的访问权限由该using声明语句之前的访问运算符来决定。</p><h1 id="继承中的类作用域"><a href="#继承中的类作用域" class="headerlink" title="继承中的类作用域"></a>继承中的类作用域</h1><p>派生类的作用域位于基类的作用域之内。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Bulk_quote bulk<span class="hljs-comment">;</span><br>cout&lt;&lt;bulk.ison()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>名字ison的解析：<br>在Bulk_quote查找-&gt;在disc_quote中查找-&gt;在Qutoe中查找。</p><h3 id="在编译时按名字查找"><a href="#在编译时按名字查找" class="headerlink" title="在编译时按名字查找"></a>在编译时按名字查找</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dise_quote</span> :<span class="hljs-keyword">public</span> Quote&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">std::pair&lt;<span class="hljs-type">size_t</span>,<span class="hljs-type">double</span>&gt; <span class="hljs-title">discount_policy</span> <span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;<span class="hljs-keyword">return</span> &#123;quantity,discount&#125;;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们只能通过Disc_qutoe及其派生类的对象、引用或指针使用discount_policy：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">Bulk_quote bulk;<br>Bulk_quote *bulkp=&amp;bulk;    <span class="hljs-regexp">//</span>静态类型与动态类型一致<br>Quote *itemp=&amp;bulk;         <span class="hljs-regexp">//</span>静态类型与动态类型不一致<br>bulkp-&gt;discount_policy();   <span class="hljs-regexp">//</span>正确：bulkp的类型时Bulk_quote*<br>itemp-&gt;discount_policy();  <span class="hljs-regexp">//</span>错误：itemp的类型时Quote*<br></code></pre></td></tr></table></figure><h3 id="名字冲突与继承"><a href="#名字冲突与继承" class="headerlink" title="名字冲突与继承"></a>名字冲突与继承</h3><p>派生类的成员将隐藏同名的基类成员</p><h3 id="通过作用域运算符来使用隐藏的成员"><a href="#通过作用域运算符来使用隐藏的成员" class="headerlink" title="通过作用域运算符来使用隐藏的成员"></a>通过作用域运算符来使用隐藏的成员</h3><p><strong>tip</strong>：除了覆盖继承而来的虚函数之外，派生类最好不要重用定义在基类中的名字</p><p>调用p-&gt;men()执行一下4步：</p><ol><li>首先确定p的静态类型，因为调用的时成员，所以类型是类类型。</li><li>在p的静态类型对应的类中查找men，如果找不到，依次在直接基类中不断查找至继承链的顶端。如果找不到就报错。</li><li>一旦找到了men，进行常规类型检查，以确定对于当前找到的men，本次调用是否合法</li><li>假设调用合法，编译器根据是否是虚函数而产生不同的代码</li><li><ul><li>如果men是虚函数且我们是通过引用或指针进行的调用，则编译器产生的代码将在运行时确定运行该虚函数的哪个版本，依据是对象的动态类型</li><li>反之，如果men不是虚函数或者我们是通过对象（非引用或指针）进行的调用，则编译器将产生一个常规函数的调用。</li></ul></li></ol><h3 id="一如往常，名字查找先于类型检查"><a href="#一如往常，名字查找先于类型检查" class="headerlink" title="一如往常，名字查找先于类型检查"></a>一如往常，名字查找先于类型检查</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">struct Base&#123;<br>    int <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br>&#125;;<br>struct Derived : Base&#123;<br>    int <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(int)</span></span>;<br>&#125;;<br>Derived d;<br>d.<span class="hljs-keyword">fun</span>();<br></code></pre></td></tr></table></figure><p>上述代码错误，因为Derived中的fun将Base中的fun覆盖，而d调用时没有提供参数，所以错误。</p><h3 id="通过基类调用隐藏的虚函数"><a href="#通过基类调用隐藏的虚函数" class="headerlink" title="通过基类调用隐藏的虚函数"></a>通过基类调用隐藏的虚函数</h3><h3 id="覆盖重载的函数"><a href="#覆盖重载的函数" class="headerlink" title="覆盖重载的函数"></a>覆盖重载的函数</h3><p>有时一个类仅需重载集合中的一些而非全部函数，一种好的解决方法是为重载的成员提供一条using声明语句，这样我们就无需覆盖基类的每一个重载版本了。<br>using语句指定一个名字而不指定形参列表。</p><h1 id="构造函数与拷贝控制"><a href="#构造函数与拷贝控制" class="headerlink" title="构造函数与拷贝控制"></a>构造函数与拷贝控制</h1><h2 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Quote</span>&#123;<br>    <span class="hljs-keyword">public</span>: <br>        vitural ~Quote ()=<span class="hljs-literal">default</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="虚析构函数将阻止合成移动操作"><a href="#虚析构函数将阻止合成移动操作" class="headerlink" title="虚析构函数将阻止合成移动操作"></a>虚析构函数将阻止合成移动操作</h3><h2 id="合成拷贝控制与继承"><a href="#合成拷贝控制与继承" class="headerlink" title="合成拷贝控制与继承"></a>合成拷贝控制与继承</h2><p>对于派生类的析构函数来说，不仅要销毁自己的成员，还要销毁派生类的直接基类，该直接基类要销毁它自己的直接基类，以此类推到继承链的顶端。</p><h3 id="派生类中删除的拷贝控制与基类的关系"><a href="#派生类中删除的拷贝控制与基类的关系" class="headerlink" title="派生类中删除的拷贝控制与基类的关系"></a>派生类中删除的拷贝控制与基类的关系</h3>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>第八章 IO库</title>
    <link href="/2022/04/07/%E7%AC%AC%E5%85%AB%E7%AB%A0-IO%E5%BA%93/"/>
    <url>/2022/04/07/%E7%AC%AC%E5%85%AB%E7%AB%A0-IO%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="IO类"><a href="#IO类" class="headerlink" title="IO类"></a>IO类</h1><p>iostream:读写流的基本类型<br>fstream：读写命名文件类型<br>sstream：读写内存string对象的类型</p><img src="/2022/04/07/%E7%AC%AC%E5%85%AB%E7%AB%A0-IO%E5%BA%93/IO%E7%B1%BB.jpg" class><h2 id="IO对象无拷贝或赋值"><a href="#IO对象无拷贝或赋值" class="headerlink" title="IO对象无拷贝或赋值"></a>IO对象无拷贝或赋值</h2><p>不能拷贝IO对象，也不能将形参或返回类型设置为流类型，进行IO操作的函数通常以引用方式传递和返回流，传递和返回的引用不能是const的</p><h2 id="条件状态"><a href="#条件状态" class="headerlink" title="条件状态"></a>条件状态</h2><p>确定一个流对象状态最简单的方法是将它当作一个条件来使用</p><figure class="highlight stylus"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">(cin&gt;&gt;word)</span></span><br></code></pre></td></tr></table></figure><h1 id="文件输入与输出"><a href="#文件输入与输出" class="headerlink" title="文件输入与输出"></a>文件输入与输出</h1><h2 id="fstream代替iosstream-amp"><a href="#fstream代替iosstream-amp" class="headerlink" title="fstream代替iosstream&amp;"></a>fstream代替iosstream&amp;</h2><p>如果有一个函数接受一个ostream&amp;的参数，我们可以给它传递一个ofstream对象，istream同理</p><h2 id="open和close"><a href="#open和close" class="headerlink" title="open和close"></a>open和close</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">ofstream <span class="hljs-keyword">out</span>;<br><span class="hljs-keyword">out</span>.<span class="hljs-keyword">open</span>(<span class="hljs-string">&quot;xxx.txt&quot;</span>);<br></code></pre></td></tr></table></figure><p>进行open是否成功的检验</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">if</span>(out);<br></code></pre></td></tr></table></figure><h2 id="以out模式打开文件会丢弃已有数据"><a href="#以out模式打开文件会丢弃已有数据" class="headerlink" title="以out模式打开文件会丢弃已有数据"></a>以out模式打开文件会丢弃已有数据</h2><p>保留被ofstream打开的文件中已有数据的唯一方式是显式指定app或in模式</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> x,sum=<span class="hljs-number">0</span>;<br>    <span class="hljs-function">ifstream <span class="hljs-title">srcFile</span><span class="hljs-params">(<span class="hljs-string">&quot;in.txt&quot;</span>, ios::in)</span></span>; <span class="hljs-comment">//以文本模式打开in.txt备读</span><br>    <span class="hljs-keyword">if</span> (!srcFile) &#123; <span class="hljs-comment">//打开失败</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;error opening source file.&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-function">ofstream <span class="hljs-title">destFile</span><span class="hljs-params">(<span class="hljs-string">&quot;out.txt&quot;</span>, ios::out)</span></span>; <span class="hljs-comment">//以文本模式打开out.txt备写</span><br>    <span class="hljs-keyword">if</span> (!destFile) &#123;<br>        srcFile.<span class="hljs-built_in">close</span>(); <span class="hljs-comment">//程序结束前不能忘记关闭以前打开过的文件</span><br>        cout &lt;&lt; <span class="hljs-string">&quot;error opening destination file.&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-comment">//可以像用cin那样用ifstream对象</span><br>    <span class="hljs-keyword">while</span> (srcFile &gt;&gt; x) &#123;<br>        sum += x;<br>        <span class="hljs-comment">//可以像 cout 那样使用 ofstream 对象</span><br>        destFile &lt;&lt; x &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; <span class="hljs-string">&quot;sum：&quot;</span> &lt;&lt; sum &lt;&lt; endl;<br>    destFile.<span class="hljs-built_in">close</span>();<br>    srcFile.<span class="hljs-built_in">close</span>();<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="string流"><a href="#string流" class="headerlink" title="string流"></a>string流</h1><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">PersonInfo</span>&#123;<br>    string name;<br>    vector&lt;string&gt; phones;<br>&#125;<br><br>string line,<span class="hljs-type">word</span>;<span class="hljs-comment">//分别保存来自输入的一行和单词</span><br>vector&lt;PersonInfo&gt; people;<span class="hljs-comment">//保存来自输入的所有记录</span><br><br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">getline</span>(is.line))&#123;<br>    PersonInfo info;<span class="hljs-comment">//创建一个保存此记录数据的对象</span><br>    <span class="hljs-function">isstringstream <span class="hljs-title">record</span><span class="hljs-params">(line)</span></span>;<span class="hljs-comment">//将记录绑定到刚读入的行</span><br>        record&gt;&gt;info.name;<span class="hljs-comment">//读取名字</span><br>    <span class="hljs-keyword">while</span>(record&gt;&gt;<span class="hljs-type">word</span>)<span class="hljs-comment">//读取电话号码</span><br>        info.phones.<span class="hljs-built_in">push_back</span>(<span class="hljs-type">word</span>);<span class="hljs-comment">//保持它们</span><br>    people.<span class="hljs-built_in">push_back</span>(info);<span class="hljs-comment">//将此记录追加到people末尾</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">for</span>(const auto &amp;entry :people)&#123;<span class="hljs-regexp">//</span>对people的每一项<br>    osstringstream formatted,badNums;<span class="hljs-regexp">//</span>每个循环步创建的对象<br>    <span class="hljs-keyword">for</span>(const auto &amp;nums : entry.phones)&#123;<span class="hljs-regexp">//</span>对每个数<br>        <span class="hljs-keyword">if</span>(!valid(nums))&#123;<br>            badNums&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;nums;<span class="hljs-regexp">//</span>将数以字符串的形式存入badNums<br>        &#125;<span class="hljs-keyword">else</span><br>            formatted &lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;format(nums);<span class="hljs-regexp">//</span>将格式化的字符串“写入”formatted<br>    &#125;<br>    <span class="hljs-keyword">if</span>(banNums.str().empty())<span class="hljs-regexp">//</span>没有错误的数<br>        os&lt;&lt;entry.name&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;formatted.str()&lt;&lt;endl;<span class="hljs-regexp">//</span>打印名字和格式化的数<br>    <span class="hljs-keyword">else</span> <span class="hljs-regexp">//</span>否则，打印名字和错误的数<br>        cerr&lt;&lt;<span class="hljs-string">&quot;input error:&quot;</span>&lt;&lt;entry.name&lt;&lt;<span class="hljs-string">&quot;invalid number(s) &quot;</span>&lt;&lt;badNums.str()&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>valid和format，分别完成电话号码的验证和改变格式的功能。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>前七章-C++基础</title>
    <link href="/2022/04/05/%E5%89%8D%E4%B8%83%E7%AB%A0-C++%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/04/05/%E5%89%8D%E4%B8%83%E7%AB%A0-C++%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="const限定符"><a href="#const限定符" class="headerlink" title="const限定符"></a>const限定符</h2><h4 id="初始化和对const的引用"><a href="#初始化和对const的引用" class="headerlink" title="初始化和对const的引用"></a>初始化和对const的引用</h4><p>初始化常量引用时，可以用任意表达式作为初始值，只要该表达式能转换成引用的类型即可。<strong>引用类型都要和与之绑定的对象的类型一致，此处属于两种例外之一</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">double</span> dval =<span class="hljs-number">3.14</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> &amp;ri=dval;<br></code></pre></td></tr></table></figure><p>此处正确，编译器把上述代码变成如下形式，此时，ri绑定了一个临时量对象。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> temp= dval;<br><span class="hljs-keyword">const</span> <span class="hljs-built_in">int</span> &amp;ri=temp;<br></code></pre></td></tr></table></figure><p>同样的指针也类似,<strong>允许指向常量的指针指向非常量对象</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">double <span class="hljs-attribute">dval</span>=3.14;<br>const double <span class="hljs-number">*c</span><span class="hljs-attribute">ptr</span>=&amp;dval;<br></code></pre></td></tr></table></figure><h4 id="顶层const"><a href="#顶层const" class="headerlink" title="顶层const"></a>顶层const</h4><p>表示指针本身是个常量，<strong>底层const</strong>表示<br><strong>顶层const</strong>可以表示任意对象是常量，<strong>底层const</strong>与指针和引用等复合类型的基本类型部分有关。<br>对于拷贝操作来说，顶层const基本不受影响，而对于底层const，拷入和拷出的对象必须是相同的底层const，或者非常量可以转化成常量，而常量不能转化成非常量。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">const int <span class="hljs-attribute">i</span>=0;<br>int &amp;<span class="hljs-attribute">r</span>=i;<br></code></pre></td></tr></table></figure><p>上述代码是错误的，普通的int&amp;类型不能绑定到int常量上。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
      <category>C++ Primer</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>虚幻4入门</title>
    <link href="/2022/03/22/%E8%99%9A%E5%B9%BB4%E5%85%A5%E9%97%A8/"/>
    <url>/2022/03/22/%E8%99%9A%E5%B9%BB4%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="虚幻4工程文件夹的结构"><a href="#虚幻4工程文件夹的结构" class="headerlink" title="虚幻4工程文件夹的结构"></a>虚幻4工程文件夹的结构</h3><div class="code-wrapper"><pre><code class="hljs">Config ：包含项目设置，键盘输入之类的配置文件Content ：存放引擎或游戏内容，包括地图、贴图、模型、材质、蓝图等Intermediate 包含了在编译引擎或游戏时生成的临时文件Saved 包含了自动保存内容，配置（*.ini）文件以及日志文件.uproject 项目启动程序，开启项目</code></pre></div><img src="/2022/03/22/%E8%99%9A%E5%B9%BB4%E5%85%A5%E9%97%A8/%E9%A1%B9%E7%9B%AE%E7%BB%84%E6%88%90.png" class>]]></content>
    
    
    <categories>
      
      <category>虚幻4</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
